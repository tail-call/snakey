{
  "version": 3,
  "sources": ["../node_modules/assertion-error/index.js", "../node_modules/pathval/index.js", "../node_modules/chai/lib/chai/utils/flag.js", "../node_modules/chai/lib/chai/utils/test.js", "../node_modules/type-detect/type-detect.js", "../node_modules/chai/lib/chai/utils/expectTypes.js", "../node_modules/chai/lib/chai/utils/getActual.js", "../node_modules/get-func-name/index.js", "(disabled):util", "../node_modules/loupe/loupe.js", "../node_modules/chai/lib/chai/config.js", "../node_modules/chai/lib/chai/utils/inspect.js", "../node_modules/chai/lib/chai/utils/objDisplay.js", "../node_modules/chai/lib/chai/utils/getMessage.js", "../node_modules/chai/lib/chai/utils/transferFlags.js", "../node_modules/deep-eql/index.js", "../node_modules/chai/lib/chai/utils/isProxyEnabled.js", "../node_modules/chai/lib/chai/utils/addProperty.js", "../node_modules/chai/lib/chai/utils/addLengthGuard.js", "../node_modules/chai/lib/chai/utils/getProperties.js", "../node_modules/chai/lib/chai/utils/proxify.js", "../node_modules/chai/lib/chai/utils/addMethod.js", "../node_modules/chai/lib/chai/utils/overwriteProperty.js", "../node_modules/chai/lib/chai/utils/overwriteMethod.js", "../node_modules/chai/lib/chai/utils/addChainableMethod.js", "../node_modules/chai/lib/chai/utils/overwriteChainableMethod.js", "../node_modules/chai/lib/chai/utils/compareByInspect.js", "../node_modules/chai/lib/chai/utils/getOwnEnumerablePropertySymbols.js", "../node_modules/chai/lib/chai/utils/getOwnEnumerableProperties.js", "../node_modules/check-error/index.js", "../node_modules/chai/lib/chai/utils/isNaN.js", "../node_modules/chai/lib/chai/utils/getOperator.js", "../node_modules/chai/lib/chai/utils/index.js", "../node_modules/chai/lib/chai/assertion.js", "../node_modules/chai/lib/chai/core/assertions.js", "../node_modules/chai/lib/chai/interface/expect.js", "../node_modules/chai/lib/chai/interface/should.js", "../node_modules/chai/lib/chai/interface/assert.js", "../node_modules/chai/lib/chai.js", "../node_modules/chai/index.js", "../src/sum.ts", "../node_modules/chai/index.mjs", "../tests/sum.test.ts", "../tests/index.ts"],
  "sourcesContent": ["/*!\n * assertion-error\n * Copyright(c) 2013 Jake Luer <jake@qualiancy.com>\n * MIT Licensed\n */\n\n/*!\n * Return a function that will copy properties from\n * one object to another excluding any originally\n * listed. Returned function will create a new `{}`.\n *\n * @param {String} excluded properties ...\n * @return {Function}\n */\n\nfunction exclude () {\n  var excludes = [].slice.call(arguments);\n\n  function excludeProps (res, obj) {\n    Object.keys(obj).forEach(function (key) {\n      if (!~excludes.indexOf(key)) res[key] = obj[key];\n    });\n  }\n\n  return function extendExclude () {\n    var args = [].slice.call(arguments)\n      , i = 0\n      , res = {};\n\n    for (; i < args.length; i++) {\n      excludeProps(res, args[i]);\n    }\n\n    return res;\n  };\n};\n\n/*!\n * Primary Exports\n */\n\nmodule.exports = AssertionError;\n\n/**\n * ### AssertionError\n *\n * An extension of the JavaScript `Error` constructor for\n * assertion and validation scenarios.\n *\n * @param {String} message\n * @param {Object} properties to include (optional)\n * @param {callee} start stack function (optional)\n */\n\nfunction AssertionError (message, _props, ssf) {\n  var extend = exclude('name', 'message', 'stack', 'constructor', 'toJSON')\n    , props = extend(_props || {});\n\n  // default values\n  this.message = message || 'Unspecified AssertionError';\n  this.showDiff = false;\n\n  // copy from properties\n  for (var key in props) {\n    this[key] = props[key];\n  }\n\n  // capture stack trace\n  ssf = ssf || AssertionError;\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, ssf);\n  } else {\n    try {\n      throw new Error();\n    } catch(e) {\n      this.stack = e.stack;\n    }\n  }\n}\n\n/*!\n * Inherit from Error.prototype\n */\n\nAssertionError.prototype = Object.create(Error.prototype);\n\n/*!\n * Statically set name\n */\n\nAssertionError.prototype.name = 'AssertionError';\n\n/*!\n * Ensure correct constructor\n */\n\nAssertionError.prototype.constructor = AssertionError;\n\n/**\n * Allow errors to be converted to JSON for static transfer.\n *\n * @param {Boolean} include stack (default: `true`)\n * @return {Object} object that can be `JSON.stringify`\n */\n\nAssertionError.prototype.toJSON = function (stack) {\n  var extend = exclude('constructor', 'toJSON', 'stack')\n    , props = extend({ name: this.name }, this);\n\n  // include stack if exists and not turned off\n  if (false !== stack && this.stack) {\n    props.stack = this.stack;\n  }\n\n  return props;\n};\n", "'use strict';\n\n/* !\n * Chai - pathval utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * @see https://github.com/logicalparadox/filtr\n * MIT Licensed\n */\n\n/**\n * ### .hasProperty(object, name)\n *\n * This allows checking whether an object has own\n * or inherited from prototype chain named property.\n *\n * Basically does the same thing as the `in`\n * operator but works properly with null/undefined values\n * and other primitives.\n *\n *     var obj = {\n *         arr: ['a', 'b', 'c']\n *       , str: 'Hello'\n *     }\n *\n * The following would be the results.\n *\n *     hasProperty(obj, 'str');  // true\n *     hasProperty(obj, 'constructor');  // true\n *     hasProperty(obj, 'bar');  // false\n *\n *     hasProperty(obj.str, 'length'); // true\n *     hasProperty(obj.str, 1);  // true\n *     hasProperty(obj.str, 5);  // false\n *\n *     hasProperty(obj.arr, 'length');  // true\n *     hasProperty(obj.arr, 2);  // true\n *     hasProperty(obj.arr, 3);  // false\n *\n * @param {Object} object\n * @param {String|Symbol} name\n * @returns {Boolean} whether it exists\n * @namespace Utils\n * @name hasProperty\n * @api public\n */\n\nfunction hasProperty(obj, name) {\n  if (typeof obj === 'undefined' || obj === null) {\n    return false;\n  }\n\n  // The `in` operator does not work with primitives.\n  return name in Object(obj);\n}\n\n/* !\n * ## parsePath(path)\n *\n * Helper function used to parse string object\n * paths. Use in conjunction with `internalGetPathValue`.\n *\n *      var parsed = parsePath('myobject.property.subprop');\n *\n * ### Paths:\n *\n * * Can be infinitely deep and nested.\n * * Arrays are also valid using the formal `myobject.document[3].property`.\n * * Literal dots and brackets (not delimiter) must be backslash-escaped.\n *\n * @param {String} path\n * @returns {Object} parsed\n * @api private\n */\n\nfunction parsePath(path) {\n  var str = path.replace(/([^\\\\])\\[/g, '$1.[');\n  var parts = str.match(/(\\\\\\.|[^.]+?)+/g);\n  return parts.map(function mapMatches(value) {\n    if (\n      value === 'constructor' ||\n      value === '__proto__' ||\n      value === 'prototype'\n    ) {\n      return {};\n    }\n    var regexp = /^\\[(\\d+)\\]$/;\n    var mArr = regexp.exec(value);\n    var parsed = null;\n    if (mArr) {\n      parsed = { i: parseFloat(mArr[1]) };\n    } else {\n      parsed = { p: value.replace(/\\\\([.[\\]])/g, '$1') };\n    }\n\n    return parsed;\n  });\n}\n\n/* !\n * ## internalGetPathValue(obj, parsed[, pathDepth])\n *\n * Helper companion function for `.parsePath` that returns\n * the value located at the parsed address.\n *\n *      var value = getPathValue(obj, parsed);\n *\n * @param {Object} object to search against\n * @param {Object} parsed definition from `parsePath`.\n * @param {Number} depth (nesting level) of the property we want to retrieve\n * @returns {Object|Undefined} value\n * @api private\n */\n\nfunction internalGetPathValue(obj, parsed, pathDepth) {\n  var temporaryValue = obj;\n  var res = null;\n  pathDepth = typeof pathDepth === 'undefined' ? parsed.length : pathDepth;\n\n  for (var i = 0; i < pathDepth; i++) {\n    var part = parsed[i];\n    if (temporaryValue) {\n      if (typeof part.p === 'undefined') {\n        temporaryValue = temporaryValue[part.i];\n      } else {\n        temporaryValue = temporaryValue[part.p];\n      }\n\n      if (i === pathDepth - 1) {\n        res = temporaryValue;\n      }\n    }\n  }\n\n  return res;\n}\n\n/* !\n * ## internalSetPathValue(obj, value, parsed)\n *\n * Companion function for `parsePath` that sets\n * the value located at a parsed address.\n *\n *  internalSetPathValue(obj, 'value', parsed);\n *\n * @param {Object} object to search and define on\n * @param {*} value to use upon set\n * @param {Object} parsed definition from `parsePath`\n * @api private\n */\n\nfunction internalSetPathValue(obj, val, parsed) {\n  var tempObj = obj;\n  var pathDepth = parsed.length;\n  var part = null;\n  // Here we iterate through every part of the path\n  for (var i = 0; i < pathDepth; i++) {\n    var propName = null;\n    var propVal = null;\n    part = parsed[i];\n\n    // If it's the last part of the path, we set the 'propName' value with the property name\n    if (i === pathDepth - 1) {\n      propName = typeof part.p === 'undefined' ? part.i : part.p;\n      // Now we set the property with the name held by 'propName' on object with the desired val\n      tempObj[propName] = val;\n    } else if (typeof part.p !== 'undefined' && tempObj[part.p]) {\n      tempObj = tempObj[part.p];\n    } else if (typeof part.i !== 'undefined' && tempObj[part.i]) {\n      tempObj = tempObj[part.i];\n    } else {\n      // If the obj doesn't have the property we create one with that name to define it\n      var next = parsed[i + 1];\n      // Here we set the name of the property which will be defined\n      propName = typeof part.p === 'undefined' ? part.i : part.p;\n      // Here we decide if this property will be an array or a new object\n      propVal = typeof next.p === 'undefined' ? [] : {};\n      tempObj[propName] = propVal;\n      tempObj = tempObj[propName];\n    }\n  }\n}\n\n/**\n * ### .getPathInfo(object, path)\n *\n * This allows the retrieval of property info in an\n * object given a string path.\n *\n * The path info consists of an object with the\n * following properties:\n *\n * * parent - The parent object of the property referenced by `path`\n * * name - The name of the final property, a number if it was an array indexer\n * * value - The value of the property, if it exists, otherwise `undefined`\n * * exists - Whether the property exists or not\n *\n * @param {Object} object\n * @param {String} path\n * @returns {Object} info\n * @namespace Utils\n * @name getPathInfo\n * @api public\n */\n\nfunction getPathInfo(obj, path) {\n  var parsed = parsePath(path);\n  var last = parsed[parsed.length - 1];\n  var info = {\n    parent:\n      parsed.length > 1 ?\n        internalGetPathValue(obj, parsed, parsed.length - 1) :\n        obj,\n    name: last.p || last.i,\n    value: internalGetPathValue(obj, parsed),\n  };\n  info.exists = hasProperty(info.parent, info.name);\n\n  return info;\n}\n\n/**\n * ### .getPathValue(object, path)\n *\n * This allows the retrieval of values in an\n * object given a string path.\n *\n *     var obj = {\n *         prop1: {\n *             arr: ['a', 'b', 'c']\n *           , str: 'Hello'\n *         }\n *       , prop2: {\n *             arr: [ { nested: 'Universe' } ]\n *           , str: 'Hello again!'\n *         }\n *     }\n *\n * The following would be the results.\n *\n *     getPathValue(obj, 'prop1.str'); // Hello\n *     getPathValue(obj, 'prop1.att[2]'); // b\n *     getPathValue(obj, 'prop2.arr[0].nested'); // Universe\n *\n * @param {Object} object\n * @param {String} path\n * @returns {Object} value or `undefined`\n * @namespace Utils\n * @name getPathValue\n * @api public\n */\n\nfunction getPathValue(obj, path) {\n  var info = getPathInfo(obj, path);\n  return info.value;\n}\n\n/**\n * ### .setPathValue(object, path, value)\n *\n * Define the value in an object at a given string path.\n *\n * ```js\n * var obj = {\n *     prop1: {\n *         arr: ['a', 'b', 'c']\n *       , str: 'Hello'\n *     }\n *   , prop2: {\n *         arr: [ { nested: 'Universe' } ]\n *       , str: 'Hello again!'\n *     }\n * };\n * ```\n *\n * The following would be acceptable.\n *\n * ```js\n * var properties = require('tea-properties');\n * properties.set(obj, 'prop1.str', 'Hello Universe!');\n * properties.set(obj, 'prop1.arr[2]', 'B');\n * properties.set(obj, 'prop2.arr[0].nested.value', { hello: 'universe' });\n * ```\n *\n * @param {Object} object\n * @param {String} path\n * @param {Mixed} value\n * @api private\n */\n\nfunction setPathValue(obj, path, val) {\n  var parsed = parsePath(path);\n  internalSetPathValue(obj, val, parsed);\n  return obj;\n}\n\nmodule.exports = {\n  hasProperty: hasProperty,\n  getPathInfo: getPathInfo,\n  getPathValue: getPathValue,\n  setPathValue: setPathValue,\n};\n", "/*!\n * Chai - flag utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .flag(object, key, [value])\n *\n * Get or set a flag value on an object. If a\n * value is provided it will be set, else it will\n * return the currently set value or `undefined` if\n * the value is not set.\n *\n *     utils.flag(this, 'foo', 'bar'); // setter\n *     utils.flag(this, 'foo'); // getter, returns `bar`\n *\n * @param {Object} object constructed Assertion\n * @param {String} key\n * @param {Mixed} value (optional)\n * @namespace Utils\n * @name flag\n * @api private\n */\n\nmodule.exports = function flag(obj, key, value) {\n  var flags = obj.__flags || (obj.__flags = Object.create(null));\n  if (arguments.length === 3) {\n    flags[key] = value;\n  } else {\n    return flags[key];\n  }\n};\n", "/*!\n * Chai - test utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar flag = require('./flag');\n\n/**\n * ### .test(object, expression)\n *\n * Test and object for expression.\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name test\n */\n\nmodule.exports = function test(obj, args) {\n  var negate = flag(obj, 'negate')\n    , expr = args[0];\n  return negate ? !expr : expr;\n};\n", "(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.typeDetect = factory());\n}(this, (function () { 'use strict';\n\n/* !\n * type-detect\n * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\nvar promiseExists = typeof Promise === 'function';\n\n/* eslint-disable no-undef */\nvar globalObject = typeof self === 'object' ? self : global; // eslint-disable-line id-blacklist\n\nvar symbolExists = typeof Symbol !== 'undefined';\nvar mapExists = typeof Map !== 'undefined';\nvar setExists = typeof Set !== 'undefined';\nvar weakMapExists = typeof WeakMap !== 'undefined';\nvar weakSetExists = typeof WeakSet !== 'undefined';\nvar dataViewExists = typeof DataView !== 'undefined';\nvar symbolIteratorExists = symbolExists && typeof Symbol.iterator !== 'undefined';\nvar symbolToStringTagExists = symbolExists && typeof Symbol.toStringTag !== 'undefined';\nvar setEntriesExists = setExists && typeof Set.prototype.entries === 'function';\nvar mapEntriesExists = mapExists && typeof Map.prototype.entries === 'function';\nvar setIteratorPrototype = setEntriesExists && Object.getPrototypeOf(new Set().entries());\nvar mapIteratorPrototype = mapEntriesExists && Object.getPrototypeOf(new Map().entries());\nvar arrayIteratorExists = symbolIteratorExists && typeof Array.prototype[Symbol.iterator] === 'function';\nvar arrayIteratorPrototype = arrayIteratorExists && Object.getPrototypeOf([][Symbol.iterator]());\nvar stringIteratorExists = symbolIteratorExists && typeof String.prototype[Symbol.iterator] === 'function';\nvar stringIteratorPrototype = stringIteratorExists && Object.getPrototypeOf(''[Symbol.iterator]());\nvar toStringLeftSliceLength = 8;\nvar toStringRightSliceLength = -1;\n/**\n * ### typeOf (obj)\n *\n * Uses `Object.prototype.toString` to determine the type of an object,\n * normalising behaviour across engine versions & well optimised.\n *\n * @param {Mixed} object\n * @return {String} object type\n * @api public\n */\nfunction typeDetect(obj) {\n  /* ! Speed optimisation\n   * Pre:\n   *   string literal     x 3,039,035 ops/sec \u00B11.62% (78 runs sampled)\n   *   boolean literal    x 1,424,138 ops/sec \u00B14.54% (75 runs sampled)\n   *   number literal     x 1,653,153 ops/sec \u00B11.91% (82 runs sampled)\n   *   undefined          x 9,978,660 ops/sec \u00B11.92% (75 runs sampled)\n   *   function           x 2,556,769 ops/sec \u00B11.73% (77 runs sampled)\n   * Post:\n   *   string literal     x 38,564,796 ops/sec \u00B11.15% (79 runs sampled)\n   *   boolean literal    x 31,148,940 ops/sec \u00B11.10% (79 runs sampled)\n   *   number literal     x 32,679,330 ops/sec \u00B11.90% (78 runs sampled)\n   *   undefined          x 32,363,368 ops/sec \u00B11.07% (82 runs sampled)\n   *   function           x 31,296,870 ops/sec \u00B10.96% (83 runs sampled)\n   */\n  var typeofObj = typeof obj;\n  if (typeofObj !== 'object') {\n    return typeofObj;\n  }\n\n  /* ! Speed optimisation\n   * Pre:\n   *   null               x 28,645,765 ops/sec \u00B11.17% (82 runs sampled)\n   * Post:\n   *   null               x 36,428,962 ops/sec \u00B11.37% (84 runs sampled)\n   */\n  if (obj === null) {\n    return 'null';\n  }\n\n  /* ! Spec Conformance\n   * Test: `Object.prototype.toString.call(window)``\n   *  - Node === \"[object global]\"\n   *  - Chrome === \"[object global]\"\n   *  - Firefox === \"[object Window]\"\n   *  - PhantomJS === \"[object Window]\"\n   *  - Safari === \"[object Window]\"\n   *  - IE 11 === \"[object Window]\"\n   *  - IE Edge === \"[object Window]\"\n   * Test: `Object.prototype.toString.call(this)``\n   *  - Chrome Worker === \"[object global]\"\n   *  - Firefox Worker === \"[object DedicatedWorkerGlobalScope]\"\n   *  - Safari Worker === \"[object DedicatedWorkerGlobalScope]\"\n   *  - IE 11 Worker === \"[object WorkerGlobalScope]\"\n   *  - IE Edge Worker === \"[object WorkerGlobalScope]\"\n   */\n  if (obj === globalObject) {\n    return 'global';\n  }\n\n  /* ! Speed optimisation\n   * Pre:\n   *   array literal      x 2,888,352 ops/sec \u00B10.67% (82 runs sampled)\n   * Post:\n   *   array literal      x 22,479,650 ops/sec \u00B10.96% (81 runs sampled)\n   */\n  if (\n    Array.isArray(obj) &&\n    (symbolToStringTagExists === false || !(Symbol.toStringTag in obj))\n  ) {\n    return 'Array';\n  }\n\n  // Not caching existence of `window` and related properties due to potential\n  // for `window` to be unset before tests in quasi-browser environments.\n  if (typeof window === 'object' && window !== null) {\n    /* ! Spec Conformance\n     * (https://html.spec.whatwg.org/multipage/browsers.html#location)\n     * WhatWG HTML$7.7.3 - The `Location` interface\n     * Test: `Object.prototype.toString.call(window.location)``\n     *  - IE <=11 === \"[object Object]\"\n     *  - IE Edge <=13 === \"[object Object]\"\n     */\n    if (typeof window.location === 'object' && obj === window.location) {\n      return 'Location';\n    }\n\n    /* ! Spec Conformance\n     * (https://html.spec.whatwg.org/#document)\n     * WhatWG HTML$3.1.1 - The `Document` object\n     * Note: Most browsers currently adher to the W3C DOM Level 2 spec\n     *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-26809268)\n     *       which suggests that browsers should use HTMLTableCellElement for\n     *       both TD and TH elements. WhatWG separates these.\n     *       WhatWG HTML states:\n     *         > For historical reasons, Window objects must also have a\n     *         > writable, configurable, non-enumerable property named\n     *         > HTMLDocument whose value is the Document interface object.\n     * Test: `Object.prototype.toString.call(document)``\n     *  - Chrome === \"[object HTMLDocument]\"\n     *  - Firefox === \"[object HTMLDocument]\"\n     *  - Safari === \"[object HTMLDocument]\"\n     *  - IE <=10 === \"[object Document]\"\n     *  - IE 11 === \"[object HTMLDocument]\"\n     *  - IE Edge <=13 === \"[object HTMLDocument]\"\n     */\n    if (typeof window.document === 'object' && obj === window.document) {\n      return 'Document';\n    }\n\n    if (typeof window.navigator === 'object') {\n      /* ! Spec Conformance\n       * (https://html.spec.whatwg.org/multipage/webappapis.html#mimetypearray)\n       * WhatWG HTML$8.6.1.5 - Plugins - Interface MimeTypeArray\n       * Test: `Object.prototype.toString.call(navigator.mimeTypes)``\n       *  - IE <=10 === \"[object MSMimeTypesCollection]\"\n       */\n      if (typeof window.navigator.mimeTypes === 'object' &&\n          obj === window.navigator.mimeTypes) {\n        return 'MimeTypeArray';\n      }\n\n      /* ! Spec Conformance\n       * (https://html.spec.whatwg.org/multipage/webappapis.html#pluginarray)\n       * WhatWG HTML$8.6.1.5 - Plugins - Interface PluginArray\n       * Test: `Object.prototype.toString.call(navigator.plugins)``\n       *  - IE <=10 === \"[object MSPluginsCollection]\"\n       */\n      if (typeof window.navigator.plugins === 'object' &&\n          obj === window.navigator.plugins) {\n        return 'PluginArray';\n      }\n    }\n\n    if ((typeof window.HTMLElement === 'function' ||\n        typeof window.HTMLElement === 'object') &&\n        obj instanceof window.HTMLElement) {\n      /* ! Spec Conformance\n      * (https://html.spec.whatwg.org/multipage/webappapis.html#pluginarray)\n      * WhatWG HTML$4.4.4 - The `blockquote` element - Interface `HTMLQuoteElement`\n      * Test: `Object.prototype.toString.call(document.createElement('blockquote'))``\n      *  - IE <=10 === \"[object HTMLBlockElement]\"\n      */\n      if (obj.tagName === 'BLOCKQUOTE') {\n        return 'HTMLQuoteElement';\n      }\n\n      /* ! Spec Conformance\n       * (https://html.spec.whatwg.org/#htmltabledatacellelement)\n       * WhatWG HTML$4.9.9 - The `td` element - Interface `HTMLTableDataCellElement`\n       * Note: Most browsers currently adher to the W3C DOM Level 2 spec\n       *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-82915075)\n       *       which suggests that browsers should use HTMLTableCellElement for\n       *       both TD and TH elements. WhatWG separates these.\n       * Test: Object.prototype.toString.call(document.createElement('td'))\n       *  - Chrome === \"[object HTMLTableCellElement]\"\n       *  - Firefox === \"[object HTMLTableCellElement]\"\n       *  - Safari === \"[object HTMLTableCellElement]\"\n       */\n      if (obj.tagName === 'TD') {\n        return 'HTMLTableDataCellElement';\n      }\n\n      /* ! Spec Conformance\n       * (https://html.spec.whatwg.org/#htmltableheadercellelement)\n       * WhatWG HTML$4.9.9 - The `td` element - Interface `HTMLTableHeaderCellElement`\n       * Note: Most browsers currently adher to the W3C DOM Level 2 spec\n       *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-82915075)\n       *       which suggests that browsers should use HTMLTableCellElement for\n       *       both TD and TH elements. WhatWG separates these.\n       * Test: Object.prototype.toString.call(document.createElement('th'))\n       *  - Chrome === \"[object HTMLTableCellElement]\"\n       *  - Firefox === \"[object HTMLTableCellElement]\"\n       *  - Safari === \"[object HTMLTableCellElement]\"\n       */\n      if (obj.tagName === 'TH') {\n        return 'HTMLTableHeaderCellElement';\n      }\n    }\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   Float64Array       x 625,644 ops/sec \u00B11.58% (80 runs sampled)\n  *   Float32Array       x 1,279,852 ops/sec \u00B12.91% (77 runs sampled)\n  *   Uint32Array        x 1,178,185 ops/sec \u00B11.95% (83 runs sampled)\n  *   Uint16Array        x 1,008,380 ops/sec \u00B12.25% (80 runs sampled)\n  *   Uint8Array         x 1,128,040 ops/sec \u00B12.11% (81 runs sampled)\n  *   Int32Array         x 1,170,119 ops/sec \u00B12.88% (80 runs sampled)\n  *   Int16Array         x 1,176,348 ops/sec \u00B15.79% (86 runs sampled)\n  *   Int8Array          x 1,058,707 ops/sec \u00B14.94% (77 runs sampled)\n  *   Uint8ClampedArray  x 1,110,633 ops/sec \u00B14.20% (80 runs sampled)\n  * Post:\n  *   Float64Array       x 7,105,671 ops/sec \u00B113.47% (64 runs sampled)\n  *   Float32Array       x 5,887,912 ops/sec \u00B11.46% (82 runs sampled)\n  *   Uint32Array        x 6,491,661 ops/sec \u00B11.76% (79 runs sampled)\n  *   Uint16Array        x 6,559,795 ops/sec \u00B11.67% (82 runs sampled)\n  *   Uint8Array         x 6,463,966 ops/sec \u00B11.43% (85 runs sampled)\n  *   Int32Array         x 5,641,841 ops/sec \u00B13.49% (81 runs sampled)\n  *   Int16Array         x 6,583,511 ops/sec \u00B11.98% (80 runs sampled)\n  *   Int8Array          x 6,606,078 ops/sec \u00B11.74% (81 runs sampled)\n  *   Uint8ClampedArray  x 6,602,224 ops/sec \u00B11.77% (83 runs sampled)\n  */\n  var stringTag = (symbolToStringTagExists && obj[Symbol.toStringTag]);\n  if (typeof stringTag === 'string') {\n    return stringTag;\n  }\n\n  var objPrototype = Object.getPrototypeOf(obj);\n  /* ! Speed optimisation\n  * Pre:\n  *   regex literal      x 1,772,385 ops/sec \u00B11.85% (77 runs sampled)\n  *   regex constructor  x 2,143,634 ops/sec \u00B12.46% (78 runs sampled)\n  * Post:\n  *   regex literal      x 3,928,009 ops/sec \u00B10.65% (78 runs sampled)\n  *   regex constructor  x 3,931,108 ops/sec \u00B10.58% (84 runs sampled)\n  */\n  if (objPrototype === RegExp.prototype) {\n    return 'RegExp';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   date               x 2,130,074 ops/sec \u00B14.42% (68 runs sampled)\n  * Post:\n  *   date               x 3,953,779 ops/sec \u00B11.35% (77 runs sampled)\n  */\n  if (objPrototype === Date.prototype) {\n    return 'Date';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-promise.prototype-@@tostringtag)\n   * ES6$25.4.5.4 - Promise.prototype[@@toStringTag] should be \"Promise\":\n   * Test: `Object.prototype.toString.call(Promise.resolve())``\n   *  - Chrome <=47 === \"[object Object]\"\n   *  - Edge <=20 === \"[object Object]\"\n   *  - Firefox 29-Latest === \"[object Promise]\"\n   *  - Safari 7.1-Latest === \"[object Promise]\"\n   */\n  if (promiseExists && objPrototype === Promise.prototype) {\n    return 'Promise';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   set                x 2,222,186 ops/sec \u00B11.31% (82 runs sampled)\n  * Post:\n  *   set                x 4,545,879 ops/sec \u00B11.13% (83 runs sampled)\n  */\n  if (setExists && objPrototype === Set.prototype) {\n    return 'Set';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   map                x 2,396,842 ops/sec \u00B11.59% (81 runs sampled)\n  * Post:\n  *   map                x 4,183,945 ops/sec \u00B16.59% (82 runs sampled)\n  */\n  if (mapExists && objPrototype === Map.prototype) {\n    return 'Map';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   weakset            x 1,323,220 ops/sec \u00B12.17% (76 runs sampled)\n  * Post:\n  *   weakset            x 4,237,510 ops/sec \u00B12.01% (77 runs sampled)\n  */\n  if (weakSetExists && objPrototype === WeakSet.prototype) {\n    return 'WeakSet';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   weakmap            x 1,500,260 ops/sec \u00B12.02% (78 runs sampled)\n  * Post:\n  *   weakmap            x 3,881,384 ops/sec \u00B11.45% (82 runs sampled)\n  */\n  if (weakMapExists && objPrototype === WeakMap.prototype) {\n    return 'WeakMap';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-dataview.prototype-@@tostringtag)\n   * ES6$24.2.4.21 - DataView.prototype[@@toStringTag] should be \"DataView\":\n   * Test: `Object.prototype.toString.call(new DataView(new ArrayBuffer(1)))``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (dataViewExists && objPrototype === DataView.prototype) {\n    return 'DataView';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%mapiteratorprototype%-@@tostringtag)\n   * ES6$23.1.5.2.2 - %MapIteratorPrototype%[@@toStringTag] should be \"Map Iterator\":\n   * Test: `Object.prototype.toString.call(new Map().entries())``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (mapExists && objPrototype === mapIteratorPrototype) {\n    return 'Map Iterator';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%setiteratorprototype%-@@tostringtag)\n   * ES6$23.2.5.2.2 - %SetIteratorPrototype%[@@toStringTag] should be \"Set Iterator\":\n   * Test: `Object.prototype.toString.call(new Set().entries())``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (setExists && objPrototype === setIteratorPrototype) {\n    return 'Set Iterator';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%arrayiteratorprototype%-@@tostringtag)\n   * ES6$22.1.5.2.2 - %ArrayIteratorPrototype%[@@toStringTag] should be \"Array Iterator\":\n   * Test: `Object.prototype.toString.call([][Symbol.iterator]())``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (arrayIteratorExists && objPrototype === arrayIteratorPrototype) {\n    return 'Array Iterator';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%stringiteratorprototype%-@@tostringtag)\n   * ES6$21.1.5.2.2 - %StringIteratorPrototype%[@@toStringTag] should be \"String Iterator\":\n   * Test: `Object.prototype.toString.call(''[Symbol.iterator]())``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (stringIteratorExists && objPrototype === stringIteratorPrototype) {\n    return 'String Iterator';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   object from null   x 2,424,320 ops/sec \u00B11.67% (76 runs sampled)\n  * Post:\n  *   object from null   x 5,838,000 ops/sec \u00B10.99% (84 runs sampled)\n  */\n  if (objPrototype === null) {\n    return 'Object';\n  }\n\n  return Object\n    .prototype\n    .toString\n    .call(obj)\n    .slice(toStringLeftSliceLength, toStringRightSliceLength);\n}\n\nreturn typeDetect;\n\n})));\n", "/*!\n * Chai - expectTypes utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .expectTypes(obj, types)\n *\n * Ensures that the object being tested against is of a valid type.\n *\n *     utils.expectTypes(this, ['array', 'object', 'string']);\n *\n * @param {Mixed} obj constructed Assertion\n * @param {Array} type A list of allowed types for this assertion\n * @namespace Utils\n * @name expectTypes\n * @api public\n */\n\nvar AssertionError = require('assertion-error');\nvar flag = require('./flag');\nvar type = require('type-detect');\n\nmodule.exports = function expectTypes(obj, types) {\n  var flagMsg = flag(obj, 'message');\n  var ssfi = flag(obj, 'ssfi');\n\n  flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n  obj = flag(obj, 'object');\n  types = types.map(function (t) { return t.toLowerCase(); });\n  types.sort();\n\n  // Transforms ['lorem', 'ipsum'] into 'a lorem, or an ipsum'\n  var str = types.map(function (t, index) {\n    var art = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(t.charAt(0)) ? 'an' : 'a';\n    var or = types.length > 1 && index === types.length - 1 ? 'or ' : '';\n    return or + art + ' ' + t;\n  }).join(', ');\n\n  var objType = type(obj).toLowerCase();\n\n  if (!types.some(function (expected) { return objType === expected; })) {\n    throw new AssertionError(\n      flagMsg + 'object tested must be ' + str + ', but ' + objType + ' given',\n      undefined,\n      ssfi\n    );\n  }\n};\n", "/*!\n * Chai - getActual utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getActual(object, [actual])\n *\n * Returns the `actual` value for an Assertion.\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getActual\n */\n\nmodule.exports = function getActual(obj, args) {\n  return args.length > 4 ? args[4] : obj._obj;\n};\n", "'use strict';\n\n/* !\n * Chai - getFuncName utility\n * Copyright(c) 2012-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getFuncName(constructorFn)\n *\n * Returns the name of a function.\n * When a non-function instance is passed, returns `null`.\n * This also includes a polyfill function if `aFunc.name` is not defined.\n *\n * @name getFuncName\n * @param {Function} funct\n * @namespace Utils\n * @api public\n */\n\nvar toString = Function.prototype.toString;\nvar functionNameMatch = /\\s*function(?:\\s|\\s*\\/\\*[^(?:*\\/)]+\\*\\/\\s*)*([^\\s\\(\\/]+)/;\nfunction getFuncName(aFunc) {\n  if (typeof aFunc !== 'function') {\n    return null;\n  }\n\n  var name = '';\n  if (typeof Function.prototype.name === 'undefined' && typeof aFunc.name === 'undefined') {\n    // Here we run a polyfill if Function does not support the `name` property and if aFunc.name is not defined\n    var match = toString.call(aFunc).match(functionNameMatch);\n    if (match) {\n      name = match[1];\n    }\n  } else {\n    // If we've got a `name` property we just use it\n    name = aFunc.name;\n  }\n\n  return name;\n}\n\nmodule.exports = getFuncName;\n", "", "(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.loupe = {}));\n}(this, (function (exports) { 'use strict';\n\n  function _typeof(obj) {\n    \"@babel/helpers - typeof\";\n\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n      _typeof = function (obj) {\n        return typeof obj;\n      };\n    } else {\n      _typeof = function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n      };\n    }\n\n    return _typeof(obj);\n  }\n\n  function _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n  }\n\n  function _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n  }\n\n  function _iterableToArrayLimit(arr, i) {\n    if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  function _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n  }\n\n  function _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n  }\n\n  function _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var ansiColors = {\n    bold: ['1', '22'],\n    dim: ['2', '22'],\n    italic: ['3', '23'],\n    underline: ['4', '24'],\n    // 5 & 6 are blinking\n    inverse: ['7', '27'],\n    hidden: ['8', '28'],\n    strike: ['9', '29'],\n    // 10-20 are fonts\n    // 21-29 are resets for 1-9\n    black: ['30', '39'],\n    red: ['31', '39'],\n    green: ['32', '39'],\n    yellow: ['33', '39'],\n    blue: ['34', '39'],\n    magenta: ['35', '39'],\n    cyan: ['36', '39'],\n    white: ['37', '39'],\n    brightblack: ['30;1', '39'],\n    brightred: ['31;1', '39'],\n    brightgreen: ['32;1', '39'],\n    brightyellow: ['33;1', '39'],\n    brightblue: ['34;1', '39'],\n    brightmagenta: ['35;1', '39'],\n    brightcyan: ['36;1', '39'],\n    brightwhite: ['37;1', '39'],\n    grey: ['90', '39']\n  };\n  var styles = {\n    special: 'cyan',\n    number: 'yellow',\n    bigint: 'yellow',\n    boolean: 'yellow',\n    undefined: 'grey',\n    null: 'bold',\n    string: 'green',\n    symbol: 'green',\n    date: 'magenta',\n    regexp: 'red'\n  };\n  var truncator = '\u2026';\n\n  function colorise(value, styleType) {\n    var color = ansiColors[styles[styleType]] || ansiColors[styleType];\n\n    if (!color) {\n      return String(value);\n    }\n\n    return \"\\x1B[\".concat(color[0], \"m\").concat(String(value), \"\\x1B[\").concat(color[1], \"m\");\n  }\n\n  function normaliseOptions() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref$showHidden = _ref.showHidden,\n        showHidden = _ref$showHidden === void 0 ? false : _ref$showHidden,\n        _ref$depth = _ref.depth,\n        depth = _ref$depth === void 0 ? 2 : _ref$depth,\n        _ref$colors = _ref.colors,\n        colors = _ref$colors === void 0 ? false : _ref$colors,\n        _ref$customInspect = _ref.customInspect,\n        customInspect = _ref$customInspect === void 0 ? true : _ref$customInspect,\n        _ref$showProxy = _ref.showProxy,\n        showProxy = _ref$showProxy === void 0 ? false : _ref$showProxy,\n        _ref$maxArrayLength = _ref.maxArrayLength,\n        maxArrayLength = _ref$maxArrayLength === void 0 ? Infinity : _ref$maxArrayLength,\n        _ref$breakLength = _ref.breakLength,\n        breakLength = _ref$breakLength === void 0 ? Infinity : _ref$breakLength,\n        _ref$seen = _ref.seen,\n        seen = _ref$seen === void 0 ? [] : _ref$seen,\n        _ref$truncate = _ref.truncate,\n        truncate = _ref$truncate === void 0 ? Infinity : _ref$truncate,\n        _ref$stylize = _ref.stylize,\n        stylize = _ref$stylize === void 0 ? String : _ref$stylize;\n\n    var options = {\n      showHidden: Boolean(showHidden),\n      depth: Number(depth),\n      colors: Boolean(colors),\n      customInspect: Boolean(customInspect),\n      showProxy: Boolean(showProxy),\n      maxArrayLength: Number(maxArrayLength),\n      breakLength: Number(breakLength),\n      truncate: Number(truncate),\n      seen: seen,\n      stylize: stylize\n    };\n\n    if (options.colors) {\n      options.stylize = colorise;\n    }\n\n    return options;\n  }\n  function truncate(string, length) {\n    var tail = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : truncator;\n    string = String(string);\n    var tailLength = tail.length;\n    var stringLength = string.length;\n\n    if (tailLength > length && stringLength > tailLength) {\n      return tail;\n    }\n\n    if (stringLength > length && stringLength > tailLength) {\n      return \"\".concat(string.slice(0, length - tailLength)).concat(tail);\n    }\n\n    return string;\n  } // eslint-disable-next-line complexity\n\n  function inspectList(list, options, inspectItem) {\n    var separator = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ', ';\n    inspectItem = inspectItem || options.inspect;\n    var size = list.length;\n    if (size === 0) return '';\n    var originalLength = options.truncate;\n    var output = '';\n    var peek = '';\n    var truncated = '';\n\n    for (var i = 0; i < size; i += 1) {\n      var last = i + 1 === list.length;\n      var secondToLast = i + 2 === list.length;\n      truncated = \"\".concat(truncator, \"(\").concat(list.length - i, \")\");\n      var value = list[i]; // If there is more than one remaining we need to account for a separator of `, `\n\n      options.truncate = originalLength - output.length - (last ? 0 : separator.length);\n      var string = peek || inspectItem(value, options) + (last ? '' : separator);\n      var nextLength = output.length + string.length;\n      var truncatedLength = nextLength + truncated.length; // If this is the last element, and adding it would\n      // take us over length, but adding the truncator wouldn't - then break now\n\n      if (last && nextLength > originalLength && output.length + truncated.length <= originalLength) {\n        break;\n      } // If this isn't the last or second to last element to scan,\n      // but the string is already over length then break here\n\n\n      if (!last && !secondToLast && truncatedLength > originalLength) {\n        break;\n      } // Peek at the next string to determine if we should\n      // break early before adding this item to the output\n\n\n      peek = last ? '' : inspectItem(list[i + 1], options) + (secondToLast ? '' : separator); // If we have one element left, but this element and\n      // the next takes over length, the break early\n\n      if (!last && secondToLast && truncatedLength > originalLength && nextLength + peek.length > originalLength) {\n        break;\n      }\n\n      output += string; // If the next element takes us to length -\n      // but there are more after that, then we should truncate now\n\n      if (!last && !secondToLast && nextLength + peek.length >= originalLength) {\n        truncated = \"\".concat(truncator, \"(\").concat(list.length - i - 1, \")\");\n        break;\n      }\n\n      truncated = '';\n    }\n\n    return \"\".concat(output).concat(truncated);\n  }\n\n  function quoteComplexKey(key) {\n    if (key.match(/^[a-zA-Z_][a-zA-Z_0-9]*$/)) {\n      return key;\n    }\n\n    return JSON.stringify(key).replace(/'/g, \"\\\\'\").replace(/\\\\\"/g, '\"').replace(/(^\"|\"$)/g, \"'\");\n  }\n\n  function inspectProperty(_ref2, options) {\n    var _ref3 = _slicedToArray(_ref2, 2),\n        key = _ref3[0],\n        value = _ref3[1];\n\n    options.truncate -= 2;\n\n    if (typeof key === 'string') {\n      key = quoteComplexKey(key);\n    } else if (typeof key !== 'number') {\n      key = \"[\".concat(options.inspect(key, options), \"]\");\n    }\n\n    options.truncate -= key.length;\n    value = options.inspect(value, options);\n    return \"\".concat(key, \": \").concat(value);\n  }\n\n  function inspectArray(array, options) {\n    // Object.keys will always output the Array indices first, so we can slice by\n    // `array.length` to get non-index properties\n    var nonIndexProperties = Object.keys(array).slice(array.length);\n    if (!array.length && !nonIndexProperties.length) return '[]';\n    options.truncate -= 4;\n    var listContents = inspectList(array, options);\n    options.truncate -= listContents.length;\n    var propertyContents = '';\n\n    if (nonIndexProperties.length) {\n      propertyContents = inspectList(nonIndexProperties.map(function (key) {\n        return [key, array[key]];\n      }), options, inspectProperty);\n    }\n\n    return \"[ \".concat(listContents).concat(propertyContents ? \", \".concat(propertyContents) : '', \" ]\");\n  }\n\n  /* !\n   * Chai - getFuncName utility\n   * Copyright(c) 2012-2016 Jake Luer <jake@alogicalparadox.com>\n   * MIT Licensed\n   */\n\n  /**\n   * ### .getFuncName(constructorFn)\n   *\n   * Returns the name of a function.\n   * When a non-function instance is passed, returns `null`.\n   * This also includes a polyfill function if `aFunc.name` is not defined.\n   *\n   * @name getFuncName\n   * @param {Function} funct\n   * @namespace Utils\n   * @api public\n   */\n\n  var toString = Function.prototype.toString;\n  var functionNameMatch = /\\s*function(?:\\s|\\s*\\/\\*[^(?:*\\/)]+\\*\\/\\s*)*([^\\s\\(\\/]+)/;\n  function getFuncName(aFunc) {\n    if (typeof aFunc !== 'function') {\n      return null;\n    }\n\n    var name = '';\n    if (typeof Function.prototype.name === 'undefined' && typeof aFunc.name === 'undefined') {\n      // Here we run a polyfill if Function does not support the `name` property and if aFunc.name is not defined\n      var match = toString.call(aFunc).match(functionNameMatch);\n      if (match) {\n        name = match[1];\n      }\n    } else {\n      // If we've got a `name` property we just use it\n      name = aFunc.name;\n    }\n\n    return name;\n  }\n\n  var getFuncName_1 = getFuncName;\n\n  var getArrayName = function getArrayName(array) {\n    // We need to special case Node.js' Buffers, which report to be Uint8Array\n    if (typeof Buffer === 'function' && array instanceof Buffer) {\n      return 'Buffer';\n    }\n\n    if (array[Symbol.toStringTag]) {\n      return array[Symbol.toStringTag];\n    }\n\n    return getFuncName_1(array.constructor);\n  };\n\n  function inspectTypedArray(array, options) {\n    var name = getArrayName(array);\n    options.truncate -= name.length + 4; // Object.keys will always output the Array indices first, so we can slice by\n    // `array.length` to get non-index properties\n\n    var nonIndexProperties = Object.keys(array).slice(array.length);\n    if (!array.length && !nonIndexProperties.length) return \"\".concat(name, \"[]\"); // As we know TypedArrays only contain Unsigned Integers, we can skip inspecting each one and simply\n    // stylise the toString() value of them\n\n    var output = '';\n\n    for (var i = 0; i < array.length; i++) {\n      var string = \"\".concat(options.stylize(truncate(array[i], options.truncate), 'number')).concat(i === array.length - 1 ? '' : ', ');\n      options.truncate -= string.length;\n\n      if (array[i] !== array.length && options.truncate <= 3) {\n        output += \"\".concat(truncator, \"(\").concat(array.length - array[i] + 1, \")\");\n        break;\n      }\n\n      output += string;\n    }\n\n    var propertyContents = '';\n\n    if (nonIndexProperties.length) {\n      propertyContents = inspectList(nonIndexProperties.map(function (key) {\n        return [key, array[key]];\n      }), options, inspectProperty);\n    }\n\n    return \"\".concat(name, \"[ \").concat(output).concat(propertyContents ? \", \".concat(propertyContents) : '', \" ]\");\n  }\n\n  function inspectDate(dateObject, options) {\n    // If we need to - truncate the time portion, but never the date\n    var split = dateObject.toJSON().split('T');\n    var date = split[0];\n    return options.stylize(\"\".concat(date, \"T\").concat(truncate(split[1], options.truncate - date.length - 1)), 'date');\n  }\n\n  function inspectFunction(func, options) {\n    var name = getFuncName_1(func);\n\n    if (!name) {\n      return options.stylize('[Function]', 'special');\n    }\n\n    return options.stylize(\"[Function \".concat(truncate(name, options.truncate - 11), \"]\"), 'special');\n  }\n\n  function inspectMapEntry(_ref, options) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        key = _ref2[0],\n        value = _ref2[1];\n\n    options.truncate -= 4;\n    key = options.inspect(key, options);\n    options.truncate -= key.length;\n    value = options.inspect(value, options);\n    return \"\".concat(key, \" => \").concat(value);\n  } // IE11 doesn't support `map.entries()`\n\n\n  function mapToEntries(map) {\n    var entries = [];\n    map.forEach(function (value, key) {\n      entries.push([key, value]);\n    });\n    return entries;\n  }\n\n  function inspectMap(map, options) {\n    var size = map.size - 1;\n\n    if (size <= 0) {\n      return 'Map{}';\n    }\n\n    options.truncate -= 7;\n    return \"Map{ \".concat(inspectList(mapToEntries(map), options, inspectMapEntry), \" }\");\n  }\n\n  var isNaN = Number.isNaN || function (i) {\n    return i !== i;\n  }; // eslint-disable-line no-self-compare\n\n\n  function inspectNumber(number, options) {\n    if (isNaN(number)) {\n      return options.stylize('NaN', 'number');\n    }\n\n    if (number === Infinity) {\n      return options.stylize('Infinity', 'number');\n    }\n\n    if (number === -Infinity) {\n      return options.stylize('-Infinity', 'number');\n    }\n\n    if (number === 0) {\n      return options.stylize(1 / number === Infinity ? '+0' : '-0', 'number');\n    }\n\n    return options.stylize(truncate(number, options.truncate), 'number');\n  }\n\n  function inspectBigInt(number, options) {\n    var nums = truncate(number.toString(), options.truncate - 1);\n    if (nums !== truncator) nums += 'n';\n    return options.stylize(nums, 'bigint');\n  }\n\n  function inspectRegExp(value, options) {\n    var flags = value.toString().split('/')[2];\n    var sourceLength = options.truncate - (2 + flags.length);\n    var source = value.source;\n    return options.stylize(\"/\".concat(truncate(source, sourceLength), \"/\").concat(flags), 'regexp');\n  }\n\n  function arrayFromSet(set) {\n    var values = [];\n    set.forEach(function (value) {\n      values.push(value);\n    });\n    return values;\n  }\n\n  function inspectSet(set, options) {\n    if (set.size === 0) return 'Set{}';\n    options.truncate -= 7;\n    return \"Set{ \".concat(inspectList(arrayFromSet(set), options), \" }\");\n  }\n\n  var stringEscapeChars = new RegExp(\"['\\\\u0000-\\\\u001f\\\\u007f-\\\\u009f\\\\u00ad\\\\u0600-\\\\u0604\\\\u070f\\\\u17b4\\\\u17b5\" + \"\\\\u200c-\\\\u200f\\\\u2028-\\\\u202f\\\\u2060-\\\\u206f\\\\ufeff\\\\ufff0-\\\\uffff]\", 'g');\n  var escapeCharacters = {\n    '\\b': '\\\\b',\n    '\\t': '\\\\t',\n    '\\n': '\\\\n',\n    '\\f': '\\\\f',\n    '\\r': '\\\\r',\n    \"'\": \"\\\\'\",\n    '\\\\': '\\\\\\\\'\n  };\n  var hex = 16;\n  var unicodeLength = 4;\n\n  function escape(char) {\n    return escapeCharacters[char] || \"\\\\u\".concat(\"0000\".concat(char.charCodeAt(0).toString(hex)).slice(-unicodeLength));\n  }\n\n  function inspectString(string, options) {\n    if (stringEscapeChars.test(string)) {\n      string = string.replace(stringEscapeChars, escape);\n    }\n\n    return options.stylize(\"'\".concat(truncate(string, options.truncate - 2), \"'\"), 'string');\n  }\n\n  function inspectSymbol(value) {\n    if ('description' in Symbol.prototype) {\n      return value.description ? \"Symbol(\".concat(value.description, \")\") : 'Symbol()';\n    }\n\n    return value.toString();\n  }\n\n  var getPromiseValue = function getPromiseValue() {\n    return 'Promise{\u2026}';\n  };\n\n  try {\n    var _process$binding = process.binding('util'),\n        getPromiseDetails = _process$binding.getPromiseDetails,\n        kPending = _process$binding.kPending,\n        kRejected = _process$binding.kRejected;\n\n    if (Array.isArray(getPromiseDetails(Promise.resolve()))) {\n      getPromiseValue = function getPromiseValue(value, options) {\n        var _getPromiseDetails = getPromiseDetails(value),\n            _getPromiseDetails2 = _slicedToArray(_getPromiseDetails, 2),\n            state = _getPromiseDetails2[0],\n            innerValue = _getPromiseDetails2[1];\n\n        if (state === kPending) {\n          return 'Promise{<pending>}';\n        }\n\n        return \"Promise\".concat(state === kRejected ? '!' : '', \"{\").concat(options.inspect(innerValue, options), \"}\");\n      };\n    }\n  } catch (notNode) {\n    /* ignore */\n  }\n\n  var inspectPromise = getPromiseValue;\n\n  function inspectObject(object, options) {\n    var properties = Object.getOwnPropertyNames(object);\n    var symbols = Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(object) : [];\n\n    if (properties.length === 0 && symbols.length === 0) {\n      return '{}';\n    }\n\n    options.truncate -= 4;\n    options.seen = options.seen || [];\n\n    if (options.seen.indexOf(object) >= 0) {\n      return '[Circular]';\n    }\n\n    options.seen.push(object);\n    var propertyContents = inspectList(properties.map(function (key) {\n      return [key, object[key]];\n    }), options, inspectProperty);\n    var symbolContents = inspectList(symbols.map(function (key) {\n      return [key, object[key]];\n    }), options, inspectProperty);\n    options.seen.pop();\n    var sep = '';\n\n    if (propertyContents && symbolContents) {\n      sep = ', ';\n    }\n\n    return \"{ \".concat(propertyContents).concat(sep).concat(symbolContents, \" }\");\n  }\n\n  var toStringTag = typeof Symbol !== 'undefined' && Symbol.toStringTag ? Symbol.toStringTag : false;\n  function inspectClass(value, options) {\n    var name = '';\n\n    if (toStringTag && toStringTag in value) {\n      name = value[toStringTag];\n    }\n\n    name = name || getFuncName_1(value.constructor); // Babel transforms anonymous classes to the name `_class`\n\n    if (!name || name === '_class') {\n      name = '<Anonymous Class>';\n    }\n\n    options.truncate -= name.length;\n    return \"\".concat(name).concat(inspectObject(value, options));\n  }\n\n  function inspectArguments(args, options) {\n    if (args.length === 0) return 'Arguments[]';\n    options.truncate -= 13;\n    return \"Arguments[ \".concat(inspectList(args, options), \" ]\");\n  }\n\n  var errorKeys = ['stack', 'line', 'column', 'name', 'message', 'fileName', 'lineNumber', 'columnNumber', 'number', 'description'];\n  function inspectObject$1(error, options) {\n    var properties = Object.getOwnPropertyNames(error).filter(function (key) {\n      return errorKeys.indexOf(key) === -1;\n    });\n    var name = error.name;\n    options.truncate -= name.length;\n    var message = '';\n\n    if (typeof error.message === 'string') {\n      message = truncate(error.message, options.truncate);\n    } else {\n      properties.unshift('message');\n    }\n\n    message = message ? \": \".concat(message) : '';\n    options.truncate -= message.length + 5;\n    var propertyContents = inspectList(properties.map(function (key) {\n      return [key, error[key]];\n    }), options, inspectProperty);\n    return \"\".concat(name).concat(message).concat(propertyContents ? \" { \".concat(propertyContents, \" }\") : '');\n  }\n\n  function inspectAttribute(_ref, options) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        key = _ref2[0],\n        value = _ref2[1];\n\n    options.truncate -= 3;\n\n    if (!value) {\n      return \"\".concat(options.stylize(key, 'yellow'));\n    }\n\n    return \"\".concat(options.stylize(key, 'yellow'), \"=\").concat(options.stylize(\"\\\"\".concat(value, \"\\\"\"), 'string'));\n  }\n  function inspectHTMLCollection(collection, options) {\n    // eslint-disable-next-line no-use-before-define\n    return inspectList(collection, options, inspectHTML, '\\n');\n  }\n  function inspectHTML(element, options) {\n    var properties = element.getAttributeNames();\n    var name = element.tagName.toLowerCase();\n    var head = options.stylize(\"<\".concat(name), 'special');\n    var headClose = options.stylize(\">\", 'special');\n    var tail = options.stylize(\"</\".concat(name, \">\"), 'special');\n    options.truncate -= name.length * 2 + 5;\n    var propertyContents = '';\n\n    if (properties.length > 0) {\n      propertyContents += ' ';\n      propertyContents += inspectList(properties.map(function (key) {\n        return [key, element.getAttribute(key)];\n      }), options, inspectAttribute, ' ');\n    }\n\n    options.truncate -= propertyContents.length;\n    var truncate = options.truncate;\n    var children = inspectHTMLCollection(element.children, options);\n\n    if (children && children.length > truncate) {\n      children = \"\".concat(truncator, \"(\").concat(element.children.length, \")\");\n    }\n\n    return \"\".concat(head).concat(propertyContents).concat(headClose).concat(children).concat(tail);\n  }\n\n  var symbolsSupported = typeof Symbol === 'function' && typeof Symbol.for === 'function';\n  var chaiInspect = symbolsSupported ? Symbol.for('chai/inspect') : '@@chai/inspect';\n  var nodeInspect = false;\n\n  try {\n    // eslint-disable-next-line global-require\n    var nodeUtil = require('util');\n\n    nodeInspect = nodeUtil.inspect ? nodeUtil.inspect.custom : false;\n  } catch (noNodeInspect) {\n    nodeInspect = false;\n  }\n\n  var constructorMap = new WeakMap();\n  var stringTagMap = {};\n  var baseTypesMap = {\n    undefined: function undefined$1(value, options) {\n      return options.stylize('undefined', 'undefined');\n    },\n    null: function _null(value, options) {\n      return options.stylize(null, 'null');\n    },\n    boolean: function boolean(value, options) {\n      return options.stylize(value, 'boolean');\n    },\n    Boolean: function Boolean(value, options) {\n      return options.stylize(value, 'boolean');\n    },\n    number: inspectNumber,\n    Number: inspectNumber,\n    bigint: inspectBigInt,\n    BigInt: inspectBigInt,\n    string: inspectString,\n    String: inspectString,\n    function: inspectFunction,\n    Function: inspectFunction,\n    symbol: inspectSymbol,\n    // A Symbol polyfill will return `Symbol` not `symbol` from typedetect\n    Symbol: inspectSymbol,\n    Array: inspectArray,\n    Date: inspectDate,\n    Map: inspectMap,\n    Set: inspectSet,\n    RegExp: inspectRegExp,\n    Promise: inspectPromise,\n    // WeakSet, WeakMap are totally opaque to us\n    WeakSet: function WeakSet(value, options) {\n      return options.stylize('WeakSet{\u2026}', 'special');\n    },\n    WeakMap: function WeakMap(value, options) {\n      return options.stylize('WeakMap{\u2026}', 'special');\n    },\n    Arguments: inspectArguments,\n    Int8Array: inspectTypedArray,\n    Uint8Array: inspectTypedArray,\n    Uint8ClampedArray: inspectTypedArray,\n    Int16Array: inspectTypedArray,\n    Uint16Array: inspectTypedArray,\n    Int32Array: inspectTypedArray,\n    Uint32Array: inspectTypedArray,\n    Float32Array: inspectTypedArray,\n    Float64Array: inspectTypedArray,\n    Generator: function Generator() {\n      return '';\n    },\n    DataView: function DataView() {\n      return '';\n    },\n    ArrayBuffer: function ArrayBuffer() {\n      return '';\n    },\n    Error: inspectObject$1,\n    HTMLCollection: inspectHTMLCollection,\n    NodeList: inspectHTMLCollection\n  }; // eslint-disable-next-line complexity\n\n  var inspectCustom = function inspectCustom(value, options, type) {\n    if (chaiInspect in value && typeof value[chaiInspect] === 'function') {\n      return value[chaiInspect](options);\n    }\n\n    if (nodeInspect && nodeInspect in value && typeof value[nodeInspect] === 'function') {\n      return value[nodeInspect](options.depth, options);\n    }\n\n    if ('inspect' in value && typeof value.inspect === 'function') {\n      return value.inspect(options.depth, options);\n    }\n\n    if ('constructor' in value && constructorMap.has(value.constructor)) {\n      return constructorMap.get(value.constructor)(value, options);\n    }\n\n    if (stringTagMap[type]) {\n      return stringTagMap[type](value, options);\n    }\n\n    return '';\n  };\n\n  var toString$1 = Object.prototype.toString; // eslint-disable-next-line complexity\n\n  function inspect(value, options) {\n    options = normaliseOptions(options);\n    options.inspect = inspect;\n    var _options = options,\n        customInspect = _options.customInspect;\n    var type = value === null ? 'null' : _typeof(value);\n\n    if (type === 'object') {\n      type = toString$1.call(value).slice(8, -1);\n    } // If it is a base value that we already support, then use Loupe's inspector\n\n\n    if (baseTypesMap[type]) {\n      return baseTypesMap[type](value, options);\n    } // If `options.customInspect` is set to true then try to use the custom inspector\n\n\n    if (customInspect && value) {\n      var output = inspectCustom(value, options, type);\n\n      if (output) {\n        if (typeof output === 'string') return output;\n        return inspect(output, options);\n      }\n    }\n\n    var proto = value ? Object.getPrototypeOf(value) : false; // If it's a plain Object then use Loupe's inspector\n\n    if (proto === Object.prototype || proto === null) {\n      return inspectObject(value, options);\n    } // Specifically account for HTMLElements\n    // eslint-disable-next-line no-undef\n\n\n    if (value && typeof HTMLElement === 'function' && value instanceof HTMLElement) {\n      return inspectHTML(value, options);\n    }\n\n    if ('constructor' in value) {\n      // If it is a class, inspect it like an object but add the constructor name\n      if (value.constructor !== Object) {\n        return inspectClass(value, options);\n      } // If it is an object with an anonymous prototype, display it as an object.\n\n\n      return inspectObject(value, options);\n    } // last chance to check if it's an object\n\n\n    if (value === Object(value)) {\n      return inspectObject(value, options);\n    } // We have run out of options! Just stringify the value\n\n\n    return options.stylize(String(value), type);\n  }\n  function registerConstructor(constructor, inspector) {\n    if (constructorMap.has(constructor)) {\n      return false;\n    }\n\n    constructorMap.add(constructor, inspector);\n    return true;\n  }\n  function registerStringTag(stringTag, inspector) {\n    if (stringTag in stringTagMap) {\n      return false;\n    }\n\n    stringTagMap[stringTag] = inspector;\n    return true;\n  }\n  var custom = chaiInspect;\n\n  exports.custom = custom;\n  exports.default = inspect;\n  exports.inspect = inspect;\n  exports.registerConstructor = registerConstructor;\n  exports.registerStringTag = registerStringTag;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n", "module.exports = {\n\n  /**\n   * ### config.includeStack\n   *\n   * User configurable property, influences whether stack trace\n   * is included in Assertion error message. Default of false\n   * suppresses stack trace in the error message.\n   *\n   *     chai.config.includeStack = true;  // enable stack on error\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n  includeStack: false,\n\n  /**\n   * ### config.showDiff\n   *\n   * User configurable property, influences whether or not\n   * the `showDiff` flag should be included in the thrown\n   * AssertionErrors. `false` will always be `false`; `true`\n   * will be true when the assertion has requested a diff\n   * be shown.\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n  showDiff: true,\n\n  /**\n   * ### config.truncateThreshold\n   *\n   * User configurable property, sets length threshold for actual and\n   * expected values in assertion errors. If this threshold is exceeded, for\n   * example for large data structures, the value is replaced with something\n   * like `[ Array(3) ]` or `{ Object (prop1, prop2) }`.\n   *\n   * Set it to zero if you want to disable truncating altogether.\n   *\n   * This is especially userful when doing assertions on arrays: having this\n   * set to a reasonable large value makes the failure messages readily\n   * inspectable.\n   *\n   *     chai.config.truncateThreshold = 0;  // disable truncating\n   *\n   * @param {Number}\n   * @api public\n   */\n\n  truncateThreshold: 40,\n\n  /**\n   * ### config.useProxy\n   *\n   * User configurable property, defines if chai will use a Proxy to throw\n   * an error when a non-existent property is read, which protects users\n   * from typos when using property-based assertions.\n   *\n   * Set it to false if you want to disable this feature.\n   *\n   *     chai.config.useProxy = false;  // disable use of Proxy\n   *\n   * This feature is automatically disabled regardless of this config value\n   * in environments that don't support proxies.\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n  useProxy: true,\n\n  /**\n   * ### config.proxyExcludedKeys\n   *\n   * User configurable property, defines which properties should be ignored\n   * instead of throwing an error if they do not exist on the assertion.\n   * This is only applied if the environment Chai is running in supports proxies and\n   * if the `useProxy` configuration setting is enabled.\n   * By default, `then` and `inspect` will not throw an error if they do not exist on the\n   * assertion object because the `.inspect` property is read by `util.inspect` (for example, when\n   * using `console.log` on the assertion object) and `.then` is necessary for promise type-checking.\n   *\n   *     // By default these keys will not throw an error if they do not exist on the assertion object\n   *     chai.config.proxyExcludedKeys = ['then', 'inspect'];\n   *\n   * @param {Array}\n   * @api public\n   */\n\n  proxyExcludedKeys: ['then', 'catch', 'inspect', 'toJSON']\n};\n", "// This is (almost) directly from Node.js utils\n// https://github.com/joyent/node/blob/f8c335d0caf47f16d31413f89aa28eda3878e3aa/lib/util.js\n\nvar getName = require('get-func-name');\nvar loupe = require('loupe');\nvar config = require('../config');\n\nmodule.exports = inspect;\n\n/**\n * ### .inspect(obj, [showHidden], [depth], [colors])\n *\n * Echoes the value of a value. Tries to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Boolean} showHidden Flag that shows hidden (not enumerable)\n *    properties of objects. Default is false.\n * @param {Number} depth Depth in which to descend in object. Default is 2.\n * @param {Boolean} colors Flag to turn on ANSI escape codes to color the\n *    output. Default is false (no coloring).\n * @namespace Utils\n * @name inspect\n */\nfunction inspect(obj, showHidden, depth, colors) {\n  var options = {\n    colors: colors,\n    depth: (typeof depth === 'undefined' ? 2 : depth),\n    showHidden: showHidden,\n    truncate: config.truncateThreshold ? config.truncateThreshold : Infinity,\n  };\n  return loupe.inspect(obj, options);\n}\n", "/*!\n * Chai - flag utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar inspect = require('./inspect');\nvar config = require('../config');\n\n/**\n * ### .objDisplay(object)\n *\n * Determines if an object or an array matches\n * criteria to be inspected in-line for error\n * messages or should be truncated.\n *\n * @param {Mixed} javascript object to inspect\n * @name objDisplay\n * @namespace Utils\n * @api public\n */\n\nmodule.exports = function objDisplay(obj) {\n  var str = inspect(obj)\n    , type = Object.prototype.toString.call(obj);\n\n  if (config.truncateThreshold && str.length >= config.truncateThreshold) {\n    if (type === '[object Function]') {\n      return !obj.name || obj.name === ''\n        ? '[Function]'\n        : '[Function: ' + obj.name + ']';\n    } else if (type === '[object Array]') {\n      return '[ Array(' + obj.length + ') ]';\n    } else if (type === '[object Object]') {\n      var keys = Object.keys(obj)\n        , kstr = keys.length > 2\n          ? keys.splice(0, 2).join(', ') + ', ...'\n          : keys.join(', ');\n      return '{ Object (' + kstr + ') }';\n    } else {\n      return str;\n    }\n  } else {\n    return str;\n  }\n};\n", "/*!\n * Chai - message composition utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar flag = require('./flag')\n  , getActual = require('./getActual')\n  , objDisplay = require('./objDisplay');\n\n/**\n * ### .getMessage(object, message, negateMessage)\n *\n * Construct the error message based on flags\n * and template tags. Template tags will return\n * a stringified inspection of the object referenced.\n *\n * Message template tags:\n * - `#{this}` current asserted object\n * - `#{act}` actual value\n * - `#{exp}` expected value\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getMessage\n * @api public\n */\n\nmodule.exports = function getMessage(obj, args) {\n  var negate = flag(obj, 'negate')\n    , val = flag(obj, 'object')\n    , expected = args[3]\n    , actual = getActual(obj, args)\n    , msg = negate ? args[2] : args[1]\n    , flagMsg = flag(obj, 'message');\n\n  if(typeof msg === \"function\") msg = msg();\n  msg = msg || '';\n  msg = msg\n    .replace(/#\\{this\\}/g, function () { return objDisplay(val); })\n    .replace(/#\\{act\\}/g, function () { return objDisplay(actual); })\n    .replace(/#\\{exp\\}/g, function () { return objDisplay(expected); });\n\n  return flagMsg ? flagMsg + ': ' + msg : msg;\n};\n", "/*!\n * Chai - transferFlags utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .transferFlags(assertion, object, includeAll = true)\n *\n * Transfer all the flags for `assertion` to `object`. If\n * `includeAll` is set to `false`, then the base Chai\n * assertion flags (namely `object`, `ssfi`, `lockSsfi`,\n * and `message`) will not be transferred.\n *\n *\n *     var newAssertion = new Assertion();\n *     utils.transferFlags(assertion, newAssertion);\n *\n *     var anotherAssertion = new Assertion(myObj);\n *     utils.transferFlags(assertion, anotherAssertion, false);\n *\n * @param {Assertion} assertion the assertion to transfer the flags from\n * @param {Object} object the object to transfer the flags to; usually a new assertion\n * @param {Boolean} includeAll\n * @namespace Utils\n * @name transferFlags\n * @api private\n */\n\nmodule.exports = function transferFlags(assertion, object, includeAll) {\n  var flags = assertion.__flags || (assertion.__flags = Object.create(null));\n\n  if (!object.__flags) {\n    object.__flags = Object.create(null);\n  }\n\n  includeAll = arguments.length === 3 ? includeAll : true;\n\n  for (var flag in flags) {\n    if (includeAll ||\n        (flag !== 'object' && flag !== 'ssfi' && flag !== 'lockSsfi' && flag != 'message')) {\n      object.__flags[flag] = flags[flag];\n    }\n  }\n};\n", "'use strict';\n/* globals Symbol: false, Uint8Array: false, WeakMap: false */\n/*!\n * deep-eql\n * Copyright(c) 2013 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar type = require('type-detect');\nfunction FakeMap() {\n  this._key = 'chai/deep-eql__' + Math.random() + Date.now();\n}\n\nFakeMap.prototype = {\n  get: function getMap(key) {\n    return key[this._key];\n  },\n  set: function setMap(key, value) {\n    if (Object.isExtensible(key)) {\n      Object.defineProperty(key, this._key, {\n        value: value,\n        configurable: true,\n      });\n    }\n  },\n};\n\nvar MemoizeMap = typeof WeakMap === 'function' ? WeakMap : FakeMap;\n/*!\n * Check to see if the MemoizeMap has recorded a result of the two operands\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {MemoizeMap} memoizeMap\n * @returns {Boolean|null} result\n*/\nfunction memoizeCompare(leftHandOperand, rightHandOperand, memoizeMap) {\n  // Technically, WeakMap keys can *only* be objects, not primitives.\n  if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {\n    return null;\n  }\n  var leftHandMap = memoizeMap.get(leftHandOperand);\n  if (leftHandMap) {\n    var result = leftHandMap.get(rightHandOperand);\n    if (typeof result === 'boolean') {\n      return result;\n    }\n  }\n  return null;\n}\n\n/*!\n * Set the result of the equality into the MemoizeMap\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {MemoizeMap} memoizeMap\n * @param {Boolean} result\n*/\nfunction memoizeSet(leftHandOperand, rightHandOperand, memoizeMap, result) {\n  // Technically, WeakMap keys can *only* be objects, not primitives.\n  if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {\n    return;\n  }\n  var leftHandMap = memoizeMap.get(leftHandOperand);\n  if (leftHandMap) {\n    leftHandMap.set(rightHandOperand, result);\n  } else {\n    leftHandMap = new MemoizeMap();\n    leftHandMap.set(rightHandOperand, result);\n    memoizeMap.set(leftHandOperand, leftHandMap);\n  }\n}\n\n/*!\n * Primary Export\n */\n\nmodule.exports = deepEqual;\nmodule.exports.MemoizeMap = MemoizeMap;\n\n/**\n * Assert deeply nested sameValue equality between two objects of any type.\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Object} [options] (optional) Additional options\n * @param {Array} [options.comparator] (optional) Override default algorithm, determining custom equality.\n * @param {Array} [options.memoize] (optional) Provide a custom memoization object which will cache the results of\n    complex objects for a speed boost. By passing `false` you can disable memoization, but this will cause circular\n    references to blow the stack.\n * @return {Boolean} equal match\n */\nfunction deepEqual(leftHandOperand, rightHandOperand, options) {\n  // If we have a comparator, we can't assume anything; so bail to its check first.\n  if (options && options.comparator) {\n    return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);\n  }\n\n  var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);\n  if (simpleResult !== null) {\n    return simpleResult;\n  }\n\n  // Deeper comparisons are pushed through to a larger function\n  return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);\n}\n\n/**\n * Many comparisons can be canceled out early via simple equality or primitive checks.\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @return {Boolean|null} equal match\n */\nfunction simpleEqual(leftHandOperand, rightHandOperand) {\n  // Equal references (except for Numbers) can be returned early\n  if (leftHandOperand === rightHandOperand) {\n    // Handle +-0 cases\n    return leftHandOperand !== 0 || 1 / leftHandOperand === 1 / rightHandOperand;\n  }\n\n  // handle NaN cases\n  if (\n    leftHandOperand !== leftHandOperand && // eslint-disable-line no-self-compare\n    rightHandOperand !== rightHandOperand // eslint-disable-line no-self-compare\n  ) {\n    return true;\n  }\n\n  // Anything that is not an 'object', i.e. symbols, functions, booleans, numbers,\n  // strings, and undefined, can be compared by reference.\n  if (isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {\n    // Easy out b/c it would have passed the first equality check\n    return false;\n  }\n  return null;\n}\n\n/*!\n * The main logic of the `deepEqual` function.\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Object} [options] (optional) Additional options\n * @param {Array} [options.comparator] (optional) Override default algorithm, determining custom equality.\n * @param {Array} [options.memoize] (optional) Provide a custom memoization object which will cache the results of\n    complex objects for a speed boost. By passing `false` you can disable memoization, but this will cause circular\n    references to blow the stack.\n * @return {Boolean} equal match\n*/\nfunction extensiveDeepEqual(leftHandOperand, rightHandOperand, options) {\n  options = options || {};\n  options.memoize = options.memoize === false ? false : options.memoize || new MemoizeMap();\n  var comparator = options && options.comparator;\n\n  // Check if a memoized result exists.\n  var memoizeResultLeft = memoizeCompare(leftHandOperand, rightHandOperand, options.memoize);\n  if (memoizeResultLeft !== null) {\n    return memoizeResultLeft;\n  }\n  var memoizeResultRight = memoizeCompare(rightHandOperand, leftHandOperand, options.memoize);\n  if (memoizeResultRight !== null) {\n    return memoizeResultRight;\n  }\n\n  // If a comparator is present, use it.\n  if (comparator) {\n    var comparatorResult = comparator(leftHandOperand, rightHandOperand);\n    // Comparators may return null, in which case we want to go back to default behavior.\n    if (comparatorResult === false || comparatorResult === true) {\n      memoizeSet(leftHandOperand, rightHandOperand, options.memoize, comparatorResult);\n      return comparatorResult;\n    }\n    // To allow comparators to override *any* behavior, we ran them first. Since it didn't decide\n    // what to do, we need to make sure to return the basic tests first before we move on.\n    var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);\n    if (simpleResult !== null) {\n      // Don't memoize this, it takes longer to set/retrieve than to just compare.\n      return simpleResult;\n    }\n  }\n\n  var leftHandType = type(leftHandOperand);\n  if (leftHandType !== type(rightHandOperand)) {\n    memoizeSet(leftHandOperand, rightHandOperand, options.memoize, false);\n    return false;\n  }\n\n  // Temporarily set the operands in the memoize object to prevent blowing the stack\n  memoizeSet(leftHandOperand, rightHandOperand, options.memoize, true);\n\n  var result = extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options);\n  memoizeSet(leftHandOperand, rightHandOperand, options.memoize, result);\n  return result;\n}\n\nfunction extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options) {\n  switch (leftHandType) {\n    case 'String':\n    case 'Number':\n    case 'Boolean':\n    case 'Date':\n      // If these types are their instance types (e.g. `new Number`) then re-deepEqual against their values\n      return deepEqual(leftHandOperand.valueOf(), rightHandOperand.valueOf());\n    case 'Promise':\n    case 'Symbol':\n    case 'function':\n    case 'WeakMap':\n    case 'WeakSet':\n    case 'Error':\n      return leftHandOperand === rightHandOperand;\n    case 'Arguments':\n    case 'Int8Array':\n    case 'Uint8Array':\n    case 'Uint8ClampedArray':\n    case 'Int16Array':\n    case 'Uint16Array':\n    case 'Int32Array':\n    case 'Uint32Array':\n    case 'Float32Array':\n    case 'Float64Array':\n    case 'Array':\n      return iterableEqual(leftHandOperand, rightHandOperand, options);\n    case 'RegExp':\n      return regexpEqual(leftHandOperand, rightHandOperand);\n    case 'Generator':\n      return generatorEqual(leftHandOperand, rightHandOperand, options);\n    case 'DataView':\n      return iterableEqual(new Uint8Array(leftHandOperand.buffer), new Uint8Array(rightHandOperand.buffer), options);\n    case 'ArrayBuffer':\n      return iterableEqual(new Uint8Array(leftHandOperand), new Uint8Array(rightHandOperand), options);\n    case 'Set':\n      return entriesEqual(leftHandOperand, rightHandOperand, options);\n    case 'Map':\n      return entriesEqual(leftHandOperand, rightHandOperand, options);\n    default:\n      return objectEqual(leftHandOperand, rightHandOperand, options);\n  }\n}\n\n/*!\n * Compare two Regular Expressions for equality.\n *\n * @param {RegExp} leftHandOperand\n * @param {RegExp} rightHandOperand\n * @return {Boolean} result\n */\n\nfunction regexpEqual(leftHandOperand, rightHandOperand) {\n  return leftHandOperand.toString() === rightHandOperand.toString();\n}\n\n/*!\n * Compare two Sets/Maps for equality. Faster than other equality functions.\n *\n * @param {Set} leftHandOperand\n * @param {Set} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\nfunction entriesEqual(leftHandOperand, rightHandOperand, options) {\n  // IE11 doesn't support Set#entries or Set#@@iterator, so we need manually populate using Set#forEach\n  if (leftHandOperand.size !== rightHandOperand.size) {\n    return false;\n  }\n  if (leftHandOperand.size === 0) {\n    return true;\n  }\n  var leftHandItems = [];\n  var rightHandItems = [];\n  leftHandOperand.forEach(function gatherEntries(key, value) {\n    leftHandItems.push([ key, value ]);\n  });\n  rightHandOperand.forEach(function gatherEntries(key, value) {\n    rightHandItems.push([ key, value ]);\n  });\n  return iterableEqual(leftHandItems.sort(), rightHandItems.sort(), options);\n}\n\n/*!\n * Simple equality for flat iterable objects such as Arrays, TypedArrays or Node.js buffers.\n *\n * @param {Iterable} leftHandOperand\n * @param {Iterable} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\nfunction iterableEqual(leftHandOperand, rightHandOperand, options) {\n  var length = leftHandOperand.length;\n  if (length !== rightHandOperand.length) {\n    return false;\n  }\n  if (length === 0) {\n    return true;\n  }\n  var index = -1;\n  while (++index < length) {\n    if (deepEqual(leftHandOperand[index], rightHandOperand[index], options) === false) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*!\n * Simple equality for generator objects such as those returned by generator functions.\n *\n * @param {Iterable} leftHandOperand\n * @param {Iterable} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\nfunction generatorEqual(leftHandOperand, rightHandOperand, options) {\n  return iterableEqual(getGeneratorEntries(leftHandOperand), getGeneratorEntries(rightHandOperand), options);\n}\n\n/*!\n * Determine if the given object has an @@iterator function.\n *\n * @param {Object} target\n * @return {Boolean} `true` if the object has an @@iterator function.\n */\nfunction hasIteratorFunction(target) {\n  return typeof Symbol !== 'undefined' &&\n    typeof target === 'object' &&\n    typeof Symbol.iterator !== 'undefined' &&\n    typeof target[Symbol.iterator] === 'function';\n}\n\n/*!\n * Gets all iterator entries from the given Object. If the Object has no @@iterator function, returns an empty array.\n * This will consume the iterator - which could have side effects depending on the @@iterator implementation.\n *\n * @param {Object} target\n * @returns {Array} an array of entries from the @@iterator function\n */\nfunction getIteratorEntries(target) {\n  if (hasIteratorFunction(target)) {\n    try {\n      return getGeneratorEntries(target[Symbol.iterator]());\n    } catch (iteratorError) {\n      return [];\n    }\n  }\n  return [];\n}\n\n/*!\n * Gets all entries from a Generator. This will consume the generator - which could have side effects.\n *\n * @param {Generator} target\n * @returns {Array} an array of entries from the Generator.\n */\nfunction getGeneratorEntries(generator) {\n  var generatorResult = generator.next();\n  var accumulator = [ generatorResult.value ];\n  while (generatorResult.done === false) {\n    generatorResult = generator.next();\n    accumulator.push(generatorResult.value);\n  }\n  return accumulator;\n}\n\n/*!\n * Gets all own and inherited enumerable keys from a target.\n *\n * @param {Object} target\n * @returns {Array} an array of own and inherited enumerable keys from the target.\n */\nfunction getEnumerableKeys(target) {\n  var keys = [];\n  for (var key in target) {\n    keys.push(key);\n  }\n  return keys;\n}\n\n/*!\n * Determines if two objects have matching values, given a set of keys. Defers to deepEqual for the equality check of\n * each key. If any value of the given key is not equal, the function will return false (early).\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Array} keys An array of keys to compare the values of leftHandOperand and rightHandOperand against\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\nfunction keysEqual(leftHandOperand, rightHandOperand, keys, options) {\n  var length = keys.length;\n  if (length === 0) {\n    return true;\n  }\n  for (var i = 0; i < length; i += 1) {\n    if (deepEqual(leftHandOperand[keys[i]], rightHandOperand[keys[i]], options) === false) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*!\n * Recursively check the equality of two Objects. Once basic sameness has been established it will defer to `deepEqual`\n * for each enumerable key in the object.\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\nfunction objectEqual(leftHandOperand, rightHandOperand, options) {\n  var leftHandKeys = getEnumerableKeys(leftHandOperand);\n  var rightHandKeys = getEnumerableKeys(rightHandOperand);\n  if (leftHandKeys.length && leftHandKeys.length === rightHandKeys.length) {\n    leftHandKeys.sort();\n    rightHandKeys.sort();\n    if (iterableEqual(leftHandKeys, rightHandKeys) === false) {\n      return false;\n    }\n    return keysEqual(leftHandOperand, rightHandOperand, leftHandKeys, options);\n  }\n\n  var leftHandEntries = getIteratorEntries(leftHandOperand);\n  var rightHandEntries = getIteratorEntries(rightHandOperand);\n  if (leftHandEntries.length && leftHandEntries.length === rightHandEntries.length) {\n    leftHandEntries.sort();\n    rightHandEntries.sort();\n    return iterableEqual(leftHandEntries, rightHandEntries, options);\n  }\n\n  if (leftHandKeys.length === 0 &&\n      leftHandEntries.length === 0 &&\n      rightHandKeys.length === 0 &&\n      rightHandEntries.length === 0) {\n    return true;\n  }\n\n  return false;\n}\n\n/*!\n * Returns true if the argument is a primitive.\n *\n * This intentionally returns true for all objects that can be compared by reference,\n * including functions and symbols.\n *\n * @param {Mixed} value\n * @return {Boolean} result\n */\nfunction isPrimitive(value) {\n  return value === null || typeof value !== 'object';\n}\n", "var config = require('../config');\n\n/*!\n * Chai - isProxyEnabled helper\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .isProxyEnabled()\n *\n * Helper function to check if Chai's proxy protection feature is enabled. If\n * proxies are unsupported or disabled via the user's Chai config, then return\n * false. Otherwise, return true.\n *\n * @namespace Utils\n * @name isProxyEnabled\n */\n\nmodule.exports = function isProxyEnabled() {\n  return config.useProxy &&\n    typeof Proxy !== 'undefined' &&\n    typeof Reflect !== 'undefined';\n};\n", "/*!\n * Chai - addProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar isProxyEnabled = require('./isProxyEnabled');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .addProperty(ctx, name, getter)\n *\n * Adds a property to the prototype of an object.\n *\n *     utils.addProperty(chai.Assertion.prototype, 'foo', function () {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.instanceof(Foo);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.foo;\n *\n * @param {Object} ctx object to which the property is added\n * @param {String} name of property to add\n * @param {Function} getter function to be used for name\n * @namespace Utils\n * @name addProperty\n * @api public\n */\n\nmodule.exports = function addProperty(ctx, name, getter) {\n  getter = getter === undefined ? function () {} : getter;\n\n  Object.defineProperty(ctx, name,\n    { get: function propertyGetter() {\n        // Setting the `ssfi` flag to `propertyGetter` causes this function to\n        // be the starting point for removing implementation frames from the\n        // stack trace of a failed assertion.\n        //\n        // However, we only want to use this function as the starting point if\n        // the `lockSsfi` flag isn't set and proxy protection is disabled.\n        //\n        // If the `lockSsfi` flag is set, then either this assertion has been\n        // overwritten by another assertion, or this assertion is being invoked\n        // from inside of another assertion. In the first case, the `ssfi` flag\n        // has already been set by the overwriting assertion. In the second\n        // case, the `ssfi` flag has already been set by the outer assertion.\n        //\n        // If proxy protection is enabled, then the `ssfi` flag has already been\n        // set by the proxy getter.\n        if (!isProxyEnabled() && !flag(this, 'lockSsfi')) {\n          flag(this, 'ssfi', propertyGetter);\n        }\n\n        var result = getter.call(this);\n        if (result !== undefined)\n          return result;\n\n        var newAssertion = new chai.Assertion();\n        transferFlags(this, newAssertion);\n        return newAssertion;\n      }\n    , configurable: true\n  });\n};\n", "var fnLengthDesc = Object.getOwnPropertyDescriptor(function () {}, 'length');\n\n/*!\n * Chai - addLengthGuard utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .addLengthGuard(fn, assertionName, isChainable)\n *\n * Define `length` as a getter on the given uninvoked method assertion. The\n * getter acts as a guard against chaining `length` directly off of an uninvoked\n * method assertion, which is a problem because it references `function`'s\n * built-in `length` property instead of Chai's `length` assertion. When the\n * getter catches the user making this mistake, it throws an error with a\n * helpful message.\n *\n * There are two ways in which this mistake can be made. The first way is by\n * chaining the `length` assertion directly off of an uninvoked chainable\n * method. In this case, Chai suggests that the user use `lengthOf` instead. The\n * second way is by chaining the `length` assertion directly off of an uninvoked\n * non-chainable method. Non-chainable methods must be invoked prior to\n * chaining. In this case, Chai suggests that the user consult the docs for the\n * given assertion.\n *\n * If the `length` property of functions is unconfigurable, then return `fn`\n * without modification.\n *\n * Note that in ES6, the function's `length` property is configurable, so once\n * support for legacy environments is dropped, Chai's `length` property can\n * replace the built-in function's `length` property, and this length guard will\n * no longer be necessary. In the mean time, maintaining consistency across all\n * environments is the priority.\n *\n * @param {Function} fn\n * @param {String} assertionName\n * @param {Boolean} isChainable\n * @namespace Utils\n * @name addLengthGuard\n */\n\nmodule.exports = function addLengthGuard (fn, assertionName, isChainable) {\n  if (!fnLengthDesc.configurable) return fn;\n\n  Object.defineProperty(fn, 'length', {\n    get: function () {\n      if (isChainable) {\n        throw Error('Invalid Chai property: ' + assertionName + '.length. Due' +\n          ' to a compatibility issue, \"length\" cannot directly follow \"' +\n          assertionName + '\". Use \"' + assertionName + '.lengthOf\" instead.');\n      }\n\n      throw Error('Invalid Chai property: ' + assertionName + '.length. See' +\n        ' docs for proper usage of \"' + assertionName + '\".');\n    }\n  });\n\n  return fn;\n};\n", "/*!\n * Chai - getProperties utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getProperties(object)\n *\n * This allows the retrieval of property names of an object, enumerable or not,\n * inherited or not.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getProperties\n * @api public\n */\n\nmodule.exports = function getProperties(object) {\n  var result = Object.getOwnPropertyNames(object);\n\n  function addProperty(property) {\n    if (result.indexOf(property) === -1) {\n      result.push(property);\n    }\n  }\n\n  var proto = Object.getPrototypeOf(object);\n  while (proto !== null) {\n    Object.getOwnPropertyNames(proto).forEach(addProperty);\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return result;\n};\n", "var config = require('../config');\nvar flag = require('./flag');\nvar getProperties = require('./getProperties');\nvar isProxyEnabled = require('./isProxyEnabled');\n\n/*!\n * Chai - proxify utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .proxify(object)\n *\n * Return a proxy of given object that throws an error when a non-existent\n * property is read. By default, the root cause is assumed to be a misspelled\n * property, and thus an attempt is made to offer a reasonable suggestion from\n * the list of existing properties. However, if a nonChainableMethodName is\n * provided, then the root cause is instead a failure to invoke a non-chainable\n * method prior to reading the non-existent property.\n *\n * If proxies are unsupported or disabled via the user's Chai config, then\n * return object without modification.\n *\n * @param {Object} obj\n * @param {String} nonChainableMethodName\n * @namespace Utils\n * @name proxify\n */\n\nvar builtins = ['__flags', '__methods', '_obj', 'assert'];\n\nmodule.exports = function proxify(obj, nonChainableMethodName) {\n  if (!isProxyEnabled()) return obj;\n\n  return new Proxy(obj, {\n    get: function proxyGetter(target, property) {\n      // This check is here because we should not throw errors on Symbol properties\n      // such as `Symbol.toStringTag`.\n      // The values for which an error should be thrown can be configured using\n      // the `config.proxyExcludedKeys` setting.\n      if (typeof property === 'string' &&\n          config.proxyExcludedKeys.indexOf(property) === -1 &&\n          !Reflect.has(target, property)) {\n        // Special message for invalid property access of non-chainable methods.\n        if (nonChainableMethodName) {\n          throw Error('Invalid Chai property: ' + nonChainableMethodName + '.' +\n            property + '. See docs for proper usage of \"' +\n            nonChainableMethodName + '\".');\n        }\n\n        // If the property is reasonably close to an existing Chai property,\n        // suggest that property to the user. Only suggest properties with a\n        // distance less than 4.\n        var suggestion = null;\n        var suggestionDistance = 4;\n        getProperties(target).forEach(function(prop) {\n          if (\n            !Object.prototype.hasOwnProperty(prop) &&\n            builtins.indexOf(prop) === -1\n          ) {\n            var dist = stringDistanceCapped(\n              property,\n              prop,\n              suggestionDistance\n            );\n            if (dist < suggestionDistance) {\n              suggestion = prop;\n              suggestionDistance = dist;\n            }\n          }\n        });\n\n        if (suggestion !== null) {\n          throw Error('Invalid Chai property: ' + property +\n            '. Did you mean \"' + suggestion + '\"?');\n        } else {\n          throw Error('Invalid Chai property: ' + property);\n        }\n      }\n\n      // Use this proxy getter as the starting point for removing implementation\n      // frames from the stack trace of a failed assertion. For property\n      // assertions, this prevents the proxy getter from showing up in the stack\n      // trace since it's invoked before the property getter. For method and\n      // chainable method assertions, this flag will end up getting changed to\n      // the method wrapper, which is good since this frame will no longer be in\n      // the stack once the method is invoked. Note that Chai builtin assertion\n      // properties such as `__flags` are skipped since this is only meant to\n      // capture the starting point of an assertion. This step is also skipped\n      // if the `lockSsfi` flag is set, thus indicating that this assertion is\n      // being called from within another assertion. In that case, the `ssfi`\n      // flag is already set to the outer assertion's starting point.\n      if (builtins.indexOf(property) === -1 && !flag(target, 'lockSsfi')) {\n        flag(target, 'ssfi', proxyGetter);\n      }\n\n      return Reflect.get(target, property);\n    }\n  });\n};\n\n/**\n * # stringDistanceCapped(strA, strB, cap)\n * Return the Levenshtein distance between two strings, but no more than cap.\n * @param {string} strA\n * @param {string} strB\n * @param {number} number\n * @return {number} min(string distance between strA and strB, cap)\n * @api private\n */\n\nfunction stringDistanceCapped(strA, strB, cap) {\n  if (Math.abs(strA.length - strB.length) >= cap) {\n    return cap;\n  }\n\n  var memo = [];\n  // `memo` is a two-dimensional array containing distances.\n  // memo[i][j] is the distance between strA.slice(0, i) and\n  // strB.slice(0, j).\n  for (var i = 0; i <= strA.length; i++) {\n    memo[i] = Array(strB.length + 1).fill(0);\n    memo[i][0] = i;\n  }\n  for (var j = 0; j < strB.length; j++) {\n    memo[0][j] = j;\n  }\n\n  for (var i = 1; i <= strA.length; i++) {\n    var ch = strA.charCodeAt(i - 1);\n    for (var j = 1; j <= strB.length; j++) {\n      if (Math.abs(i - j) >= cap) {\n        memo[i][j] = cap;\n        continue;\n      }\n      memo[i][j] = Math.min(\n        memo[i - 1][j] + 1,\n        memo[i][j - 1] + 1,\n        memo[i - 1][j - 1] +\n          (ch === strB.charCodeAt(j - 1) ? 0 : 1)\n      );\n    }\n  }\n\n  return memo[strA.length][strB.length];\n}\n", "/*!\n * Chai - addMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar addLengthGuard = require('./addLengthGuard');\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar proxify = require('./proxify');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .addMethod(ctx, name, method)\n *\n * Adds a method to the prototype of an object.\n *\n *     utils.addMethod(chai.Assertion.prototype, 'foo', function (str) {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addMethod('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(fooStr).to.be.foo('bar');\n *\n * @param {Object} ctx object to which the method is added\n * @param {String} name of method to add\n * @param {Function} method function to be used for name\n * @namespace Utils\n * @name addMethod\n * @api public\n */\n\nmodule.exports = function addMethod(ctx, name, method) {\n  var methodWrapper = function () {\n    // Setting the `ssfi` flag to `methodWrapper` causes this function to be the\n    // starting point for removing implementation frames from the stack trace of\n    // a failed assertion.\n    //\n    // However, we only want to use this function as the starting point if the\n    // `lockSsfi` flag isn't set.\n    //\n    // If the `lockSsfi` flag is set, then either this assertion has been\n    // overwritten by another assertion, or this assertion is being invoked from\n    // inside of another assertion. In the first case, the `ssfi` flag has\n    // already been set by the overwriting assertion. In the second case, the\n    // `ssfi` flag has already been set by the outer assertion.\n    if (!flag(this, 'lockSsfi')) {\n      flag(this, 'ssfi', methodWrapper);\n    }\n\n    var result = method.apply(this, arguments);\n    if (result !== undefined)\n      return result;\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  };\n\n  addLengthGuard(methodWrapper, name, false);\n  ctx[name] = proxify(methodWrapper, name);\n};\n", "/*!\n * Chai - overwriteProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar isProxyEnabled = require('./isProxyEnabled');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .overwriteProperty(ctx, name, fn)\n *\n * Overwrites an already existing property getter and provides\n * access to previous value. Must return function to use as getter.\n *\n *     utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {\n *       return function () {\n *         var obj = utils.flag(this, 'object');\n *         if (obj instanceof Foo) {\n *           new chai.Assertion(obj.name).to.equal('bar');\n *         } else {\n *           _super.call(this);\n *         }\n *       }\n *     });\n *\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.ok;\n *\n * @param {Object} ctx object whose property is to be overwritten\n * @param {String} name of property to overwrite\n * @param {Function} getter function that returns a getter function to be used for name\n * @namespace Utils\n * @name overwriteProperty\n * @api public\n */\n\nmodule.exports = function overwriteProperty(ctx, name, getter) {\n  var _get = Object.getOwnPropertyDescriptor(ctx, name)\n    , _super = function () {};\n\n  if (_get && 'function' === typeof _get.get)\n    _super = _get.get\n\n  Object.defineProperty(ctx, name,\n    { get: function overwritingPropertyGetter() {\n        // Setting the `ssfi` flag to `overwritingPropertyGetter` causes this\n        // function to be the starting point for removing implementation frames\n        // from the stack trace of a failed assertion.\n        //\n        // However, we only want to use this function as the starting point if\n        // the `lockSsfi` flag isn't set and proxy protection is disabled.\n        //\n        // If the `lockSsfi` flag is set, then either this assertion has been\n        // overwritten by another assertion, or this assertion is being invoked\n        // from inside of another assertion. In the first case, the `ssfi` flag\n        // has already been set by the overwriting assertion. In the second\n        // case, the `ssfi` flag has already been set by the outer assertion.\n        //\n        // If proxy protection is enabled, then the `ssfi` flag has already been\n        // set by the proxy getter.\n        if (!isProxyEnabled() && !flag(this, 'lockSsfi')) {\n          flag(this, 'ssfi', overwritingPropertyGetter);\n        }\n\n        // Setting the `lockSsfi` flag to `true` prevents the overwritten\n        // assertion from changing the `ssfi` flag. By this point, the `ssfi`\n        // flag is already set to the correct starting point for this assertion.\n        var origLockSsfi = flag(this, 'lockSsfi');\n        flag(this, 'lockSsfi', true);\n        var result = getter(_super).call(this);\n        flag(this, 'lockSsfi', origLockSsfi);\n\n        if (result !== undefined) {\n          return result;\n        }\n\n        var newAssertion = new chai.Assertion();\n        transferFlags(this, newAssertion);\n        return newAssertion;\n      }\n    , configurable: true\n  });\n};\n", "/*!\n * Chai - overwriteMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar addLengthGuard = require('./addLengthGuard');\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar proxify = require('./proxify');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .overwriteMethod(ctx, name, fn)\n *\n * Overwrites an already existing method and provides\n * access to previous function. Must return function\n * to be used for name.\n *\n *     utils.overwriteMethod(chai.Assertion.prototype, 'equal', function (_super) {\n *       return function (str) {\n *         var obj = utils.flag(this, 'object');\n *         if (obj instanceof Foo) {\n *           new chai.Assertion(obj.value).to.equal(str);\n *         } else {\n *           _super.apply(this, arguments);\n *         }\n *       }\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteMethod('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.equal('bar');\n *\n * @param {Object} ctx object whose method is to be overwritten\n * @param {String} name of method to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @namespace Utils\n * @name overwriteMethod\n * @api public\n */\n\nmodule.exports = function overwriteMethod(ctx, name, method) {\n  var _method = ctx[name]\n    , _super = function () {\n      throw new Error(name + ' is not a function');\n    };\n\n  if (_method && 'function' === typeof _method)\n    _super = _method;\n\n  var overwritingMethodWrapper = function () {\n    // Setting the `ssfi` flag to `overwritingMethodWrapper` causes this\n    // function to be the starting point for removing implementation frames from\n    // the stack trace of a failed assertion.\n    //\n    // However, we only want to use this function as the starting point if the\n    // `lockSsfi` flag isn't set.\n    //\n    // If the `lockSsfi` flag is set, then either this assertion has been\n    // overwritten by another assertion, or this assertion is being invoked from\n    // inside of another assertion. In the first case, the `ssfi` flag has\n    // already been set by the overwriting assertion. In the second case, the\n    // `ssfi` flag has already been set by the outer assertion.\n    if (!flag(this, 'lockSsfi')) {\n      flag(this, 'ssfi', overwritingMethodWrapper);\n    }\n\n    // Setting the `lockSsfi` flag to `true` prevents the overwritten assertion\n    // from changing the `ssfi` flag. By this point, the `ssfi` flag is already\n    // set to the correct starting point for this assertion.\n    var origLockSsfi = flag(this, 'lockSsfi');\n    flag(this, 'lockSsfi', true);\n    var result = method(_super).apply(this, arguments);\n    flag(this, 'lockSsfi', origLockSsfi);\n\n    if (result !== undefined) {\n      return result;\n    }\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  }\n\n  addLengthGuard(overwritingMethodWrapper, name, false);\n  ctx[name] = proxify(overwritingMethodWrapper, name);\n};\n", "/*!\n * Chai - addChainingMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar addLengthGuard = require('./addLengthGuard');\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar proxify = require('./proxify');\nvar transferFlags = require('./transferFlags');\n\n/*!\n * Module variables\n */\n\n// Check whether `Object.setPrototypeOf` is supported\nvar canSetPrototype = typeof Object.setPrototypeOf === 'function';\n\n// Without `Object.setPrototypeOf` support, this module will need to add properties to a function.\n// However, some of functions' own props are not configurable and should be skipped.\nvar testFn = function() {};\nvar excludeNames = Object.getOwnPropertyNames(testFn).filter(function(name) {\n  var propDesc = Object.getOwnPropertyDescriptor(testFn, name);\n\n  // Note: PhantomJS 1.x includes `callee` as one of `testFn`'s own properties,\n  // but then returns `undefined` as the property descriptor for `callee`. As a\n  // workaround, we perform an otherwise unnecessary type-check for `propDesc`,\n  // and then filter it out if it's not an object as it should be.\n  if (typeof propDesc !== 'object')\n    return true;\n\n  return !propDesc.configurable;\n});\n\n// Cache `Function` properties\nvar call  = Function.prototype.call,\n    apply = Function.prototype.apply;\n\n/**\n * ### .addChainableMethod(ctx, name, method, chainingBehavior)\n *\n * Adds a method to an object, such that the method can also be chained.\n *\n *     utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);\n *\n * The result can then be used as both a method assertion, executing both `method` and\n * `chainingBehavior`, or as a language chain, which only executes `chainingBehavior`.\n *\n *     expect(fooStr).to.be.foo('bar');\n *     expect(fooStr).to.be.foo.equal('foo');\n *\n * @param {Object} ctx object to which the method is added\n * @param {String} name of method to add\n * @param {Function} method function to be used for `name`, when called\n * @param {Function} chainingBehavior function to be called every time the property is accessed\n * @namespace Utils\n * @name addChainableMethod\n * @api public\n */\n\nmodule.exports = function addChainableMethod(ctx, name, method, chainingBehavior) {\n  if (typeof chainingBehavior !== 'function') {\n    chainingBehavior = function () { };\n  }\n\n  var chainableBehavior = {\n      method: method\n    , chainingBehavior: chainingBehavior\n  };\n\n  // save the methods so we can overwrite them later, if we need to.\n  if (!ctx.__methods) {\n    ctx.__methods = {};\n  }\n  ctx.__methods[name] = chainableBehavior;\n\n  Object.defineProperty(ctx, name,\n    { get: function chainableMethodGetter() {\n        chainableBehavior.chainingBehavior.call(this);\n\n        var chainableMethodWrapper = function () {\n          // Setting the `ssfi` flag to `chainableMethodWrapper` causes this\n          // function to be the starting point for removing implementation\n          // frames from the stack trace of a failed assertion.\n          //\n          // However, we only want to use this function as the starting point if\n          // the `lockSsfi` flag isn't set.\n          //\n          // If the `lockSsfi` flag is set, then this assertion is being\n          // invoked from inside of another assertion. In this case, the `ssfi`\n          // flag has already been set by the outer assertion.\n          //\n          // Note that overwriting a chainable method merely replaces the saved\n          // methods in `ctx.__methods` instead of completely replacing the\n          // overwritten assertion. Therefore, an overwriting assertion won't\n          // set the `ssfi` or `lockSsfi` flags.\n          if (!flag(this, 'lockSsfi')) {\n            flag(this, 'ssfi', chainableMethodWrapper);\n          }\n\n          var result = chainableBehavior.method.apply(this, arguments);\n          if (result !== undefined) {\n            return result;\n          }\n\n          var newAssertion = new chai.Assertion();\n          transferFlags(this, newAssertion);\n          return newAssertion;\n        };\n\n        addLengthGuard(chainableMethodWrapper, name, true);\n\n        // Use `Object.setPrototypeOf` if available\n        if (canSetPrototype) {\n          // Inherit all properties from the object by replacing the `Function` prototype\n          var prototype = Object.create(this);\n          // Restore the `call` and `apply` methods from `Function`\n          prototype.call = call;\n          prototype.apply = apply;\n          Object.setPrototypeOf(chainableMethodWrapper, prototype);\n        }\n        // Otherwise, redefine all properties (slow!)\n        else {\n          var asserterNames = Object.getOwnPropertyNames(ctx);\n          asserterNames.forEach(function (asserterName) {\n            if (excludeNames.indexOf(asserterName) !== -1) {\n              return;\n            }\n\n            var pd = Object.getOwnPropertyDescriptor(ctx, asserterName);\n            Object.defineProperty(chainableMethodWrapper, asserterName, pd);\n          });\n        }\n\n        transferFlags(this, chainableMethodWrapper);\n        return proxify(chainableMethodWrapper);\n      }\n    , configurable: true\n  });\n};\n", "/*!\n * Chai - overwriteChainableMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar chai = require('../../chai');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .overwriteChainableMethod(ctx, name, method, chainingBehavior)\n *\n * Overwrites an already existing chainable method\n * and provides access to the previous function or\n * property.  Must return functions to be used for\n * name.\n *\n *     utils.overwriteChainableMethod(chai.Assertion.prototype, 'lengthOf',\n *       function (_super) {\n *       }\n *     , function (_super) {\n *       }\n *     );\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteChainableMethod('foo', fn, fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.have.lengthOf(3);\n *     expect(myFoo).to.have.lengthOf.above(3);\n *\n * @param {Object} ctx object whose method / property is to be overwritten\n * @param {String} name of method / property to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @param {Function} chainingBehavior function that returns a function to be used for property\n * @namespace Utils\n * @name overwriteChainableMethod\n * @api public\n */\n\nmodule.exports = function overwriteChainableMethod(ctx, name, method, chainingBehavior) {\n  var chainableBehavior = ctx.__methods[name];\n\n  var _chainingBehavior = chainableBehavior.chainingBehavior;\n  chainableBehavior.chainingBehavior = function overwritingChainableMethodGetter() {\n    var result = chainingBehavior(_chainingBehavior).call(this);\n    if (result !== undefined) {\n      return result;\n    }\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  };\n\n  var _method = chainableBehavior.method;\n  chainableBehavior.method = function overwritingChainableMethodWrapper() {\n    var result = method(_method).apply(this, arguments);\n    if (result !== undefined) {\n      return result;\n    }\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  };\n};\n", "/*!\n * Chai - compareByInspect utility\n * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar inspect = require('./inspect');\n\n/**\n * ### .compareByInspect(mixed, mixed)\n *\n * To be used as a compareFunction with Array.prototype.sort. Compares elements\n * using inspect instead of default behavior of using toString so that Symbols\n * and objects with irregular/missing toString can still be sorted without a\n * TypeError.\n *\n * @param {Mixed} first element to compare\n * @param {Mixed} second element to compare\n * @returns {Number} -1 if 'a' should come before 'b'; otherwise 1\n * @name compareByInspect\n * @namespace Utils\n * @api public\n */\n\nmodule.exports = function compareByInspect(a, b) {\n  return inspect(a) < inspect(b) ? -1 : 1;\n};\n", "/*!\n * Chai - getOwnEnumerablePropertySymbols utility\n * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getOwnEnumerablePropertySymbols(object)\n *\n * This allows the retrieval of directly-owned enumerable property symbols of an\n * object. This function is necessary because Object.getOwnPropertySymbols\n * returns both enumerable and non-enumerable property symbols.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getOwnEnumerablePropertySymbols\n * @api public\n */\n\nmodule.exports = function getOwnEnumerablePropertySymbols(obj) {\n  if (typeof Object.getOwnPropertySymbols !== 'function') return [];\n\n  return Object.getOwnPropertySymbols(obj).filter(function (sym) {\n    return Object.getOwnPropertyDescriptor(obj, sym).enumerable;\n  });\n};\n", "/*!\n * Chai - getOwnEnumerableProperties utility\n * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar getOwnEnumerablePropertySymbols = require('./getOwnEnumerablePropertySymbols');\n\n/**\n * ### .getOwnEnumerableProperties(object)\n *\n * This allows the retrieval of directly-owned enumerable property names and\n * symbols of an object. This function is necessary because Object.keys only\n * returns enumerable property names, not enumerable property symbols.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getOwnEnumerableProperties\n * @api public\n */\n\nmodule.exports = function getOwnEnumerableProperties(obj) {\n  return Object.keys(obj).concat(getOwnEnumerablePropertySymbols(obj));\n};\n", "'use strict';\n\n/* !\n * Chai - checkError utility\n * Copyright(c) 2012-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .checkError\n *\n * Checks that an error conforms to a given set of criteria and/or retrieves information about it.\n *\n * @api public\n */\n\n/**\n * ### .compatibleInstance(thrown, errorLike)\n *\n * Checks if two instances are compatible (strict equal).\n * Returns false if errorLike is not an instance of Error, because instances\n * can only be compatible if they're both error instances.\n *\n * @name compatibleInstance\n * @param {Error} thrown error\n * @param {Error|ErrorConstructor} errorLike object to compare against\n * @namespace Utils\n * @api public\n */\n\nfunction compatibleInstance(thrown, errorLike) {\n  return errorLike instanceof Error && thrown === errorLike;\n}\n\n/**\n * ### .compatibleConstructor(thrown, errorLike)\n *\n * Checks if two constructors are compatible.\n * This function can receive either an error constructor or\n * an error instance as the `errorLike` argument.\n * Constructors are compatible if they're the same or if one is\n * an instance of another.\n *\n * @name compatibleConstructor\n * @param {Error} thrown error\n * @param {Error|ErrorConstructor} errorLike object to compare against\n * @namespace Utils\n * @api public\n */\n\nfunction compatibleConstructor(thrown, errorLike) {\n  if (errorLike instanceof Error) {\n    // If `errorLike` is an instance of any error we compare their constructors\n    return thrown.constructor === errorLike.constructor || thrown instanceof errorLike.constructor;\n  } else if (errorLike.prototype instanceof Error || errorLike === Error) {\n    // If `errorLike` is a constructor that inherits from Error, we compare `thrown` to `errorLike` directly\n    return thrown.constructor === errorLike || thrown instanceof errorLike;\n  }\n\n  return false;\n}\n\n/**\n * ### .compatibleMessage(thrown, errMatcher)\n *\n * Checks if an error's message is compatible with a matcher (String or RegExp).\n * If the message contains the String or passes the RegExp test,\n * it is considered compatible.\n *\n * @name compatibleMessage\n * @param {Error} thrown error\n * @param {String|RegExp} errMatcher to look for into the message\n * @namespace Utils\n * @api public\n */\n\nfunction compatibleMessage(thrown, errMatcher) {\n  var comparisonString = typeof thrown === 'string' ? thrown : thrown.message;\n  if (errMatcher instanceof RegExp) {\n    return errMatcher.test(comparisonString);\n  } else if (typeof errMatcher === 'string') {\n    return comparisonString.indexOf(errMatcher) !== -1; // eslint-disable-line no-magic-numbers\n  }\n\n  return false;\n}\n\n/**\n * ### .getFunctionName(constructorFn)\n *\n * Returns the name of a function.\n * This also includes a polyfill function if `constructorFn.name` is not defined.\n *\n * @name getFunctionName\n * @param {Function} constructorFn\n * @namespace Utils\n * @api private\n */\n\nvar functionNameMatch = /\\s*function(?:\\s|\\s*\\/\\*[^(?:*\\/)]+\\*\\/\\s*)*([^\\(\\/]+)/;\nfunction getFunctionName(constructorFn) {\n  var name = '';\n  if (typeof constructorFn.name === 'undefined') {\n    // Here we run a polyfill if constructorFn.name is not defined\n    var match = String(constructorFn).match(functionNameMatch);\n    if (match) {\n      name = match[1];\n    }\n  } else {\n    name = constructorFn.name;\n  }\n\n  return name;\n}\n\n/**\n * ### .getConstructorName(errorLike)\n *\n * Gets the constructor name for an Error instance or constructor itself.\n *\n * @name getConstructorName\n * @param {Error|ErrorConstructor} errorLike\n * @namespace Utils\n * @api public\n */\n\nfunction getConstructorName(errorLike) {\n  var constructorName = errorLike;\n  if (errorLike instanceof Error) {\n    constructorName = getFunctionName(errorLike.constructor);\n  } else if (typeof errorLike === 'function') {\n    // If `err` is not an instance of Error it is an error constructor itself or another function.\n    // If we've got a common function we get its name, otherwise we may need to create a new instance\n    // of the error just in case it's a poorly-constructed error. Please see chaijs/chai/issues/45 to know more.\n    constructorName = getFunctionName(errorLike).trim() ||\n        getFunctionName(new errorLike()); // eslint-disable-line new-cap\n  }\n\n  return constructorName;\n}\n\n/**\n * ### .getMessage(errorLike)\n *\n * Gets the error message from an error.\n * If `err` is a String itself, we return it.\n * If the error has no message, we return an empty string.\n *\n * @name getMessage\n * @param {Error|String} errorLike\n * @namespace Utils\n * @api public\n */\n\nfunction getMessage(errorLike) {\n  var msg = '';\n  if (errorLike && errorLike.message) {\n    msg = errorLike.message;\n  } else if (typeof errorLike === 'string') {\n    msg = errorLike;\n  }\n\n  return msg;\n}\n\nmodule.exports = {\n  compatibleInstance: compatibleInstance,\n  compatibleConstructor: compatibleConstructor,\n  compatibleMessage: compatibleMessage,\n  getMessage: getMessage,\n  getConstructorName: getConstructorName,\n};\n", "/*!\n * Chai - isNaN utility\n * Copyright(c) 2012-2015 Sakthipriyan Vairamani <thechargingvolcano@gmail.com>\n * MIT Licensed\n */\n\n/**\n * ### .isNaN(value)\n *\n * Checks if the given value is NaN or not.\n *\n *     utils.isNaN(NaN); // true\n *\n * @param {Value} The value which has to be checked if it is NaN\n * @name isNaN\n * @api private\n */\n\nfunction isNaN(value) {\n  // Refer http://www.ecma-international.org/ecma-262/6.0/#sec-isnan-number\n  // section's NOTE.\n  return value !== value;\n}\n\n// If ECMAScript 6's Number.isNaN is present, prefer that.\nmodule.exports = Number.isNaN || isNaN;\n", "var type = require('type-detect');\n\nvar flag = require('./flag');\n\nfunction isObjectType(obj) {\n  var objectType = type(obj);\n  var objectTypes = ['Array', 'Object', 'function'];\n\n  return objectTypes.indexOf(objectType) !== -1;\n}\n\n/**\n * ### .getOperator(message)\n *\n * Extract the operator from error message.\n * Operator defined is based on below link\n * https://nodejs.org/api/assert.html#assert_assert.\n *\n * Returns the `operator` or `undefined` value for an Assertion.\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getOperator\n * @api public\n */\n\nmodule.exports = function getOperator(obj, args) {\n  var operator = flag(obj, 'operator');\n  var negate = flag(obj, 'negate');\n  var expected = args[3];\n  var msg = negate ? args[2] : args[1];\n\n  if (operator) {\n    return operator;\n  }\n\n  if (typeof msg === 'function') msg = msg();\n\n  msg = msg || '';\n  if (!msg) {\n    return undefined;\n  }\n\n  if (/\\shave\\s/.test(msg)) {\n    return undefined;\n  }\n\n  var isObject = isObjectType(expected);\n  if (/\\snot\\s/.test(msg)) {\n    return isObject ? 'notDeepStrictEqual' : 'notStrictEqual';\n  }\n\n  return isObject ? 'deepStrictEqual' : 'strictEqual';\n};\n", "/*!\n * chai\n * Copyright(c) 2011 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Dependencies that are used for multiple exports are required here only once\n */\n\nvar pathval = require('pathval');\n\n/*!\n * test utility\n */\n\nexports.test = require('./test');\n\n/*!\n * type utility\n */\n\nexports.type = require('type-detect');\n\n/*!\n * expectTypes utility\n */\nexports.expectTypes = require('./expectTypes');\n\n/*!\n * message utility\n */\n\nexports.getMessage = require('./getMessage');\n\n/*!\n * actual utility\n */\n\nexports.getActual = require('./getActual');\n\n/*!\n * Inspect util\n */\n\nexports.inspect = require('./inspect');\n\n/*!\n * Object Display util\n */\n\nexports.objDisplay = require('./objDisplay');\n\n/*!\n * Flag utility\n */\n\nexports.flag = require('./flag');\n\n/*!\n * Flag transferring utility\n */\n\nexports.transferFlags = require('./transferFlags');\n\n/*!\n * Deep equal utility\n */\n\nexports.eql = require('deep-eql');\n\n/*!\n * Deep path info\n */\n\nexports.getPathInfo = pathval.getPathInfo;\n\n/*!\n * Check if a property exists\n */\n\nexports.hasProperty = pathval.hasProperty;\n\n/*!\n * Function name\n */\n\nexports.getName = require('get-func-name');\n\n/*!\n * add Property\n */\n\nexports.addProperty = require('./addProperty');\n\n/*!\n * add Method\n */\n\nexports.addMethod = require('./addMethod');\n\n/*!\n * overwrite Property\n */\n\nexports.overwriteProperty = require('./overwriteProperty');\n\n/*!\n * overwrite Method\n */\n\nexports.overwriteMethod = require('./overwriteMethod');\n\n/*!\n * Add a chainable method\n */\n\nexports.addChainableMethod = require('./addChainableMethod');\n\n/*!\n * Overwrite chainable method\n */\n\nexports.overwriteChainableMethod = require('./overwriteChainableMethod');\n\n/*!\n * Compare by inspect method\n */\n\nexports.compareByInspect = require('./compareByInspect');\n\n/*!\n * Get own enumerable property symbols method\n */\n\nexports.getOwnEnumerablePropertySymbols = require('./getOwnEnumerablePropertySymbols');\n\n/*!\n * Get own enumerable properties method\n */\n\nexports.getOwnEnumerableProperties = require('./getOwnEnumerableProperties');\n\n/*!\n * Checks error against a given set of criteria\n */\n\nexports.checkError = require('check-error');\n\n/*!\n * Proxify util\n */\n\nexports.proxify = require('./proxify');\n\n/*!\n * addLengthGuard util\n */\n\nexports.addLengthGuard = require('./addLengthGuard');\n\n/*!\n * isProxyEnabled helper\n */\n\nexports.isProxyEnabled = require('./isProxyEnabled');\n\n/*!\n * isNaN method\n */\n\nexports.isNaN = require('./isNaN');\n\n/*!\n * getOperator method\n */\n\nexports.getOperator = require('./getOperator');", "/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar config = require('./config');\n\nmodule.exports = function (_chai, util) {\n  /*!\n   * Module dependencies.\n   */\n\n  var AssertionError = _chai.AssertionError\n    , flag = util.flag;\n\n  /*!\n   * Module export.\n   */\n\n  _chai.Assertion = Assertion;\n\n  /*!\n   * Assertion Constructor\n   *\n   * Creates object for chaining.\n   *\n   * `Assertion` objects contain metadata in the form of flags. Three flags can\n   * be assigned during instantiation by passing arguments to this constructor:\n   *\n   * - `object`: This flag contains the target of the assertion. For example, in\n   *   the assertion `expect(numKittens).to.equal(7);`, the `object` flag will\n   *   contain `numKittens` so that the `equal` assertion can reference it when\n   *   needed.\n   *\n   * - `message`: This flag contains an optional custom error message to be\n   *   prepended to the error message that's generated by the assertion when it\n   *   fails.\n   *\n   * - `ssfi`: This flag stands for \"start stack function indicator\". It\n   *   contains a function reference that serves as the starting point for\n   *   removing frames from the stack trace of the error that's created by the\n   *   assertion when it fails. The goal is to provide a cleaner stack trace to\n   *   end users by removing Chai's internal functions. Note that it only works\n   *   in environments that support `Error.captureStackTrace`, and only when\n   *   `Chai.config.includeStack` hasn't been set to `false`.\n   *\n   * - `lockSsfi`: This flag controls whether or not the given `ssfi` flag\n   *   should retain its current value, even as assertions are chained off of\n   *   this object. This is usually set to `true` when creating a new assertion\n   *   from within another assertion. It's also temporarily set to `true` before\n   *   an overwritten assertion gets called by the overwriting assertion.\n   *\n   * @param {Mixed} obj target of the assertion\n   * @param {String} msg (optional) custom error message\n   * @param {Function} ssfi (optional) starting point for removing stack frames\n   * @param {Boolean} lockSsfi (optional) whether or not the ssfi flag is locked\n   * @api private\n   */\n\n  function Assertion (obj, msg, ssfi, lockSsfi) {\n    flag(this, 'ssfi', ssfi || Assertion);\n    flag(this, 'lockSsfi', lockSsfi);\n    flag(this, 'object', obj);\n    flag(this, 'message', msg);\n\n    return util.proxify(this);\n  }\n\n  Object.defineProperty(Assertion, 'includeStack', {\n    get: function() {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      return config.includeStack;\n    },\n    set: function(value) {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      config.includeStack = value;\n    }\n  });\n\n  Object.defineProperty(Assertion, 'showDiff', {\n    get: function() {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      return config.showDiff;\n    },\n    set: function(value) {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      config.showDiff = value;\n    }\n  });\n\n  Assertion.addProperty = function (name, fn) {\n    util.addProperty(this.prototype, name, fn);\n  };\n\n  Assertion.addMethod = function (name, fn) {\n    util.addMethod(this.prototype, name, fn);\n  };\n\n  Assertion.addChainableMethod = function (name, fn, chainingBehavior) {\n    util.addChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n\n  Assertion.overwriteProperty = function (name, fn) {\n    util.overwriteProperty(this.prototype, name, fn);\n  };\n\n  Assertion.overwriteMethod = function (name, fn) {\n    util.overwriteMethod(this.prototype, name, fn);\n  };\n\n  Assertion.overwriteChainableMethod = function (name, fn, chainingBehavior) {\n    util.overwriteChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n\n  /**\n   * ### .assert(expression, message, negateMessage, expected, actual, showDiff)\n   *\n   * Executes an expression and check expectations. Throws AssertionError for reporting if test doesn't pass.\n   *\n   * @name assert\n   * @param {Philosophical} expression to be tested\n   * @param {String|Function} message or function that returns message to display if expression fails\n   * @param {String|Function} negatedMessage or function that returns negatedMessage to display if negated expression fails\n   * @param {Mixed} expected value (remember to check for negation)\n   * @param {Mixed} actual (optional) will default to `this.obj`\n   * @param {Boolean} showDiff (optional) when set to `true`, assert will display a diff in addition to the message if expression fails\n   * @api private\n   */\n\n  Assertion.prototype.assert = function (expr, msg, negateMsg, expected, _actual, showDiff) {\n    var ok = util.test(this, arguments);\n    if (false !== showDiff) showDiff = true;\n    if (undefined === expected && undefined === _actual) showDiff = false;\n    if (true !== config.showDiff) showDiff = false;\n\n    if (!ok) {\n      msg = util.getMessage(this, arguments);\n      var actual = util.getActual(this, arguments);\n      var assertionErrorObjectProperties = {\n          actual: actual\n        , expected: expected\n        , showDiff: showDiff\n      };\n\n      var operator = util.getOperator(this, arguments);\n      if (operator) {\n        assertionErrorObjectProperties.operator = operator;\n      }\n\n      throw new AssertionError(\n        msg,\n        assertionErrorObjectProperties,\n        (config.includeStack) ? this.assert : flag(this, 'ssfi'));\n    }\n  };\n\n  /*!\n   * ### ._obj\n   *\n   * Quick reference to stored `actual` value for plugin developers.\n   *\n   * @api private\n   */\n\n  Object.defineProperty(Assertion.prototype, '_obj',\n    { get: function () {\n        return flag(this, 'object');\n      }\n    , set: function (val) {\n        flag(this, 'object', val);\n      }\n  });\n};\n", "/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, _) {\n  var Assertion = chai.Assertion\n    , AssertionError = chai.AssertionError\n    , flag = _.flag;\n\n  /**\n   * ### Language Chains\n   *\n   * The following are provided as chainable getters to improve the readability\n   * of your assertions.\n   *\n   * **Chains**\n   *\n   * - to\n   * - be\n   * - been\n   * - is\n   * - that\n   * - which\n   * - and\n   * - has\n   * - have\n   * - with\n   * - at\n   * - of\n   * - same\n   * - but\n   * - does\n   * - still\n   * - also\n   *\n   * @name language chains\n   * @namespace BDD\n   * @api public\n   */\n\n  [ 'to', 'be', 'been', 'is'\n  , 'and', 'has', 'have', 'with'\n  , 'that', 'which', 'at', 'of'\n  , 'same', 'but', 'does', 'still', \"also\" ].forEach(function (chain) {\n    Assertion.addProperty(chain);\n  });\n\n  /**\n   * ### .not\n   *\n   * Negates all assertions that follow in the chain.\n   *\n   *     expect(function () {}).to.not.throw();\n   *     expect({a: 1}).to.not.have.property('b');\n   *     expect([1, 2]).to.be.an('array').that.does.not.include(3);\n   *\n   * Just because you can negate any assertion with `.not` doesn't mean you\n   * should. With great power comes great responsibility. It's often best to\n   * assert that the one expected output was produced, rather than asserting\n   * that one of countless unexpected outputs wasn't produced. See individual\n   * assertions for specific guidance.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.not.equal(1); // Not recommended\n   *\n   * @name not\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('not', function () {\n    flag(this, 'negate', true);\n  });\n\n  /**\n   * ### .deep\n   *\n   * Causes all `.equal`, `.include`, `.members`, `.keys`, and `.property`\n   * assertions that follow in the chain to use deep equality instead of strict\n   * (`===`) equality. See the `deep-eql` project page for info on the deep\n   * equality algorithm: https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object deeply (but not strictly) equals `{a: 1}`\n   *     expect({a: 1}).to.deep.equal({a: 1});\n   *     expect({a: 1}).to.not.equal({a: 1});\n   *\n   *     // Target array deeply (but not strictly) includes `{a: 1}`\n   *     expect([{a: 1}]).to.deep.include({a: 1});\n   *     expect([{a: 1}]).to.not.include({a: 1});\n   *\n   *     // Target object deeply (but not strictly) includes `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.deep.include({x: {a: 1}});\n   *     expect({x: {a: 1}}).to.not.include({x: {a: 1}});\n   *\n   *     // Target array deeply (but not strictly) has member `{a: 1}`\n   *     expect([{a: 1}]).to.have.deep.members([{a: 1}]);\n   *     expect([{a: 1}]).to.not.have.members([{a: 1}]);\n   *\n   *     // Target set deeply (but not strictly) has key `{a: 1}`\n   *     expect(new Set([{a: 1}])).to.have.deep.keys([{a: 1}]);\n   *     expect(new Set([{a: 1}])).to.not.have.keys([{a: 1}]);\n   *\n   *     // Target object deeply (but not strictly) has property `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});\n   *     expect({x: {a: 1}}).to.not.have.property('x', {a: 1});\n   *\n   * @name deep\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('deep', function () {\n    flag(this, 'deep', true);\n  });\n\n  /**\n   * ### .nested\n   *\n   * Enables dot- and bracket-notation in all `.property` and `.include`\n   * assertions that follow in the chain.\n   *\n   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');\n   *     expect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});\n   *\n   * If `.` or `[]` are part of an actual property name, they can be escaped by\n   * adding two backslashes before them.\n   *\n   *     expect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\\\.a.\\\\[b\\\\]');\n   *     expect({'.a': {'[b]': 'x'}}).to.nested.include({'\\\\.a.\\\\[b\\\\]': 'x'});\n   *\n   * `.nested` cannot be combined with `.own`.\n   *\n   * @name nested\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('nested', function () {\n    flag(this, 'nested', true);\n  });\n\n  /**\n   * ### .own\n   *\n   * Causes all `.property` and `.include` assertions that follow in the chain\n   * to ignore inherited properties.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     expect({a: 1}).to.have.own.property('a');\n   *     expect({a: 1}).to.have.property('b');\n   *     expect({a: 1}).to.not.have.own.property('b');\n   *\n   *     expect({a: 1}).to.own.include({a: 1});\n   *     expect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});\n   *\n   * `.own` cannot be combined with `.nested`.\n   *\n   * @name own\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('own', function () {\n    flag(this, 'own', true);\n  });\n\n  /**\n   * ### .ordered\n   *\n   * Causes all `.members` assertions that follow in the chain to require that\n   * members be in the same order.\n   *\n   *     expect([1, 2]).to.have.ordered.members([1, 2])\n   *       .but.not.have.ordered.members([2, 1]);\n   *\n   * When `.include` and `.ordered` are combined, the ordering begins at the\n   * start of both arrays.\n   *\n   *     expect([1, 2, 3]).to.include.ordered.members([1, 2])\n   *       .but.not.include.ordered.members([2, 3]);\n   *\n   * @name ordered\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('ordered', function () {\n    flag(this, 'ordered', true);\n  });\n\n  /**\n   * ### .any\n   *\n   * Causes all `.keys` assertions that follow in the chain to only require that\n   * the target have at least one of the given keys. This is the opposite of\n   * `.all`, which requires that the target have all of the given keys.\n   *\n   *     expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\n   *\n   * See the `.keys` doc for guidance on when to use `.any` or `.all`.\n   *\n   * @name any\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('any', function () {\n    flag(this, 'any', true);\n    flag(this, 'all', false);\n  });\n\n  /**\n   * ### .all\n   *\n   * Causes all `.keys` assertions that follow in the chain to require that the\n   * target have all of the given keys. This is the opposite of `.any`, which\n   * only requires that the target have at least one of the given keys.\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n   *\n   * Note that `.all` is used by default when neither `.all` nor `.any` are\n   * added earlier in the chain. However, it's often best to add `.all` anyway\n   * because it improves readability.\n   *\n   * See the `.keys` doc for guidance on when to use `.any` or `.all`.\n   *\n   * @name all\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('all', function () {\n    flag(this, 'all', true);\n    flag(this, 'any', false);\n  });\n\n  /**\n   * ### .a(type[, msg])\n   *\n   * Asserts that the target's type is equal to the given string `type`. Types\n   * are case insensitive. See the `type-detect` project page for info on the\n   * type detection algorithm: https://github.com/chaijs/type-detect.\n   *\n   *     expect('foo').to.be.a('string');\n   *     expect({a: 1}).to.be.an('object');\n   *     expect(null).to.be.a('null');\n   *     expect(undefined).to.be.an('undefined');\n   *     expect(new Error).to.be.an('error');\n   *     expect(Promise.resolve()).to.be.a('promise');\n   *     expect(new Float32Array).to.be.a('float32array');\n   *     expect(Symbol()).to.be.a('symbol');\n   *\n   * `.a` supports objects that have a custom type set via `Symbol.toStringTag`.\n   *\n   *     var myObj = {\n   *       [Symbol.toStringTag]: 'myCustomType'\n   *     };\n   *\n   *     expect(myObj).to.be.a('myCustomType').but.not.an('object');\n   *\n   * It's often best to use `.a` to check a target's type before making more\n   * assertions on the same target. That way, you avoid unexpected behavior from\n   * any assertion that does different things based on the target's type.\n   *\n   *     expect([1, 2, 3]).to.be.an('array').that.includes(2);\n   *     expect([]).to.be.an('array').that.is.empty;\n   *\n   * Add `.not` earlier in the chain to negate `.a`. However, it's often best to\n   * assert that the target is the expected type, rather than asserting that it\n   * isn't one of many unexpected types.\n   *\n   *     expect('foo').to.be.a('string'); // Recommended\n   *     expect('foo').to.not.be.an('array'); // Not recommended\n   *\n   * `.a` accepts an optional `msg` argument which is a custom error message to\n   * show when the assertion fails. The message can also be given as the second\n   * argument to `expect`.\n   *\n   *     expect(1).to.be.a('string', 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.a('string');\n   *\n   * `.a` can also be used as a language chain to improve the readability of\n   * your assertions.\n   *\n   *     expect({b: 2}).to.have.a.property('b');\n   *\n   * The alias `.an` can be used interchangeably with `.a`.\n   *\n   * @name a\n   * @alias an\n   * @param {String} type\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function an (type, msg) {\n    if (msg) flag(this, 'message', msg);\n    type = type.toLowerCase();\n    var obj = flag(this, 'object')\n      , article = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(type.charAt(0)) ? 'an ' : 'a ';\n\n    this.assert(\n        type === _.type(obj).toLowerCase()\n      , 'expected #{this} to be ' + article + type\n      , 'expected #{this} not to be ' + article + type\n    );\n  }\n\n  Assertion.addChainableMethod('an', an);\n  Assertion.addChainableMethod('a', an);\n\n  /**\n   * ### .include(val[, msg])\n   *\n   * When the target is a string, `.include` asserts that the given string `val`\n   * is a substring of the target.\n   *\n   *     expect('foobar').to.include('foo');\n   *\n   * When the target is an array, `.include` asserts that the given `val` is a\n   * member of the target.\n   *\n   *     expect([1, 2, 3]).to.include(2);\n   *\n   * When the target is an object, `.include` asserts that the given object\n   * `val`'s properties are a subset of the target's properties.\n   *\n   *     expect({a: 1, b: 2, c: 3}).to.include({a: 1, b: 2});\n   *\n   * When the target is a Set or WeakSet, `.include` asserts that the given `val` is a\n   * member of the target. SameValueZero equality algorithm is used.\n   *\n   *     expect(new Set([1, 2])).to.include(2);\n   *\n   * When the target is a Map, `.include` asserts that the given `val` is one of\n   * the values of the target. SameValueZero equality algorithm is used.\n   *\n   *     expect(new Map([['a', 1], ['b', 2]])).to.include(2);\n   *\n   * Because `.include` does different things based on the target's type, it's\n   * important to check the target's type before using `.include`. See the `.a`\n   * doc for info on testing a target's type.\n   *\n   *     expect([1, 2, 3]).to.be.an('array').that.includes(2);\n   *\n   * By default, strict (`===`) equality is used to compare array members and\n   * object properties. Add `.deep` earlier in the chain to use deep equality\n   * instead (WeakSet targets are not supported). See the `deep-eql` project\n   * page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.\n   *\n   *     // Target array deeply (but not strictly) includes `{a: 1}`\n   *     expect([{a: 1}]).to.deep.include({a: 1});\n   *     expect([{a: 1}]).to.not.include({a: 1});\n   *\n   *     // Target object deeply (but not strictly) includes `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.deep.include({x: {a: 1}});\n   *     expect({x: {a: 1}}).to.not.include({x: {a: 1}});\n   *\n   * By default, all of the target's properties are searched when working with\n   * objects. This includes properties that are inherited and/or non-enumerable.\n   * Add `.own` earlier in the chain to exclude the target's inherited\n   * properties from the search.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     expect({a: 1}).to.own.include({a: 1});\n   *     expect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});\n   *\n   * Note that a target object is always only searched for `val`'s own\n   * enumerable properties.\n   *\n   * `.deep` and `.own` can be combined.\n   *\n   *     expect({a: {b: 2}}).to.deep.own.include({a: {b: 2}});\n   *\n   * Add `.nested` earlier in the chain to enable dot- and bracket-notation when\n   * referencing nested properties.\n   *\n   *     expect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});\n   *\n   * If `.` or `[]` are part of an actual property name, they can be escaped by\n   * adding two backslashes before them.\n   *\n   *     expect({'.a': {'[b]': 2}}).to.nested.include({'\\\\.a.\\\\[b\\\\]': 2});\n   *\n   * `.deep` and `.nested` can be combined.\n   *\n   *     expect({a: {b: [{c: 3}]}}).to.deep.nested.include({'a.b[0]': {c: 3}});\n   *\n   * `.own` and `.nested` cannot be combined.\n   *\n   * Add `.not` earlier in the chain to negate `.include`.\n   *\n   *     expect('foobar').to.not.include('taco');\n   *     expect([1, 2, 3]).to.not.include(4);\n   *\n   * However, it's dangerous to negate `.include` when the target is an object.\n   * The problem is that it creates uncertain expectations by asserting that the\n   * target object doesn't have all of `val`'s key/value pairs but may or may\n   * not have some of them. It's often best to identify the exact output that's\n   * expected, and then write an assertion that only accepts that exact output.\n   *\n   * When the target object isn't even expected to have `val`'s keys, it's\n   * often best to assert exactly that.\n   *\n   *     expect({c: 3}).to.not.have.any.keys('a', 'b'); // Recommended\n   *     expect({c: 3}).to.not.include({a: 1, b: 2}); // Not recommended\n   *\n   * When the target object is expected to have `val`'s keys, it's often best to\n   * assert that each of the properties has its expected value, rather than\n   * asserting that each property doesn't have one of many unexpected values.\n   *\n   *     expect({a: 3, b: 4}).to.include({a: 3, b: 4}); // Recommended\n   *     expect({a: 3, b: 4}).to.not.include({a: 1, b: 2}); // Not recommended\n   *\n   * `.include` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect([1, 2, 3]).to.include(4, 'nooo why fail??');\n   *     expect([1, 2, 3], 'nooo why fail??').to.include(4);\n   *\n   * `.include` can also be used as a language chain, causing all `.members` and\n   * `.keys` assertions that follow in the chain to require the target to be a\n   * superset of the expected set, rather than an identical set. Note that\n   * `.members` ignores duplicates in the subset when `.include` is added.\n   *\n   *     // Target object's keys are a superset of ['a', 'b'] but not identical\n   *     expect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');\n   *     expect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');\n   *\n   *     // Target array is a superset of [1, 2] but not identical\n   *     expect([1, 2, 3]).to.include.members([1, 2]);\n   *     expect([1, 2, 3]).to.not.have.members([1, 2]);\n   *\n   *     // Duplicates in the subset are ignored\n   *     expect([1, 2, 3]).to.include.members([1, 2, 2, 2]);\n   *\n   * Note that adding `.any` earlier in the chain causes the `.keys` assertion\n   * to ignore `.include`.\n   *\n   *     // Both assertions are identical\n   *     expect({a: 1}).to.include.any.keys('a', 'b');\n   *     expect({a: 1}).to.have.any.keys('a', 'b');\n   *\n   * The aliases `.includes`, `.contain`, and `.contains` can be used\n   * interchangeably with `.include`.\n   *\n   * @name include\n   * @alias contain\n   * @alias includes\n   * @alias contains\n   * @param {Mixed} val\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function SameValueZero(a, b) {\n    return (_.isNaN(a) && _.isNaN(b)) || a === b;\n  }\n\n  function includeChainingBehavior () {\n    flag(this, 'contains', true);\n  }\n\n  function include (val, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var obj = flag(this, 'object')\n      , objType = _.type(obj).toLowerCase()\n      , flagMsg = flag(this, 'message')\n      , negate = flag(this, 'negate')\n      , ssfi = flag(this, 'ssfi')\n      , isDeep = flag(this, 'deep')\n      , descriptor = isDeep ? 'deep ' : '';\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n    var included = false;\n\n    switch (objType) {\n      case 'string':\n        included = obj.indexOf(val) !== -1;\n        break;\n\n      case 'weakset':\n        if (isDeep) {\n          throw new AssertionError(\n            flagMsg + 'unable to use .deep.include with WeakSet',\n            undefined,\n            ssfi\n          );\n        }\n\n        included = obj.has(val);\n        break;\n\n      case 'map':\n        var isEql = isDeep ? _.eql : SameValueZero;\n        obj.forEach(function (item) {\n          included = included || isEql(item, val);\n        });\n        break;\n\n      case 'set':\n        if (isDeep) {\n          obj.forEach(function (item) {\n            included = included || _.eql(item, val);\n          });\n        } else {\n          included = obj.has(val);\n        }\n        break;\n\n      case 'array':\n        if (isDeep) {\n          included = obj.some(function (item) {\n            return _.eql(item, val);\n          })\n        } else {\n          included = obj.indexOf(val) !== -1;\n        }\n        break;\n\n      default:\n        // This block is for asserting a subset of properties in an object.\n        // `_.expectTypes` isn't used here because `.include` should work with\n        // objects with a custom `@@toStringTag`.\n        if (val !== Object(val)) {\n          throw new AssertionError(\n            flagMsg + 'the given combination of arguments ('\n            + objType + ' and '\n            + _.type(val).toLowerCase() + ')'\n            + ' is invalid for this assertion. '\n            + 'You can use an array, a map, an object, a set, a string, '\n            + 'or a weakset instead of a '\n            + _.type(val).toLowerCase(),\n            undefined,\n            ssfi\n          );\n        }\n\n        var props = Object.keys(val)\n          , firstErr = null\n          , numErrs = 0;\n\n        props.forEach(function (prop) {\n          var propAssertion = new Assertion(obj);\n          _.transferFlags(this, propAssertion, true);\n          flag(propAssertion, 'lockSsfi', true);\n\n          if (!negate || props.length === 1) {\n            propAssertion.property(prop, val[prop]);\n            return;\n          }\n\n          try {\n            propAssertion.property(prop, val[prop]);\n          } catch (err) {\n            if (!_.checkError.compatibleConstructor(err, AssertionError)) {\n              throw err;\n            }\n            if (firstErr === null) firstErr = err;\n            numErrs++;\n          }\n        }, this);\n\n        // When validating .not.include with multiple properties, we only want\n        // to throw an assertion error if all of the properties are included,\n        // in which case we throw the first property assertion error that we\n        // encountered.\n        if (negate && props.length > 1 && numErrs === props.length) {\n          throw firstErr;\n        }\n        return;\n    }\n\n    // Assert inclusion in collection or substring in a string.\n    this.assert(\n      included\n      , 'expected #{this} to ' + descriptor + 'include ' + _.inspect(val)\n      , 'expected #{this} to not ' + descriptor + 'include ' + _.inspect(val));\n  }\n\n  Assertion.addChainableMethod('include', include, includeChainingBehavior);\n  Assertion.addChainableMethod('contain', include, includeChainingBehavior);\n  Assertion.addChainableMethod('contains', include, includeChainingBehavior);\n  Assertion.addChainableMethod('includes', include, includeChainingBehavior);\n\n  /**\n   * ### .ok\n   *\n   * Asserts that the target is a truthy value (considered `true` in boolean context).\n   * However, it's often best to assert that the target is strictly (`===`) or\n   * deeply equal to its expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.ok; // Not recommended\n   *\n   *     expect(true).to.be.true; // Recommended\n   *     expect(true).to.be.ok; // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.ok`.\n   *\n   *     expect(0).to.equal(0); // Recommended\n   *     expect(0).to.not.be.ok; // Not recommended\n   *\n   *     expect(false).to.be.false; // Recommended\n   *     expect(false).to.not.be.ok; // Not recommended\n   *\n   *     expect(null).to.be.null; // Recommended\n   *     expect(null).to.not.be.ok; // Not recommended\n   *\n   *     expect(undefined).to.be.undefined; // Recommended\n   *     expect(undefined).to.not.be.ok; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(false, 'nooo why fail??').to.be.ok;\n   *\n   * @name ok\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('ok', function () {\n    this.assert(\n        flag(this, 'object')\n      , 'expected #{this} to be truthy'\n      , 'expected #{this} to be falsy');\n  });\n\n  /**\n   * ### .true\n   *\n   * Asserts that the target is strictly (`===`) equal to `true`.\n   *\n   *     expect(true).to.be.true;\n   *\n   * Add `.not` earlier in the chain to negate `.true`. However, it's often best\n   * to assert that the target is equal to its expected value, rather than not\n   * equal to `true`.\n   *\n   *     expect(false).to.be.false; // Recommended\n   *     expect(false).to.not.be.true; // Not recommended\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.true; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(false, 'nooo why fail??').to.be.true;\n   *\n   * @name true\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('true', function () {\n    this.assert(\n        true === flag(this, 'object')\n      , 'expected #{this} to be true'\n      , 'expected #{this} to be false'\n      , flag(this, 'negate') ? false : true\n    );\n  });\n\n  /**\n   * ### .false\n   *\n   * Asserts that the target is strictly (`===`) equal to `false`.\n   *\n   *     expect(false).to.be.false;\n   *\n   * Add `.not` earlier in the chain to negate `.false`. However, it's often\n   * best to assert that the target is equal to its expected value, rather than\n   * not equal to `false`.\n   *\n   *     expect(true).to.be.true; // Recommended\n   *     expect(true).to.not.be.false; // Not recommended\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.false; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(true, 'nooo why fail??').to.be.false;\n   *\n   * @name false\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('false', function () {\n    this.assert(\n        false === flag(this, 'object')\n      , 'expected #{this} to be false'\n      , 'expected #{this} to be true'\n      , flag(this, 'negate') ? true : false\n    );\n  });\n\n  /**\n   * ### .null\n   *\n   * Asserts that the target is strictly (`===`) equal to `null`.\n   *\n   *     expect(null).to.be.null;\n   *\n   * Add `.not` earlier in the chain to negate `.null`. However, it's often best\n   * to assert that the target is equal to its expected value, rather than not\n   * equal to `null`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.null; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(42, 'nooo why fail??').to.be.null;\n   *\n   * @name null\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('null', function () {\n    this.assert(\n        null === flag(this, 'object')\n      , 'expected #{this} to be null'\n      , 'expected #{this} not to be null'\n    );\n  });\n\n  /**\n   * ### .undefined\n   *\n   * Asserts that the target is strictly (`===`) equal to `undefined`.\n   *\n   *     expect(undefined).to.be.undefined;\n   *\n   * Add `.not` earlier in the chain to negate `.undefined`. However, it's often\n   * best to assert that the target is equal to its expected value, rather than\n   * not equal to `undefined`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.undefined; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(42, 'nooo why fail??').to.be.undefined;\n   *\n   * @name undefined\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('undefined', function () {\n    this.assert(\n        undefined === flag(this, 'object')\n      , 'expected #{this} to be undefined'\n      , 'expected #{this} not to be undefined'\n    );\n  });\n\n  /**\n   * ### .NaN\n   *\n   * Asserts that the target is exactly `NaN`.\n   *\n   *     expect(NaN).to.be.NaN;\n   *\n   * Add `.not` earlier in the chain to negate `.NaN`. However, it's often best\n   * to assert that the target is equal to its expected value, rather than not\n   * equal to `NaN`.\n   *\n   *     expect('foo').to.equal('foo'); // Recommended\n   *     expect('foo').to.not.be.NaN; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(42, 'nooo why fail??').to.be.NaN;\n   *\n   * @name NaN\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('NaN', function () {\n    this.assert(\n        _.isNaN(flag(this, 'object'))\n        , 'expected #{this} to be NaN'\n        , 'expected #{this} not to be NaN'\n    );\n  });\n\n  /**\n   * ### .exist\n   *\n   * Asserts that the target is not strictly (`===`) equal to either `null` or\n   * `undefined`. However, it's often best to assert that the target is equal to\n   * its expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.exist; // Not recommended\n   *\n   *     expect(0).to.equal(0); // Recommended\n   *     expect(0).to.exist; // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.exist`.\n   *\n   *     expect(null).to.be.null; // Recommended\n   *     expect(null).to.not.exist; // Not recommended\n   *\n   *     expect(undefined).to.be.undefined; // Recommended\n   *     expect(undefined).to.not.exist; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(null, 'nooo why fail??').to.exist;\n   *\n   * The alias `.exists` can be used interchangeably with `.exist`.\n   *\n   * @name exist\n   * @alias exists\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertExist () {\n    var val = flag(this, 'object');\n    this.assert(\n        val !== null && val !== undefined\n      , 'expected #{this} to exist'\n      , 'expected #{this} to not exist'\n    );\n  }\n\n  Assertion.addProperty('exist', assertExist);\n  Assertion.addProperty('exists', assertExist);\n\n  /**\n   * ### .empty\n   *\n   * When the target is a string or array, `.empty` asserts that the target's\n   * `length` property is strictly (`===`) equal to `0`.\n   *\n   *     expect([]).to.be.empty;\n   *     expect('').to.be.empty;\n   *\n   * When the target is a map or set, `.empty` asserts that the target's `size`\n   * property is strictly equal to `0`.\n   *\n   *     expect(new Set()).to.be.empty;\n   *     expect(new Map()).to.be.empty;\n   *\n   * When the target is a non-function object, `.empty` asserts that the target\n   * doesn't have any own enumerable properties. Properties with Symbol-based\n   * keys are excluded from the count.\n   *\n   *     expect({}).to.be.empty;\n   *\n   * Because `.empty` does different things based on the target's type, it's\n   * important to check the target's type before using `.empty`. See the `.a`\n   * doc for info on testing a target's type.\n   *\n   *     expect([]).to.be.an('array').that.is.empty;\n   *\n   * Add `.not` earlier in the chain to negate `.empty`. However, it's often\n   * best to assert that the target contains its expected number of values,\n   * rather than asserting that it's not empty.\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.not.be.empty; // Not recommended\n   *\n   *     expect(new Set([1, 2, 3])).to.have.property('size', 3); // Recommended\n   *     expect(new Set([1, 2, 3])).to.not.be.empty; // Not recommended\n   *\n   *     expect(Object.keys({a: 1})).to.have.lengthOf(1); // Recommended\n   *     expect({a: 1}).to.not.be.empty; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect([1, 2, 3], 'nooo why fail??').to.be.empty;\n   *\n   * @name empty\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('empty', function () {\n    var val = flag(this, 'object')\n      , ssfi = flag(this, 'ssfi')\n      , flagMsg = flag(this, 'message')\n      , itemsCount;\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n    switch (_.type(val).toLowerCase()) {\n      case 'array':\n      case 'string':\n        itemsCount = val.length;\n        break;\n      case 'map':\n      case 'set':\n        itemsCount = val.size;\n        break;\n      case 'weakmap':\n      case 'weakset':\n        throw new AssertionError(\n          flagMsg + '.empty was passed a weak collection',\n          undefined,\n          ssfi\n        );\n      case 'function':\n        var msg = flagMsg + '.empty was passed a function ' + _.getName(val);\n        throw new AssertionError(msg.trim(), undefined, ssfi);\n      default:\n        if (val !== Object(val)) {\n          throw new AssertionError(\n            flagMsg + '.empty was passed non-string primitive ' + _.inspect(val),\n            undefined,\n            ssfi\n          );\n        }\n        itemsCount = Object.keys(val).length;\n    }\n\n    this.assert(\n        0 === itemsCount\n      , 'expected #{this} to be empty'\n      , 'expected #{this} not to be empty'\n    );\n  });\n\n  /**\n   * ### .arguments\n   *\n   * Asserts that the target is an `arguments` object.\n   *\n   *     function test () {\n   *       expect(arguments).to.be.arguments;\n   *     }\n   *\n   *     test();\n   *\n   * Add `.not` earlier in the chain to negate `.arguments`. However, it's often\n   * best to assert which type the target is expected to be, rather than\n   * asserting that it\u2019s not an `arguments` object.\n   *\n   *     expect('foo').to.be.a('string'); // Recommended\n   *     expect('foo').to.not.be.arguments; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({}, 'nooo why fail??').to.be.arguments;\n   *\n   * The alias `.Arguments` can be used interchangeably with `.arguments`.\n   *\n   * @name arguments\n   * @alias Arguments\n   * @namespace BDD\n   * @api public\n   */\n\n  function checkArguments () {\n    var obj = flag(this, 'object')\n      , type = _.type(obj);\n    this.assert(\n        'Arguments' === type\n      , 'expected #{this} to be arguments but got ' + type\n      , 'expected #{this} to not be arguments'\n    );\n  }\n\n  Assertion.addProperty('arguments', checkArguments);\n  Assertion.addProperty('Arguments', checkArguments);\n\n  /**\n   * ### .equal(val[, msg])\n   *\n   * Asserts that the target is strictly (`===`) equal to the given `val`.\n   *\n   *     expect(1).to.equal(1);\n   *     expect('foo').to.equal('foo');\n   *\n   * Add `.deep` earlier in the chain to use deep equality instead. See the\n   * `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object deeply (but not strictly) equals `{a: 1}`\n   *     expect({a: 1}).to.deep.equal({a: 1});\n   *     expect({a: 1}).to.not.equal({a: 1});\n   *\n   *     // Target array deeply (but not strictly) equals `[1, 2]`\n   *     expect([1, 2]).to.deep.equal([1, 2]);\n   *     expect([1, 2]).to.not.equal([1, 2]);\n   *\n   * Add `.not` earlier in the chain to negate `.equal`. However, it's often\n   * best to assert that the target is equal to its expected value, rather than\n   * not equal to one of countless unexpected values.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.equal(2); // Not recommended\n   *\n   * `.equal` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.equal(2, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.equal(2);\n   *\n   * The aliases `.equals` and `eq` can be used interchangeably with `.equal`.\n   *\n   * @name equal\n   * @alias equals\n   * @alias eq\n   * @param {Mixed} val\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertEqual (val, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'deep')) {\n      var prevLockSsfi = flag(this, 'lockSsfi');\n      flag(this, 'lockSsfi', true);\n      this.eql(val);\n      flag(this, 'lockSsfi', prevLockSsfi);\n    } else {\n      this.assert(\n          val === obj\n        , 'expected #{this} to equal #{exp}'\n        , 'expected #{this} to not equal #{exp}'\n        , val\n        , this._obj\n        , true\n      );\n    }\n  }\n\n  Assertion.addMethod('equal', assertEqual);\n  Assertion.addMethod('equals', assertEqual);\n  Assertion.addMethod('eq', assertEqual);\n\n  /**\n   * ### .eql(obj[, msg])\n   *\n   * Asserts that the target is deeply equal to the given `obj`. See the\n   * `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object is deeply (but not strictly) equal to {a: 1}\n   *     expect({a: 1}).to.eql({a: 1}).but.not.equal({a: 1});\n   *\n   *     // Target array is deeply (but not strictly) equal to [1, 2]\n   *     expect([1, 2]).to.eql([1, 2]).but.not.equal([1, 2]);\n   *\n   * Add `.not` earlier in the chain to negate `.eql`. However, it's often best\n   * to assert that the target is deeply equal to its expected value, rather\n   * than not deeply equal to one of countless unexpected values.\n   *\n   *     expect({a: 1}).to.eql({a: 1}); // Recommended\n   *     expect({a: 1}).to.not.eql({b: 2}); // Not recommended\n   *\n   * `.eql` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect({a: 1}).to.eql({b: 2}, 'nooo why fail??');\n   *     expect({a: 1}, 'nooo why fail??').to.eql({b: 2});\n   *\n   * The alias `.eqls` can be used interchangeably with `.eql`.\n   *\n   * The `.deep.equal` assertion is almost identical to `.eql` but with one\n   * difference: `.deep.equal` causes deep equality comparisons to also be used\n   * for any other assertions that follow in the chain.\n   *\n   * @name eql\n   * @alias eqls\n   * @param {Mixed} obj\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertEql(obj, msg) {\n    if (msg) flag(this, 'message', msg);\n    this.assert(\n        _.eql(obj, flag(this, 'object'))\n      , 'expected #{this} to deeply equal #{exp}'\n      , 'expected #{this} to not deeply equal #{exp}'\n      , obj\n      , this._obj\n      , true\n    );\n  }\n\n  Assertion.addMethod('eql', assertEql);\n  Assertion.addMethod('eqls', assertEql);\n\n  /**\n   * ### .above(n[, msg])\n   *\n   * Asserts that the target is a number or a date greater than the given number or date `n` respectively.\n   * However, it's often best to assert that the target is equal to its expected\n   * value.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.be.above(1); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is greater than the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.above(2); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.above(2); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.above`.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(1).to.not.be.above(2); // Not recommended\n   *\n   * `.above` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.be.above(2, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.above(2);\n   *\n   * The aliases `.gt` and `.greaterThan` can be used interchangeably with\n   * `.above`.\n   *\n   * @name above\n   * @alias gt\n   * @alias greaterThan\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertAbove (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , errorMessage\n      , shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to above must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to above must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount > n\n        , 'expected #{this} to have a ' + descriptor + ' above #{exp} but got #{act}'\n        , 'expected #{this} to not have a ' + descriptor + ' above #{exp}'\n        , n\n        , itemsCount\n      );\n    } else {\n      this.assert(\n          obj > n\n        , 'expected #{this} to be above #{exp}'\n        , 'expected #{this} to be at most #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('above', assertAbove);\n  Assertion.addMethod('gt', assertAbove);\n  Assertion.addMethod('greaterThan', assertAbove);\n\n  /**\n   * ### .least(n[, msg])\n   *\n   * Asserts that the target is a number or a date greater than or equal to the given\n   * number or date `n` respectively. However, it's often best to assert that the target is equal to\n   * its expected value.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.be.at.least(1); // Not recommended\n   *     expect(2).to.be.at.least(2); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is greater than or equal to the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.at.least(2); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.at.least(2); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.least`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.at.least(2); // Not recommended\n   *\n   * `.least` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.be.at.least(2, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.at.least(2);\n   *\n   * The aliases `.gte` and `.greaterThanOrEqual` can be used interchangeably with\n   * `.least`.\n   *\n   * @name least\n   * @alias gte\n   * @alias greaterThanOrEqual\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertLeast (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , errorMessage\n      , shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to least must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to least must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount >= n\n        , 'expected #{this} to have a ' + descriptor + ' at least #{exp} but got #{act}'\n        , 'expected #{this} to have a ' + descriptor + ' below #{exp}'\n        , n\n        , itemsCount\n      );\n    } else {\n      this.assert(\n          obj >= n\n        , 'expected #{this} to be at least #{exp}'\n        , 'expected #{this} to be below #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('least', assertLeast);\n  Assertion.addMethod('gte', assertLeast);\n  Assertion.addMethod('greaterThanOrEqual', assertLeast);\n\n  /**\n   * ### .below(n[, msg])\n   *\n   * Asserts that the target is a number or a date less than the given number or date `n` respectively.\n   * However, it's often best to assert that the target is equal to its expected\n   * value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.below(2); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is less than the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.below(4); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.length(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.below(4); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.below`.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.not.be.below(1); // Not recommended\n   *\n   * `.below` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(2).to.be.below(1, 'nooo why fail??');\n   *     expect(2, 'nooo why fail??').to.be.below(1);\n   *\n   * The aliases `.lt` and `.lessThan` can be used interchangeably with\n   * `.below`.\n   *\n   * @name below\n   * @alias lt\n   * @alias lessThan\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertBelow (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , errorMessage\n      , shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to below must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to below must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount < n\n        , 'expected #{this} to have a ' + descriptor + ' below #{exp} but got #{act}'\n        , 'expected #{this} to not have a ' + descriptor + ' below #{exp}'\n        , n\n        , itemsCount\n      );\n    } else {\n      this.assert(\n          obj < n\n        , 'expected #{this} to be below #{exp}'\n        , 'expected #{this} to be at least #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('below', assertBelow);\n  Assertion.addMethod('lt', assertBelow);\n  Assertion.addMethod('lessThan', assertBelow);\n\n  /**\n   * ### .most(n[, msg])\n   *\n   * Asserts that the target is a number or a date less than or equal to the given number\n   * or date `n` respectively. However, it's often best to assert that the target is equal to its\n   * expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.at.most(2); // Not recommended\n   *     expect(1).to.be.at.most(1); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is less than or equal to the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.at.most(4); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.at.most(4); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.most`.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.not.be.at.most(1); // Not recommended\n   *\n   * `.most` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(2).to.be.at.most(1, 'nooo why fail??');\n   *     expect(2, 'nooo why fail??').to.be.at.most(1);\n   *\n   * The aliases `.lte` and `.lessThanOrEqual` can be used interchangeably with\n   * `.most`.\n   *\n   * @name most\n   * @alias lte\n   * @alias lessThanOrEqual\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertMost (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , errorMessage\n      , shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to most must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to most must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount <= n\n        , 'expected #{this} to have a ' + descriptor + ' at most #{exp} but got #{act}'\n        , 'expected #{this} to have a ' + descriptor + ' above #{exp}'\n        , n\n        , itemsCount\n      );\n    } else {\n      this.assert(\n          obj <= n\n        , 'expected #{this} to be at most #{exp}'\n        , 'expected #{this} to be above #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('most', assertMost);\n  Assertion.addMethod('lte', assertMost);\n  Assertion.addMethod('lessThanOrEqual', assertMost);\n\n  /**\n   * ### .within(start, finish[, msg])\n   *\n   * Asserts that the target is a number or a date greater than or equal to the given\n   * number or date `start`, and less than or equal to the given number or date `finish` respectively.\n   * However, it's often best to assert that the target is equal to its expected\n   * value.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.be.within(1, 3); // Not recommended\n   *     expect(2).to.be.within(2, 3); // Not recommended\n   *     expect(2).to.be.within(1, 2); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is greater than or equal to the given number `start`, and less\n   * than or equal to the given number `finish`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.within(2, 4); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.within(2, 4); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.within`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.within(2, 4); // Not recommended\n   *\n   * `.within` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(4).to.be.within(1, 3, 'nooo why fail??');\n   *     expect(4, 'nooo why fail??').to.be.within(1, 3);\n   *\n   * @name within\n   * @param {Number} start lower bound inclusive\n   * @param {Number} finish upper bound inclusive\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('within', function (start, finish, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , startType = _.type(start).toLowerCase()\n      , finishType = _.type(finish).toLowerCase()\n      , errorMessage\n      , shouldThrow = true\n      , range = (startType === 'date' && finishType === 'date')\n          ? start.toISOString() + '..' + finish.toISOString()\n          : start + '..' + finish;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && (startType !== 'date' || finishType !== 'date'))) {\n      errorMessage = msgPrefix + 'the arguments to within must be dates';\n    } else if ((startType !== 'number' || finishType !== 'number') && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the arguments to within must be numbers';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount >= start && itemsCount <= finish\n        , 'expected #{this} to have a ' + descriptor + ' within ' + range\n        , 'expected #{this} to not have a ' + descriptor + ' within ' + range\n      );\n    } else {\n      this.assert(\n          obj >= start && obj <= finish\n        , 'expected #{this} to be within ' + range\n        , 'expected #{this} to not be within ' + range\n      );\n    }\n  });\n\n  /**\n   * ### .instanceof(constructor[, msg])\n   *\n   * Asserts that the target is an instance of the given `constructor`.\n   *\n   *     function Cat () { }\n   *\n   *     expect(new Cat()).to.be.an.instanceof(Cat);\n   *     expect([1, 2]).to.be.an.instanceof(Array);\n   *\n   * Add `.not` earlier in the chain to negate `.instanceof`.\n   *\n   *     expect({a: 1}).to.not.be.an.instanceof(Array);\n   *\n   * `.instanceof` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(1).to.be.an.instanceof(Array, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.an.instanceof(Array);\n   *\n   * Due to limitations in ES5, `.instanceof` may not always work as expected\n   * when using a transpiler such as Babel or TypeScript. In particular, it may\n   * produce unexpected results when subclassing built-in object such as\n   * `Array`, `Error`, and `Map`. See your transpiler's docs for details:\n   *\n   * - ([Babel](https://babeljs.io/docs/usage/caveats/#classes))\n   * - ([TypeScript](https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work))\n   *\n   * The alias `.instanceOf` can be used interchangeably with `.instanceof`.\n   *\n   * @name instanceof\n   * @param {Constructor} constructor\n   * @param {String} msg _optional_\n   * @alias instanceOf\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertInstanceOf (constructor, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var target = flag(this, 'object')\n    var ssfi = flag(this, 'ssfi');\n    var flagMsg = flag(this, 'message');\n\n    try {\n      var isInstanceOf = target instanceof constructor;\n    } catch (err) {\n      if (err instanceof TypeError) {\n        flagMsg = flagMsg ? flagMsg + ': ' : '';\n        throw new AssertionError(\n          flagMsg + 'The instanceof assertion needs a constructor but '\n            + _.type(constructor) + ' was given.',\n          undefined,\n          ssfi\n        );\n      }\n      throw err;\n    }\n\n    var name = _.getName(constructor);\n    if (name === null) {\n      name = 'an unnamed constructor';\n    }\n\n    this.assert(\n        isInstanceOf\n      , 'expected #{this} to be an instance of ' + name\n      , 'expected #{this} to not be an instance of ' + name\n    );\n  };\n\n  Assertion.addMethod('instanceof', assertInstanceOf);\n  Assertion.addMethod('instanceOf', assertInstanceOf);\n\n  /**\n   * ### .property(name[, val[, msg]])\n   *\n   * Asserts that the target has a property with the given key `name`.\n   *\n   *     expect({a: 1}).to.have.property('a');\n   *\n   * When `val` is provided, `.property` also asserts that the property's value\n   * is equal to the given `val`.\n   *\n   *     expect({a: 1}).to.have.property('a', 1);\n   *\n   * By default, strict (`===`) equality is used. Add `.deep` earlier in the\n   * chain to use deep equality instead. See the `deep-eql` project page for\n   * info on the deep equality algorithm: https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object deeply (but not strictly) has property `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});\n   *     expect({x: {a: 1}}).to.not.have.property('x', {a: 1});\n   *\n   * The target's enumerable and non-enumerable properties are always included\n   * in the search. By default, both own and inherited properties are included.\n   * Add `.own` earlier in the chain to exclude inherited properties from the\n   * search.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     expect({a: 1}).to.have.own.property('a');\n   *     expect({a: 1}).to.have.own.property('a', 1);\n   *     expect({a: 1}).to.have.property('b');\n   *     expect({a: 1}).to.not.have.own.property('b');\n   *\n   * `.deep` and `.own` can be combined.\n   *\n   *     expect({x: {a: 1}}).to.have.deep.own.property('x', {a: 1});\n   *\n   * Add `.nested` earlier in the chain to enable dot- and bracket-notation when\n   * referencing nested properties.\n   *\n   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');\n   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]', 'y');\n   *\n   * If `.` or `[]` are part of an actual property name, they can be escaped by\n   * adding two backslashes before them.\n   *\n   *     expect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\\\.a.\\\\[b\\\\]');\n   *\n   * `.deep` and `.nested` can be combined.\n   *\n   *     expect({a: {b: [{c: 3}]}})\n   *       .to.have.deep.nested.property('a.b[0]', {c: 3});\n   *\n   * `.own` and `.nested` cannot be combined.\n   *\n   * Add `.not` earlier in the chain to negate `.property`.\n   *\n   *     expect({a: 1}).to.not.have.property('b');\n   *\n   * However, it's dangerous to negate `.property` when providing `val`. The\n   * problem is that it creates uncertain expectations by asserting that the\n   * target either doesn't have a property with the given key `name`, or that it\n   * does have a property with the given key `name` but its value isn't equal to\n   * the given `val`. It's often best to identify the exact output that's\n   * expected, and then write an assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to have a property with the given key\n   * `name`, it's often best to assert exactly that.\n   *\n   *     expect({b: 2}).to.not.have.property('a'); // Recommended\n   *     expect({b: 2}).to.not.have.property('a', 1); // Not recommended\n   *\n   * When the target is expected to have a property with the given key `name`,\n   * it's often best to assert that the property has its expected value, rather\n   * than asserting that it doesn't have one of many unexpected values.\n   *\n   *     expect({a: 3}).to.have.property('a', 3); // Recommended\n   *     expect({a: 3}).to.not.have.property('a', 1); // Not recommended\n   *\n   * `.property` changes the target of any assertions that follow in the chain\n   * to be the value of the property from the original target object.\n   *\n   *     expect({a: 1}).to.have.property('a').that.is.a('number');\n   *\n   * `.property` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing `val`, only use the\n   * second form.\n   *\n   *     // Recommended\n   *     expect({a: 1}).to.have.property('a', 2, 'nooo why fail??');\n   *     expect({a: 1}, 'nooo why fail??').to.have.property('a', 2);\n   *     expect({a: 1}, 'nooo why fail??').to.have.property('b');\n   *\n   *     // Not recommended\n   *     expect({a: 1}).to.have.property('b', undefined, 'nooo why fail??');\n   *\n   * The above assertion isn't the same thing as not providing `val`. Instead,\n   * it's asserting that the target object has a `b` property that's equal to\n   * `undefined`.\n   *\n   * The assertions `.ownProperty` and `.haveOwnProperty` can be used\n   * interchangeably with `.own.property`.\n   *\n   * @name property\n   * @param {String} name\n   * @param {Mixed} val (optional)\n   * @param {String} msg _optional_\n   * @returns value of property for chaining\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertProperty (name, val, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var isNested = flag(this, 'nested')\n      , isOwn = flag(this, 'own')\n      , flagMsg = flag(this, 'message')\n      , obj = flag(this, 'object')\n      , ssfi = flag(this, 'ssfi')\n      , nameType = typeof name;\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n    if (isNested) {\n      if (nameType !== 'string') {\n        throw new AssertionError(\n          flagMsg + 'the argument to property must be a string when using nested syntax',\n          undefined,\n          ssfi\n        );\n      }\n    } else {\n      if (nameType !== 'string' && nameType !== 'number' && nameType !== 'symbol') {\n        throw new AssertionError(\n          flagMsg + 'the argument to property must be a string, number, or symbol',\n          undefined,\n          ssfi\n        );\n      }\n    }\n\n    if (isNested && isOwn) {\n      throw new AssertionError(\n        flagMsg + 'The \"nested\" and \"own\" flags cannot be combined.',\n        undefined,\n        ssfi\n      );\n    }\n\n    if (obj === null || obj === undefined) {\n      throw new AssertionError(\n        flagMsg + 'Target cannot be null or undefined.',\n        undefined,\n        ssfi\n      );\n    }\n\n    var isDeep = flag(this, 'deep')\n      , negate = flag(this, 'negate')\n      , pathInfo = isNested ? _.getPathInfo(obj, name) : null\n      , value = isNested ? pathInfo.value : obj[name];\n\n    var descriptor = '';\n    if (isDeep) descriptor += 'deep ';\n    if (isOwn) descriptor += 'own ';\n    if (isNested) descriptor += 'nested ';\n    descriptor += 'property ';\n\n    var hasProperty;\n    if (isOwn) hasProperty = Object.prototype.hasOwnProperty.call(obj, name);\n    else if (isNested) hasProperty = pathInfo.exists;\n    else hasProperty = _.hasProperty(obj, name);\n\n    // When performing a negated assertion for both name and val, merely having\n    // a property with the given name isn't enough to cause the assertion to\n    // fail. It must both have a property with the given name, and the value of\n    // that property must equal the given val. Therefore, skip this assertion in\n    // favor of the next.\n    if (!negate || arguments.length === 1) {\n      this.assert(\n          hasProperty\n        , 'expected #{this} to have ' + descriptor + _.inspect(name)\n        , 'expected #{this} to not have ' + descriptor + _.inspect(name));\n    }\n\n    if (arguments.length > 1) {\n      this.assert(\n          hasProperty && (isDeep ? _.eql(val, value) : val === value)\n        , 'expected #{this} to have ' + descriptor + _.inspect(name) + ' of #{exp}, but got #{act}'\n        , 'expected #{this} to not have ' + descriptor + _.inspect(name) + ' of #{act}'\n        , val\n        , value\n      );\n    }\n\n    flag(this, 'object', value);\n  }\n\n  Assertion.addMethod('property', assertProperty);\n\n  function assertOwnProperty (name, value, msg) {\n    flag(this, 'own', true);\n    assertProperty.apply(this, arguments);\n  }\n\n  Assertion.addMethod('ownProperty', assertOwnProperty);\n  Assertion.addMethod('haveOwnProperty', assertOwnProperty);\n\n  /**\n   * ### .ownPropertyDescriptor(name[, descriptor[, msg]])\n   *\n   * Asserts that the target has its own property descriptor with the given key\n   * `name`. Enumerable and non-enumerable properties are included in the\n   * search.\n   *\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a');\n   *\n   * When `descriptor` is provided, `.ownPropertyDescriptor` also asserts that\n   * the property's descriptor is deeply equal to the given `descriptor`. See\n   * the `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 1,\n   *     });\n   *\n   * Add `.not` earlier in the chain to negate `.ownPropertyDescriptor`.\n   *\n   *     expect({a: 1}).to.not.have.ownPropertyDescriptor('b');\n   *\n   * However, it's dangerous to negate `.ownPropertyDescriptor` when providing\n   * a `descriptor`. The problem is that it creates uncertain expectations by\n   * asserting that the target either doesn't have a property descriptor with\n   * the given key `name`, or that it does have a property descriptor with the\n   * given key `name` but it\u2019s not deeply equal to the given `descriptor`. It's\n   * often best to identify the exact output that's expected, and then write an\n   * assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to have a property descriptor with the given\n   * key `name`, it's often best to assert exactly that.\n   *\n   *     // Recommended\n   *     expect({b: 2}).to.not.have.ownPropertyDescriptor('a');\n   *\n   *     // Not recommended\n   *     expect({b: 2}).to.not.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 1,\n   *     });\n   *\n   * When the target is expected to have a property descriptor with the given\n   * key `name`, it's often best to assert that the property has its expected\n   * descriptor, rather than asserting that it doesn't have one of many\n   * unexpected descriptors.\n   *\n   *     // Recommended\n   *     expect({a: 3}).to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 3,\n   *     });\n   *\n   *     // Not recommended\n   *     expect({a: 3}).to.not.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 1,\n   *     });\n   *\n   * `.ownPropertyDescriptor` changes the target of any assertions that follow\n   * in the chain to be the value of the property descriptor from the original\n   * target object.\n   *\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a')\n   *       .that.has.property('enumerable', true);\n   *\n   * `.ownPropertyDescriptor` accepts an optional `msg` argument which is a\n   * custom error message to show when the assertion fails. The message can also\n   * be given as the second argument to `expect`. When not providing\n   * `descriptor`, only use the second form.\n   *\n   *     // Recommended\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 2,\n   *     }, 'nooo why fail??');\n   *\n   *     // Recommended\n   *     expect({a: 1}, 'nooo why fail??').to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 2,\n   *     });\n   *\n   *     // Recommended\n   *     expect({a: 1}, 'nooo why fail??').to.have.ownPropertyDescriptor('b');\n   *\n   *     // Not recommended\n   *     expect({a: 1})\n   *       .to.have.ownPropertyDescriptor('b', undefined, 'nooo why fail??');\n   *\n   * The above assertion isn't the same thing as not providing `descriptor`.\n   * Instead, it's asserting that the target object has a `b` property\n   * descriptor that's deeply equal to `undefined`.\n   *\n   * The alias `.haveOwnPropertyDescriptor` can be used interchangeably with\n   * `.ownPropertyDescriptor`.\n   *\n   * @name ownPropertyDescriptor\n   * @alias haveOwnPropertyDescriptor\n   * @param {String} name\n   * @param {Object} descriptor _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertOwnPropertyDescriptor (name, descriptor, msg) {\n    if (typeof descriptor === 'string') {\n      msg = descriptor;\n      descriptor = null;\n    }\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var actualDescriptor = Object.getOwnPropertyDescriptor(Object(obj), name);\n    if (actualDescriptor && descriptor) {\n      this.assert(\n          _.eql(descriptor, actualDescriptor)\n        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to match ' + _.inspect(descriptor) + ', got ' + _.inspect(actualDescriptor)\n        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to not match ' + _.inspect(descriptor)\n        , descriptor\n        , actualDescriptor\n        , true\n      );\n    } else {\n      this.assert(\n          actualDescriptor\n        , 'expected #{this} to have an own property descriptor for ' + _.inspect(name)\n        , 'expected #{this} to not have an own property descriptor for ' + _.inspect(name)\n      );\n    }\n    flag(this, 'object', actualDescriptor);\n  }\n\n  Assertion.addMethod('ownPropertyDescriptor', assertOwnPropertyDescriptor);\n  Assertion.addMethod('haveOwnPropertyDescriptor', assertOwnPropertyDescriptor);\n\n  /**\n   * ### .lengthOf(n[, msg])\n   *\n   * Asserts that the target's `length` or `size` is equal to the given number\n   * `n`.\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3);\n   *     expect('foo').to.have.lengthOf(3);\n   *     expect(new Set([1, 2, 3])).to.have.lengthOf(3);\n   *     expect(new Map([['a', 1], ['b', 2], ['c', 3]])).to.have.lengthOf(3);\n   *\n   * Add `.not` earlier in the chain to negate `.lengthOf`. However, it's often\n   * best to assert that the target's `length` property is equal to its expected\n   * value, rather than not equal to one of many unexpected values.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.not.have.lengthOf(4); // Not recommended\n   *\n   * `.lengthOf` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(2, 'nooo why fail??');\n   *     expect([1, 2, 3], 'nooo why fail??').to.have.lengthOf(2);\n   *\n   * `.lengthOf` can also be used as a language chain, causing all `.above`,\n   * `.below`, `.least`, `.most`, and `.within` assertions that follow in the\n   * chain to use the target's `length` property as the target. However, it's\n   * often best to assert that the target's `length` property is equal to its\n   * expected length, rather than asserting that its `length` property falls\n   * within some range of values.\n   *\n   *     // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf(3);\n   *\n   *     // Not recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.above(2);\n   *     expect([1, 2, 3]).to.have.lengthOf.below(4);\n   *     expect([1, 2, 3]).to.have.lengthOf.at.least(3);\n   *     expect([1, 2, 3]).to.have.lengthOf.at.most(3);\n   *     expect([1, 2, 3]).to.have.lengthOf.within(2,4);\n   *\n   * Due to a compatibility issue, the alias `.length` can't be chained directly\n   * off of an uninvoked method such as `.a`. Therefore, `.length` can't be used\n   * interchangeably with `.lengthOf` in every situation. It's recommended to\n   * always use `.lengthOf` instead of `.length`.\n   *\n   *     expect([1, 2, 3]).to.have.a.length(3); // incompatible; throws error\n   *     expect([1, 2, 3]).to.have.a.lengthOf(3);  // passes as expected\n   *\n   * @name lengthOf\n   * @alias length\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertLengthChain () {\n    flag(this, 'doLength', true);\n  }\n\n  function assertLength (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , objType = _.type(obj).toLowerCase()\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi')\n      , descriptor = 'length'\n      , itemsCount;\n\n    switch (objType) {\n      case 'map':\n      case 'set':\n        descriptor = 'size';\n        itemsCount = obj.size;\n        break;\n      default:\n        new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n        itemsCount = obj.length;\n    }\n\n    this.assert(\n        itemsCount == n\n      , 'expected #{this} to have a ' + descriptor + ' of #{exp} but got #{act}'\n      , 'expected #{this} to not have a ' + descriptor + ' of #{act}'\n      , n\n      , itemsCount\n    );\n  }\n\n  Assertion.addChainableMethod('length', assertLength, assertLengthChain);\n  Assertion.addChainableMethod('lengthOf', assertLength, assertLengthChain);\n\n  /**\n   * ### .match(re[, msg])\n   *\n   * Asserts that the target matches the given regular expression `re`.\n   *\n   *     expect('foobar').to.match(/^foo/);\n   *\n   * Add `.not` earlier in the chain to negate `.match`.\n   *\n   *     expect('foobar').to.not.match(/taco/);\n   *\n   * `.match` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect('foobar').to.match(/taco/, 'nooo why fail??');\n   *     expect('foobar', 'nooo why fail??').to.match(/taco/);\n   *\n   * The alias `.matches` can be used interchangeably with `.match`.\n   *\n   * @name match\n   * @alias matches\n   * @param {RegExp} re\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n  function assertMatch(re, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    this.assert(\n        re.exec(obj)\n      , 'expected #{this} to match ' + re\n      , 'expected #{this} not to match ' + re\n    );\n  }\n\n  Assertion.addMethod('match', assertMatch);\n  Assertion.addMethod('matches', assertMatch);\n\n  /**\n   * ### .string(str[, msg])\n   *\n   * Asserts that the target string contains the given substring `str`.\n   *\n   *     expect('foobar').to.have.string('bar');\n   *\n   * Add `.not` earlier in the chain to negate `.string`.\n   *\n   *     expect('foobar').to.not.have.string('taco');\n   *\n   * `.string` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect('foobar').to.have.string('taco', 'nooo why fail??');\n   *     expect('foobar', 'nooo why fail??').to.have.string('taco');\n   *\n   * @name string\n   * @param {String} str\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('string', function (str, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(obj, flagMsg, ssfi, true).is.a('string');\n\n    this.assert(\n        ~obj.indexOf(str)\n      , 'expected #{this} to contain ' + _.inspect(str)\n      , 'expected #{this} to not contain ' + _.inspect(str)\n    );\n  });\n\n  /**\n   * ### .keys(key1[, key2[, ...]])\n   *\n   * Asserts that the target object, array, map, or set has the given keys. Only\n   * the target's own inherited properties are included in the search.\n   *\n   * When the target is an object or array, keys can be provided as one or more\n   * string arguments, a single array argument, or a single object argument. In\n   * the latter case, only the keys in the given object matter; the values are\n   * ignored.\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n   *     expect(['x', 'y']).to.have.all.keys(0, 1);\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys(['a', 'b']);\n   *     expect(['x', 'y']).to.have.all.keys([0, 1]);\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys({a: 4, b: 5}); // ignore 4 and 5\n   *     expect(['x', 'y']).to.have.all.keys({0: 4, 1: 5}); // ignore 4 and 5\n   *\n   * When the target is a map or set, each key must be provided as a separate\n   * argument.\n   *\n   *     expect(new Map([['a', 1], ['b', 2]])).to.have.all.keys('a', 'b');\n   *     expect(new Set(['a', 'b'])).to.have.all.keys('a', 'b');\n   *\n   * Because `.keys` does different things based on the target's type, it's\n   * important to check the target's type before using `.keys`. See the `.a` doc\n   * for info on testing a target's type.\n   *\n   *     expect({a: 1, b: 2}).to.be.an('object').that.has.all.keys('a', 'b');\n   *\n   * By default, strict (`===`) equality is used to compare keys of maps and\n   * sets. Add `.deep` earlier in the chain to use deep equality instead. See\n   * the `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target set deeply (but not strictly) has key `{a: 1}`\n   *     expect(new Set([{a: 1}])).to.have.all.deep.keys([{a: 1}]);\n   *     expect(new Set([{a: 1}])).to.not.have.all.keys([{a: 1}]);\n   *\n   * By default, the target must have all of the given keys and no more. Add\n   * `.any` earlier in the chain to only require that the target have at least\n   * one of the given keys. Also, add `.not` earlier in the chain to negate\n   * `.keys`. It's often best to add `.any` when negating `.keys`, and to use\n   * `.all` when asserting `.keys` without negation.\n   *\n   * When negating `.keys`, `.any` is preferred because `.not.any.keys` asserts\n   * exactly what's expected of the output, whereas `.not.all.keys` creates\n   * uncertain expectations.\n   *\n   *     // Recommended; asserts that target doesn't have any of the given keys\n   *     expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\n   *\n   *     // Not recommended; asserts that target doesn't have all of the given\n   *     // keys but may or may not have some of them\n   *     expect({a: 1, b: 2}).to.not.have.all.keys('c', 'd');\n   *\n   * When asserting `.keys` without negation, `.all` is preferred because\n   * `.all.keys` asserts exactly what's expected of the output, whereas\n   * `.any.keys` creates uncertain expectations.\n   *\n   *     // Recommended; asserts that target has all the given keys\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n   *\n   *     // Not recommended; asserts that target has at least one of the given\n   *     // keys but may or may not have more of them\n   *     expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\n   *\n   * Note that `.all` is used by default when neither `.all` nor `.any` appear\n   * earlier in the chain. However, it's often best to add `.all` anyway because\n   * it improves readability.\n   *\n   *     // Both assertions are identical\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b'); // Recommended\n   *     expect({a: 1, b: 2}).to.have.keys('a', 'b'); // Not recommended\n   *\n   * Add `.include` earlier in the chain to require that the target's keys be a\n   * superset of the expected keys, rather than identical sets.\n   *\n   *     // Target object's keys are a superset of ['a', 'b'] but not identical\n   *     expect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');\n   *     expect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');\n   *\n   * However, if `.any` and `.include` are combined, only the `.any` takes\n   * effect. The `.include` is ignored in this case.\n   *\n   *     // Both assertions are identical\n   *     expect({a: 1}).to.have.any.keys('a', 'b');\n   *     expect({a: 1}).to.include.any.keys('a', 'b');\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({a: 1}, 'nooo why fail??').to.have.key('b');\n   *\n   * The alias `.key` can be used interchangeably with `.keys`.\n   *\n   * @name keys\n   * @alias key\n   * @param {...String|Array|Object} keys\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertKeys (keys) {\n    var obj = flag(this, 'object')\n      , objType = _.type(obj)\n      , keysType = _.type(keys)\n      , ssfi = flag(this, 'ssfi')\n      , isDeep = flag(this, 'deep')\n      , str\n      , deepStr = ''\n      , actual\n      , ok = true\n      , flagMsg = flag(this, 'message');\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n    var mixedArgsMsg = flagMsg + 'when testing keys against an object or an array you must give a single Array|Object|String argument or multiple String arguments';\n\n    if (objType === 'Map' || objType === 'Set') {\n      deepStr = isDeep ? 'deeply ' : '';\n      actual = [];\n\n      // Map and Set '.keys' aren't supported in IE 11. Therefore, use .forEach.\n      obj.forEach(function (val, key) { actual.push(key) });\n\n      if (keysType !== 'Array') {\n        keys = Array.prototype.slice.call(arguments);\n      }\n    } else {\n      actual = _.getOwnEnumerableProperties(obj);\n\n      switch (keysType) {\n        case 'Array':\n          if (arguments.length > 1) {\n            throw new AssertionError(mixedArgsMsg, undefined, ssfi);\n          }\n          break;\n        case 'Object':\n          if (arguments.length > 1) {\n            throw new AssertionError(mixedArgsMsg, undefined, ssfi);\n          }\n          keys = Object.keys(keys);\n          break;\n        default:\n          keys = Array.prototype.slice.call(arguments);\n      }\n\n      // Only stringify non-Symbols because Symbols would become \"Symbol()\"\n      keys = keys.map(function (val) {\n        return typeof val === 'symbol' ? val : String(val);\n      });\n    }\n\n    if (!keys.length) {\n      throw new AssertionError(flagMsg + 'keys required', undefined, ssfi);\n    }\n\n    var len = keys.length\n      , any = flag(this, 'any')\n      , all = flag(this, 'all')\n      , expected = keys;\n\n    if (!any && !all) {\n      all = true;\n    }\n\n    // Has any\n    if (any) {\n      ok = expected.some(function(expectedKey) {\n        return actual.some(function(actualKey) {\n          if (isDeep) {\n            return _.eql(expectedKey, actualKey);\n          } else {\n            return expectedKey === actualKey;\n          }\n        });\n      });\n    }\n\n    // Has all\n    if (all) {\n      ok = expected.every(function(expectedKey) {\n        return actual.some(function(actualKey) {\n          if (isDeep) {\n            return _.eql(expectedKey, actualKey);\n          } else {\n            return expectedKey === actualKey;\n          }\n        });\n      });\n\n      if (!flag(this, 'contains')) {\n        ok = ok && keys.length == actual.length;\n      }\n    }\n\n    // Key string\n    if (len > 1) {\n      keys = keys.map(function(key) {\n        return _.inspect(key);\n      });\n      var last = keys.pop();\n      if (all) {\n        str = keys.join(', ') + ', and ' + last;\n      }\n      if (any) {\n        str = keys.join(', ') + ', or ' + last;\n      }\n    } else {\n      str = _.inspect(keys[0]);\n    }\n\n    // Form\n    str = (len > 1 ? 'keys ' : 'key ') + str;\n\n    // Have / include\n    str = (flag(this, 'contains') ? 'contain ' : 'have ') + str;\n\n    // Assertion\n    this.assert(\n        ok\n      , 'expected #{this} to ' + deepStr + str\n      , 'expected #{this} to not ' + deepStr + str\n      , expected.slice(0).sort(_.compareByInspect)\n      , actual.sort(_.compareByInspect)\n      , true\n    );\n  }\n\n  Assertion.addMethod('keys', assertKeys);\n  Assertion.addMethod('key', assertKeys);\n\n  /**\n   * ### .throw([errorLike], [errMsgMatcher], [msg])\n   *\n   * When no arguments are provided, `.throw` invokes the target function and\n   * asserts that an error is thrown.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw();\n   *\n   * When one argument is provided, and it's an error constructor, `.throw`\n   * invokes the target function and asserts that an error is thrown that's an\n   * instance of that error constructor.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw(TypeError);\n   *\n   * When one argument is provided, and it's an error instance, `.throw` invokes\n   * the target function and asserts that an error is thrown that's strictly\n   * (`===`) equal to that error instance.\n   *\n   *     var err = new TypeError('Illegal salmon!');\n   *     var badFn = function () { throw err; };\n   *\n   *     expect(badFn).to.throw(err);\n   *\n   * When one argument is provided, and it's a string, `.throw` invokes the\n   * target function and asserts that an error is thrown with a message that\n   * contains that string.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw('salmon');\n   *\n   * When one argument is provided, and it's a regular expression, `.throw`\n   * invokes the target function and asserts that an error is thrown with a\n   * message that matches that regular expression.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw(/salmon/);\n   *\n   * When two arguments are provided, and the first is an error instance or\n   * constructor, and the second is a string or regular expression, `.throw`\n   * invokes the function and asserts that an error is thrown that fulfills both\n   * conditions as described above.\n   *\n   *     var err = new TypeError('Illegal salmon!');\n   *     var badFn = function () { throw err; };\n   *\n   *     expect(badFn).to.throw(TypeError, 'salmon');\n   *     expect(badFn).to.throw(TypeError, /salmon/);\n   *     expect(badFn).to.throw(err, 'salmon');\n   *     expect(badFn).to.throw(err, /salmon/);\n   *\n   * Add `.not` earlier in the chain to negate `.throw`.\n   *\n   *     var goodFn = function () {};\n   *\n   *     expect(goodFn).to.not.throw();\n   *\n   * However, it's dangerous to negate `.throw` when providing any arguments.\n   * The problem is that it creates uncertain expectations by asserting that the\n   * target either doesn't throw an error, or that it throws an error but of a\n   * different type than the given type, or that it throws an error of the given\n   * type but with a message that doesn't include the given string. It's often\n   * best to identify the exact output that's expected, and then write an\n   * assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to throw an error, it's often best to assert\n   * exactly that.\n   *\n   *     var goodFn = function () {};\n   *\n   *     expect(goodFn).to.not.throw(); // Recommended\n   *     expect(goodFn).to.not.throw(ReferenceError, 'x'); // Not recommended\n   *\n   * When the target is expected to throw an error, it's often best to assert\n   * that the error is of its expected type, and has a message that includes an\n   * expected string, rather than asserting that it doesn't have one of many\n   * unexpected types, and doesn't have a message that includes some string.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw(TypeError, 'salmon'); // Recommended\n   *     expect(badFn).to.not.throw(ReferenceError, 'x'); // Not recommended\n   *\n   * `.throw` changes the target of any assertions that follow in the chain to\n   * be the error object that's thrown.\n   *\n   *     var err = new TypeError('Illegal salmon!');\n   *     err.code = 42;\n   *     var badFn = function () { throw err; };\n   *\n   *     expect(badFn).to.throw(TypeError).with.property('code', 42);\n   *\n   * `.throw` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`. When not providing two arguments, always use\n   * the second form.\n   *\n   *     var goodFn = function () {};\n   *\n   *     expect(goodFn).to.throw(TypeError, 'x', 'nooo why fail??');\n   *     expect(goodFn, 'nooo why fail??').to.throw();\n   *\n   * Due to limitations in ES5, `.throw` may not always work as expected when\n   * using a transpiler such as Babel or TypeScript. In particular, it may\n   * produce unexpected results when subclassing the built-in `Error` object and\n   * then passing the subclassed constructor to `.throw`. See your transpiler's\n   * docs for details:\n   *\n   * - ([Babel](https://babeljs.io/docs/usage/caveats/#classes))\n   * - ([TypeScript](https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work))\n   *\n   * Beware of some common mistakes when using the `throw` assertion. One common\n   * mistake is to accidentally invoke the function yourself instead of letting\n   * the `throw` assertion invoke the function for you. For example, when\n   * testing if a function named `fn` throws, provide `fn` instead of `fn()` as\n   * the target for the assertion.\n   *\n   *     expect(fn).to.throw();     // Good! Tests `fn` as desired\n   *     expect(fn()).to.throw();   // Bad! Tests result of `fn()`, not `fn`\n   *\n   * If you need to assert that your function `fn` throws when passed certain\n   * arguments, then wrap a call to `fn` inside of another function.\n   *\n   *     expect(function () { fn(42); }).to.throw();  // Function expression\n   *     expect(() => fn(42)).to.throw();             // ES6 arrow function\n   *\n   * Another common mistake is to provide an object method (or any stand-alone\n   * function that relies on `this`) as the target of the assertion. Doing so is\n   * problematic because the `this` context will be lost when the function is\n   * invoked by `.throw`; there's no way for it to know what `this` is supposed\n   * to be. There are two ways around this problem. One solution is to wrap the\n   * method or function call inside of another function. Another solution is to\n   * use `bind`.\n   *\n   *     expect(function () { cat.meow(); }).to.throw();  // Function expression\n   *     expect(() => cat.meow()).to.throw();             // ES6 arrow function\n   *     expect(cat.meow.bind(cat)).to.throw();           // Bind\n   *\n   * Finally, it's worth mentioning that it's a best practice in JavaScript to\n   * only throw `Error` and derivatives of `Error` such as `ReferenceError`,\n   * `TypeError`, and user-defined objects that extend `Error`. No other type of\n   * value will generate a stack trace when initialized. With that said, the\n   * `throw` assertion does technically support any type of value being thrown,\n   * not just `Error` and its derivatives.\n   *\n   * The aliases `.throws` and `.Throw` can be used interchangeably with\n   * `.throw`.\n   *\n   * @name throw\n   * @alias throws\n   * @alias Throw\n   * @param {Error|ErrorConstructor} errorLike\n   * @param {String|RegExp} errMsgMatcher error message\n   * @param {String} msg _optional_\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @returns error for chaining (null if no error)\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertThrows (errorLike, errMsgMatcher, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , ssfi = flag(this, 'ssfi')\n      , flagMsg = flag(this, 'message')\n      , negate = flag(this, 'negate') || false;\n    new Assertion(obj, flagMsg, ssfi, true).is.a('function');\n\n    if (errorLike instanceof RegExp || typeof errorLike === 'string') {\n      errMsgMatcher = errorLike;\n      errorLike = null;\n    }\n\n    var caughtErr;\n    try {\n      obj();\n    } catch (err) {\n      caughtErr = err;\n    }\n\n    // If we have the negate flag enabled and at least one valid argument it means we do expect an error\n    // but we want it to match a given set of criteria\n    var everyArgIsUndefined = errorLike === undefined && errMsgMatcher === undefined;\n\n    // If we've got the negate flag enabled and both args, we should only fail if both aren't compatible\n    // See Issue #551 and PR #683@GitHub\n    var everyArgIsDefined = Boolean(errorLike && errMsgMatcher);\n    var errorLikeFail = false;\n    var errMsgMatcherFail = false;\n\n    // Checking if error was thrown\n    if (everyArgIsUndefined || !everyArgIsUndefined && !negate) {\n      // We need this to display results correctly according to their types\n      var errorLikeString = 'an error';\n      if (errorLike instanceof Error) {\n        errorLikeString = '#{exp}';\n      } else if (errorLike) {\n        errorLikeString = _.checkError.getConstructorName(errorLike);\n      }\n\n      this.assert(\n          caughtErr\n        , 'expected #{this} to throw ' + errorLikeString\n        , 'expected #{this} to not throw an error but #{act} was thrown'\n        , errorLike && errorLike.toString()\n        , (caughtErr instanceof Error ?\n            caughtErr.toString() : (typeof caughtErr === 'string' ? caughtErr : caughtErr &&\n                                    _.checkError.getConstructorName(caughtErr)))\n      );\n    }\n\n    if (errorLike && caughtErr) {\n      // We should compare instances only if `errorLike` is an instance of `Error`\n      if (errorLike instanceof Error) {\n        var isCompatibleInstance = _.checkError.compatibleInstance(caughtErr, errorLike);\n\n        if (isCompatibleInstance === negate) {\n          // These checks were created to ensure we won't fail too soon when we've got both args and a negate\n          // See Issue #551 and PR #683@GitHub\n          if (everyArgIsDefined && negate) {\n            errorLikeFail = true;\n          } else {\n            this.assert(\n                negate\n              , 'expected #{this} to throw #{exp} but #{act} was thrown'\n              , 'expected #{this} to not throw #{exp}' + (caughtErr && !negate ? ' but #{act} was thrown' : '')\n              , errorLike.toString()\n              , caughtErr.toString()\n            );\n          }\n        }\n      }\n\n      var isCompatibleConstructor = _.checkError.compatibleConstructor(caughtErr, errorLike);\n      if (isCompatibleConstructor === negate) {\n        if (everyArgIsDefined && negate) {\n            errorLikeFail = true;\n        } else {\n          this.assert(\n              negate\n            , 'expected #{this} to throw #{exp} but #{act} was thrown'\n            , 'expected #{this} to not throw #{exp}' + (caughtErr ? ' but #{act} was thrown' : '')\n            , (errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike))\n            , (caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr))\n          );\n        }\n      }\n    }\n\n    if (caughtErr && errMsgMatcher !== undefined && errMsgMatcher !== null) {\n      // Here we check compatible messages\n      var placeholder = 'including';\n      if (errMsgMatcher instanceof RegExp) {\n        placeholder = 'matching'\n      }\n\n      var isCompatibleMessage = _.checkError.compatibleMessage(caughtErr, errMsgMatcher);\n      if (isCompatibleMessage === negate) {\n        if (everyArgIsDefined && negate) {\n            errMsgMatcherFail = true;\n        } else {\n          this.assert(\n            negate\n            , 'expected #{this} to throw error ' + placeholder + ' #{exp} but got #{act}'\n            , 'expected #{this} to throw error not ' + placeholder + ' #{exp}'\n            ,  errMsgMatcher\n            ,  _.checkError.getMessage(caughtErr)\n          );\n        }\n      }\n    }\n\n    // If both assertions failed and both should've matched we throw an error\n    if (errorLikeFail && errMsgMatcherFail) {\n      this.assert(\n        negate\n        , 'expected #{this} to throw #{exp} but #{act} was thrown'\n        , 'expected #{this} to not throw #{exp}' + (caughtErr ? ' but #{act} was thrown' : '')\n        , (errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike))\n        , (caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr))\n      );\n    }\n\n    flag(this, 'object', caughtErr);\n  };\n\n  Assertion.addMethod('throw', assertThrows);\n  Assertion.addMethod('throws', assertThrows);\n  Assertion.addMethod('Throw', assertThrows);\n\n  /**\n   * ### .respondTo(method[, msg])\n   *\n   * When the target is a non-function object, `.respondTo` asserts that the\n   * target has a method with the given name `method`. The method can be own or\n   * inherited, and it can be enumerable or non-enumerable.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *\n   *     expect(new Cat()).to.respondTo('meow');\n   *\n   * When the target is a function, `.respondTo` asserts that the target's\n   * `prototype` property has a method with the given name `method`. Again, the\n   * method can be own or inherited, and it can be enumerable or non-enumerable.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *\n   *     expect(Cat).to.respondTo('meow');\n   *\n   * Add `.itself` earlier in the chain to force `.respondTo` to treat the\n   * target as a non-function object, even if it's a function. Thus, it asserts\n   * that the target has a method with the given name `method`, rather than\n   * asserting that the target's `prototype` property has a method with the\n   * given name `method`.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *     Cat.hiss = function () {};\n   *\n   *     expect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');\n   *\n   * When not adding `.itself`, it's important to check the target's type before\n   * using `.respondTo`. See the `.a` doc for info on checking a target's type.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *\n   *     expect(new Cat()).to.be.an('object').that.respondsTo('meow');\n   *\n   * Add `.not` earlier in the chain to negate `.respondTo`.\n   *\n   *     function Dog () {}\n   *     Dog.prototype.bark = function () {};\n   *\n   *     expect(new Dog()).to.not.respondTo('meow');\n   *\n   * `.respondTo` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect({}).to.respondTo('meow', 'nooo why fail??');\n   *     expect({}, 'nooo why fail??').to.respondTo('meow');\n   *\n   * The alias `.respondsTo` can be used interchangeably with `.respondTo`.\n   *\n   * @name respondTo\n   * @alias respondsTo\n   * @param {String} method\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function respondTo (method, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , itself = flag(this, 'itself')\n      , context = ('function' === typeof obj && !itself)\n        ? obj.prototype[method]\n        : obj[method];\n\n    this.assert(\n        'function' === typeof context\n      , 'expected #{this} to respond to ' + _.inspect(method)\n      , 'expected #{this} to not respond to ' + _.inspect(method)\n    );\n  }\n\n  Assertion.addMethod('respondTo', respondTo);\n  Assertion.addMethod('respondsTo', respondTo);\n\n  /**\n   * ### .itself\n   *\n   * Forces all `.respondTo` assertions that follow in the chain to behave as if\n   * the target is a non-function object, even if it's a function. Thus, it\n   * causes `.respondTo` to assert that the target has a method with the given\n   * name, rather than asserting that the target's `prototype` property has a\n   * method with the given name.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *     Cat.hiss = function () {};\n   *\n   *     expect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');\n   *\n   * @name itself\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('itself', function () {\n    flag(this, 'itself', true);\n  });\n\n  /**\n   * ### .satisfy(matcher[, msg])\n   *\n   * Invokes the given `matcher` function with the target being passed as the\n   * first argument, and asserts that the value returned is truthy.\n   *\n   *     expect(1).to.satisfy(function(num) {\n   *       return num > 0;\n   *     });\n   *\n   * Add `.not` earlier in the chain to negate `.satisfy`.\n   *\n   *     expect(1).to.not.satisfy(function(num) {\n   *       return num > 2;\n   *     });\n   *\n   * `.satisfy` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(1).to.satisfy(function(num) {\n   *       return num > 2;\n   *     }, 'nooo why fail??');\n   *\n   *     expect(1, 'nooo why fail??').to.satisfy(function(num) {\n   *       return num > 2;\n   *     });\n   *\n   * The alias `.satisfies` can be used interchangeably with `.satisfy`.\n   *\n   * @name satisfy\n   * @alias satisfies\n   * @param {Function} matcher\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function satisfy (matcher, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var result = matcher(obj);\n    this.assert(\n        result\n      , 'expected #{this} to satisfy ' + _.objDisplay(matcher)\n      , 'expected #{this} to not satisfy' + _.objDisplay(matcher)\n      , flag(this, 'negate') ? false : true\n      , result\n    );\n  }\n\n  Assertion.addMethod('satisfy', satisfy);\n  Assertion.addMethod('satisfies', satisfy);\n\n  /**\n   * ### .closeTo(expected, delta[, msg])\n   *\n   * Asserts that the target is a number that's within a given +/- `delta` range\n   * of the given number `expected`. However, it's often best to assert that the\n   * target is equal to its expected value.\n   *\n   *     // Recommended\n   *     expect(1.5).to.equal(1.5);\n   *\n   *     // Not recommended\n   *     expect(1.5).to.be.closeTo(1, 0.5);\n   *     expect(1.5).to.be.closeTo(2, 0.5);\n   *     expect(1.5).to.be.closeTo(1, 1);\n   *\n   * Add `.not` earlier in the chain to negate `.closeTo`.\n   *\n   *     expect(1.5).to.equal(1.5); // Recommended\n   *     expect(1.5).to.not.be.closeTo(3, 1); // Not recommended\n   *\n   * `.closeTo` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(1.5).to.be.closeTo(3, 1, 'nooo why fail??');\n   *     expect(1.5, 'nooo why fail??').to.be.closeTo(3, 1);\n   *\n   * The alias `.approximately` can be used interchangeably with `.closeTo`.\n   *\n   * @name closeTo\n   * @alias approximately\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function closeTo(expected, delta, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n\n    new Assertion(obj, flagMsg, ssfi, true).is.a('number');\n    if (typeof expected !== 'number' || typeof delta !== 'number') {\n      flagMsg = flagMsg ? flagMsg + ': ' : '';\n      var deltaMessage = delta === undefined ? \", and a delta is required\" : \"\";\n      throw new AssertionError(\n          flagMsg + 'the arguments to closeTo or approximately must be numbers' + deltaMessage,\n          undefined,\n          ssfi\n      );\n    }\n\n    this.assert(\n        Math.abs(obj - expected) <= delta\n      , 'expected #{this} to be close to ' + expected + ' +/- ' + delta\n      , 'expected #{this} not to be close to ' + expected + ' +/- ' + delta\n    );\n  }\n\n  Assertion.addMethod('closeTo', closeTo);\n  Assertion.addMethod('approximately', closeTo);\n\n  // Note: Duplicates are ignored if testing for inclusion instead of sameness.\n  function isSubsetOf(subset, superset, cmp, contains, ordered) {\n    if (!contains) {\n      if (subset.length !== superset.length) return false;\n      superset = superset.slice();\n    }\n\n    return subset.every(function(elem, idx) {\n      if (ordered) return cmp ? cmp(elem, superset[idx]) : elem === superset[idx];\n\n      if (!cmp) {\n        var matchIdx = superset.indexOf(elem);\n        if (matchIdx === -1) return false;\n\n        // Remove match from superset so not counted twice if duplicate in subset.\n        if (!contains) superset.splice(matchIdx, 1);\n        return true;\n      }\n\n      return superset.some(function(elem2, matchIdx) {\n        if (!cmp(elem, elem2)) return false;\n\n        // Remove match from superset so not counted twice if duplicate in subset.\n        if (!contains) superset.splice(matchIdx, 1);\n        return true;\n      });\n    });\n  }\n\n  /**\n   * ### .members(set[, msg])\n   *\n   * Asserts that the target array has the same members as the given array\n   * `set`.\n   *\n   *     expect([1, 2, 3]).to.have.members([2, 1, 3]);\n   *     expect([1, 2, 2]).to.have.members([2, 1, 2]);\n   *\n   * By default, members are compared using strict (`===`) equality. Add `.deep`\n   * earlier in the chain to use deep equality instead. See the `deep-eql`\n   * project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target array deeply (but not strictly) has member `{a: 1}`\n   *     expect([{a: 1}]).to.have.deep.members([{a: 1}]);\n   *     expect([{a: 1}]).to.not.have.members([{a: 1}]);\n   *\n   * By default, order doesn't matter. Add `.ordered` earlier in the chain to\n   * require that members appear in the same order.\n   *\n   *     expect([1, 2, 3]).to.have.ordered.members([1, 2, 3]);\n   *     expect([1, 2, 3]).to.have.members([2, 1, 3])\n   *       .but.not.ordered.members([2, 1, 3]);\n   *\n   * By default, both arrays must be the same size. Add `.include` earlier in\n   * the chain to require that the target's members be a superset of the\n   * expected members. Note that duplicates are ignored in the subset when\n   * `.include` is added.\n   *\n   *     // Target array is a superset of [1, 2] but not identical\n   *     expect([1, 2, 3]).to.include.members([1, 2]);\n   *     expect([1, 2, 3]).to.not.have.members([1, 2]);\n   *\n   *     // Duplicates in the subset are ignored\n   *     expect([1, 2, 3]).to.include.members([1, 2, 2, 2]);\n   *\n   * `.deep`, `.ordered`, and `.include` can all be combined. However, if\n   * `.include` and `.ordered` are combined, the ordering begins at the start of\n   * both arrays.\n   *\n   *     expect([{a: 1}, {b: 2}, {c: 3}])\n   *       .to.include.deep.ordered.members([{a: 1}, {b: 2}])\n   *       .but.not.include.deep.ordered.members([{b: 2}, {c: 3}]);\n   *\n   * Add `.not` earlier in the chain to negate `.members`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the target array doesn't have all of the same members as\n   * the given array `set` but may or may not have some of them. It's often best\n   * to identify the exact output that's expected, and then write an assertion\n   * that only accepts that exact output.\n   *\n   *     expect([1, 2]).to.not.include(3).and.not.include(4); // Recommended\n   *     expect([1, 2]).to.not.have.members([3, 4]); // Not recommended\n   *\n   * `.members` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect([1, 2]).to.have.members([1, 2, 3], 'nooo why fail??');\n   *     expect([1, 2], 'nooo why fail??').to.have.members([1, 2, 3]);\n   *\n   * @name members\n   * @param {Array} set\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('members', function (subset, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n\n    new Assertion(obj, flagMsg, ssfi, true).to.be.an('array');\n    new Assertion(subset, flagMsg, ssfi, true).to.be.an('array');\n\n    var contains = flag(this, 'contains');\n    var ordered = flag(this, 'ordered');\n\n    var subject, failMsg, failNegateMsg;\n\n    if (contains) {\n      subject = ordered ? 'an ordered superset' : 'a superset';\n      failMsg = 'expected #{this} to be ' + subject + ' of #{exp}';\n      failNegateMsg = 'expected #{this} to not be ' + subject + ' of #{exp}';\n    } else {\n      subject = ordered ? 'ordered members' : 'members';\n      failMsg = 'expected #{this} to have the same ' + subject + ' as #{exp}';\n      failNegateMsg = 'expected #{this} to not have the same ' + subject + ' as #{exp}';\n    }\n\n    var cmp = flag(this, 'deep') ? _.eql : undefined;\n\n    this.assert(\n        isSubsetOf(subset, obj, cmp, contains, ordered)\n      , failMsg\n      , failNegateMsg\n      , subset\n      , obj\n      , true\n    );\n  });\n\n  /**\n   * ### .oneOf(list[, msg])\n   *\n   * Asserts that the target is a member of the given array `list`. However,\n   * it's often best to assert that the target is equal to its expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.oneOf([1, 2, 3]); // Not recommended\n   *\n   * Comparisons are performed using strict (`===`) equality.\n   *\n   * Add `.not` earlier in the chain to negate `.oneOf`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.oneOf([2, 3, 4]); // Not recommended\n   *\n   * It can also be chained with `.contain` or `.include`, which will work with\n   * both arrays and strings:\n   *\n   *     expect('Today is sunny').to.contain.oneOf(['sunny', 'cloudy'])\n   *     expect('Today is rainy').to.not.contain.oneOf(['sunny', 'cloudy'])\n   *     expect([1,2,3]).to.contain.oneOf([3,4,5])\n   *     expect([1,2,3]).to.not.contain.oneOf([4,5,6])\n   *\n   * `.oneOf` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.be.oneOf([2, 3, 4], 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.oneOf([2, 3, 4]);\n   *\n   * @name oneOf\n   * @param {Array<*>} list\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function oneOf (list, msg) {\n    if (msg) flag(this, 'message', msg);\n    var expected = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi')\n      , contains = flag(this, 'contains')\n      , isDeep = flag(this, 'deep');\n    new Assertion(list, flagMsg, ssfi, true).to.be.an('array');\n\n    if (contains) {\n      this.assert(\n        list.some(function(possibility) { return expected.indexOf(possibility) > -1 })\n        , 'expected #{this} to contain one of #{exp}'\n        , 'expected #{this} to not contain one of #{exp}'\n        , list\n        , expected\n      );\n    } else {\n      if (isDeep) {\n        this.assert(\n          list.some(function(possibility) { return _.eql(expected, possibility) })\n          , 'expected #{this} to deeply equal one of #{exp}'\n          , 'expected #{this} to deeply equal one of #{exp}'\n          , list\n          , expected\n        );\n      } else {\n        this.assert(\n          list.indexOf(expected) > -1\n          , 'expected #{this} to be one of #{exp}'\n          , 'expected #{this} to not be one of #{exp}'\n          , list\n          , expected\n        );\n      }\n    }\n  }\n\n  Assertion.addMethod('oneOf', oneOf);\n\n  /**\n   * ### .change(subject[, prop[, msg]])\n   *\n   * When one argument is provided, `.change` asserts that the given function\n   * `subject` returns a different value when it's invoked before the target\n   * function compared to when it's invoked afterward. However, it's often best\n   * to assert that `subject` is equal to its expected value.\n   *\n   *     var dots = ''\n   *       , addDot = function () { dots += '.'; }\n   *       , getDots = function () { return dots; };\n   *\n   *     // Recommended\n   *     expect(getDots()).to.equal('');\n   *     addDot();\n   *     expect(getDots()).to.equal('.');\n   *\n   *     // Not recommended\n   *     expect(addDot).to.change(getDots);\n   *\n   * When two arguments are provided, `.change` asserts that the value of the\n   * given object `subject`'s `prop` property is different before invoking the\n   * target function compared to afterward.\n   *\n   *     var myObj = {dots: ''}\n   *       , addDot = function () { myObj.dots += '.'; };\n   *\n   *     // Recommended\n   *     expect(myObj).to.have.property('dots', '');\n   *     addDot();\n   *     expect(myObj).to.have.property('dots', '.');\n   *\n   *     // Not recommended\n   *     expect(addDot).to.change(myObj, 'dots');\n   *\n   * Strict (`===`) equality is used to compare before and after values.\n   *\n   * Add `.not` earlier in the chain to negate `.change`.\n   *\n   *     var dots = ''\n   *       , noop = function () {}\n   *       , getDots = function () { return dots; };\n   *\n   *     expect(noop).to.not.change(getDots);\n   *\n   *     var myObj = {dots: ''}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.not.change(myObj, 'dots');\n   *\n   * `.change` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing two arguments, always\n   * use the second form.\n   *\n   *     var myObj = {dots: ''}\n   *       , addDot = function () { myObj.dots += '.'; };\n   *\n   *     expect(addDot).to.not.change(myObj, 'dots', 'nooo why fail??');\n   *\n   *     var dots = ''\n   *       , addDot = function () { dots += '.'; }\n   *       , getDots = function () { return dots; };\n   *\n   *     expect(addDot, 'nooo why fail??').to.not.change(getDots);\n   *\n   * `.change` also causes all `.by` assertions that follow in the chain to\n   * assert how much a numeric subject was increased or decreased by. However,\n   * it's dangerous to use `.change.by`. The problem is that it creates\n   * uncertain expectations by asserting that the subject either increases by\n   * the given delta, or that it decreases by the given delta. It's often best\n   * to identify the exact output that's expected, and then write an assertion\n   * that only accepts that exact output.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; }\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   * The alias `.changes` can be used interchangeably with `.change`.\n   *\n   * @name change\n   * @alias changes\n   * @param {String} subject\n   * @param {String} prop name _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertChanges (subject, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(fn, flagMsg, ssfi, true).is.a('function');\n\n    var initial;\n    if (!prop) {\n      new Assertion(subject, flagMsg, ssfi, true).is.a('function');\n      initial = subject();\n    } else {\n      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);\n      initial = subject[prop];\n    }\n\n    fn();\n\n    var final = prop === undefined || prop === null ? subject() : subject[prop];\n    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;\n\n    // This gets flagged because of the .by(delta) assertion\n    flag(this, 'deltaMsgObj', msgObj);\n    flag(this, 'initialDeltaValue', initial);\n    flag(this, 'finalDeltaValue', final);\n    flag(this, 'deltaBehavior', 'change');\n    flag(this, 'realDelta', final !== initial);\n\n    this.assert(\n      initial !== final\n      , 'expected ' + msgObj + ' to change'\n      , 'expected ' + msgObj + ' to not change'\n    );\n  }\n\n  Assertion.addMethod('change', assertChanges);\n  Assertion.addMethod('changes', assertChanges);\n\n  /**\n   * ### .increase(subject[, prop[, msg]])\n   *\n   * When one argument is provided, `.increase` asserts that the given function\n   * `subject` returns a greater number when it's invoked after invoking the\n   * target function compared to when it's invoked beforehand. `.increase` also\n   * causes all `.by` assertions that follow in the chain to assert how much\n   * greater of a number is returned. It's often best to assert that the return\n   * value increased by the expected amount, rather than asserting it increased\n   * by any amount.\n   *\n   *     var val = 1\n   *       , addTwo = function () { val += 2; }\n   *       , getVal = function () { return val; };\n   *\n   *     expect(addTwo).to.increase(getVal).by(2); // Recommended\n   *     expect(addTwo).to.increase(getVal); // Not recommended\n   *\n   * When two arguments are provided, `.increase` asserts that the value of the\n   * given object `subject`'s `prop` property is greater after invoking the\n   * target function compared to beforehand.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.increase(myObj, 'val'); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.increase`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the subject either decreases, or that it stays the same.\n   * It's often best to identify the exact output that's expected, and then\n   * write an assertion that only accepts that exact output.\n   *\n   * When the subject is expected to decrease, it's often best to assert that it\n   * decreased by the expected amount.\n   *\n   *     var myObj = {val: 1}\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.not.increase(myObj, 'val'); // Not recommended\n   *\n   * When the subject is expected to stay the same, it's often best to assert\n   * exactly that.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.not.change(myObj, 'val'); // Recommended\n   *     expect(noop).to.not.increase(myObj, 'val'); // Not recommended\n   *\n   * `.increase` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing two arguments, always\n   * use the second form.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.increase(myObj, 'val', 'nooo why fail??');\n   *\n   *     var val = 1\n   *       , noop = function () {}\n   *       , getVal = function () { return val; };\n   *\n   *     expect(noop, 'nooo why fail??').to.increase(getVal);\n   *\n   * The alias `.increases` can be used interchangeably with `.increase`.\n   *\n   * @name increase\n   * @alias increases\n   * @param {String|Function} subject\n   * @param {String} prop name _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertIncreases (subject, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(fn, flagMsg, ssfi, true).is.a('function');\n\n    var initial;\n    if (!prop) {\n      new Assertion(subject, flagMsg, ssfi, true).is.a('function');\n      initial = subject();\n    } else {\n      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);\n      initial = subject[prop];\n    }\n\n    // Make sure that the target is a number\n    new Assertion(initial, flagMsg, ssfi, true).is.a('number');\n\n    fn();\n\n    var final = prop === undefined || prop === null ? subject() : subject[prop];\n    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;\n\n    flag(this, 'deltaMsgObj', msgObj);\n    flag(this, 'initialDeltaValue', initial);\n    flag(this, 'finalDeltaValue', final);\n    flag(this, 'deltaBehavior', 'increase');\n    flag(this, 'realDelta', final - initial);\n\n    this.assert(\n      final - initial > 0\n      , 'expected ' + msgObj + ' to increase'\n      , 'expected ' + msgObj + ' to not increase'\n    );\n  }\n\n  Assertion.addMethod('increase', assertIncreases);\n  Assertion.addMethod('increases', assertIncreases);\n\n  /**\n   * ### .decrease(subject[, prop[, msg]])\n   *\n   * When one argument is provided, `.decrease` asserts that the given function\n   * `subject` returns a lesser number when it's invoked after invoking the\n   * target function compared to when it's invoked beforehand. `.decrease` also\n   * causes all `.by` assertions that follow in the chain to assert how much\n   * lesser of a number is returned. It's often best to assert that the return\n   * value decreased by the expected amount, rather than asserting it decreased\n   * by any amount.\n   *\n   *     var val = 1\n   *       , subtractTwo = function () { val -= 2; }\n   *       , getVal = function () { return val; };\n   *\n   *     expect(subtractTwo).to.decrease(getVal).by(2); // Recommended\n   *     expect(subtractTwo).to.decrease(getVal); // Not recommended\n   *\n   * When two arguments are provided, `.decrease` asserts that the value of the\n   * given object `subject`'s `prop` property is lesser after invoking the\n   * target function compared to beforehand.\n   *\n   *     var myObj = {val: 1}\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.decrease(myObj, 'val'); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.decrease`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the subject either increases, or that it stays the same.\n   * It's often best to identify the exact output that's expected, and then\n   * write an assertion that only accepts that exact output.\n   *\n   * When the subject is expected to increase, it's often best to assert that it\n   * increased by the expected amount.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.not.decrease(myObj, 'val'); // Not recommended\n   *\n   * When the subject is expected to stay the same, it's often best to assert\n   * exactly that.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.not.change(myObj, 'val'); // Recommended\n   *     expect(noop).to.not.decrease(myObj, 'val'); // Not recommended\n   *\n   * `.decrease` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing two arguments, always\n   * use the second form.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.decrease(myObj, 'val', 'nooo why fail??');\n   *\n   *     var val = 1\n   *       , noop = function () {}\n   *       , getVal = function () { return val; };\n   *\n   *     expect(noop, 'nooo why fail??').to.decrease(getVal);\n   *\n   * The alias `.decreases` can be used interchangeably with `.decrease`.\n   *\n   * @name decrease\n   * @alias decreases\n   * @param {String|Function} subject\n   * @param {String} prop name _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertDecreases (subject, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(fn, flagMsg, ssfi, true).is.a('function');\n\n    var initial;\n    if (!prop) {\n      new Assertion(subject, flagMsg, ssfi, true).is.a('function');\n      initial = subject();\n    } else {\n      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);\n      initial = subject[prop];\n    }\n\n    // Make sure that the target is a number\n    new Assertion(initial, flagMsg, ssfi, true).is.a('number');\n\n    fn();\n\n    var final = prop === undefined || prop === null ? subject() : subject[prop];\n    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;\n\n    flag(this, 'deltaMsgObj', msgObj);\n    flag(this, 'initialDeltaValue', initial);\n    flag(this, 'finalDeltaValue', final);\n    flag(this, 'deltaBehavior', 'decrease');\n    flag(this, 'realDelta', initial - final);\n\n    this.assert(\n      final - initial < 0\n      , 'expected ' + msgObj + ' to decrease'\n      , 'expected ' + msgObj + ' to not decrease'\n    );\n  }\n\n  Assertion.addMethod('decrease', assertDecreases);\n  Assertion.addMethod('decreases', assertDecreases);\n\n  /**\n   * ### .by(delta[, msg])\n   *\n   * When following an `.increase` assertion in the chain, `.by` asserts that\n   * the subject of the `.increase` assertion increased by the given `delta`.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2);\n   *\n   * When following a `.decrease` assertion in the chain, `.by` asserts that the\n   * subject of the `.decrease` assertion decreased by the given `delta`.\n   *\n   *     var myObj = {val: 1}\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2);\n   *\n   * When following a `.change` assertion in the chain, `.by` asserts that the\n   * subject of the `.change` assertion either increased or decreased by the\n   * given `delta`. However, it's dangerous to use `.change.by`. The problem is\n   * that it creates uncertain expectations. It's often best to identify the\n   * exact output that's expected, and then write an assertion that only accepts\n   * that exact output.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; }\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.by`. However, it's often best\n   * to assert that the subject changed by its expected delta, rather than\n   * asserting that it didn't change by one of countless unexpected deltas.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     // Recommended\n   *     expect(addTwo).to.increase(myObj, 'val').by(2);\n   *\n   *     // Not recommended\n   *     expect(addTwo).to.increase(myObj, 'val').but.not.by(3);\n   *\n   * `.by` accepts an optional `msg` argument which is a custom error message to\n   * show when the assertion fails. The message can also be given as the second\n   * argument to `expect`.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(3, 'nooo why fail??');\n   *     expect(addTwo, 'nooo why fail??').to.increase(myObj, 'val').by(3);\n   *\n   * @name by\n   * @param {Number} delta\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertDelta(delta, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var msgObj = flag(this, 'deltaMsgObj');\n    var initial = flag(this, 'initialDeltaValue');\n    var final = flag(this, 'finalDeltaValue');\n    var behavior = flag(this, 'deltaBehavior');\n    var realDelta = flag(this, 'realDelta');\n\n    var expression;\n    if (behavior === 'change') {\n      expression = Math.abs(final - initial) === Math.abs(delta);\n    } else {\n      expression = realDelta === Math.abs(delta);\n    }\n\n    this.assert(\n      expression\n      , 'expected ' + msgObj + ' to ' + behavior + ' by ' + delta\n      , 'expected ' + msgObj + ' to not ' + behavior + ' by ' + delta\n    );\n  }\n\n  Assertion.addMethod('by', assertDelta);\n\n  /**\n   * ### .extensible\n   *\n   * Asserts that the target is extensible, which means that new properties can\n   * be added to it. Primitives are never extensible.\n   *\n   *     expect({a: 1}).to.be.extensible;\n   *\n   * Add `.not` earlier in the chain to negate `.extensible`.\n   *\n   *     var nonExtensibleObject = Object.preventExtensions({})\n   *       , sealedObject = Object.seal({})\n   *       , frozenObject = Object.freeze({});\n   *\n   *     expect(nonExtensibleObject).to.not.be.extensible;\n   *     expect(sealedObject).to.not.be.extensible;\n   *     expect(frozenObject).to.not.be.extensible;\n   *     expect(1).to.not.be.extensible;\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(1, 'nooo why fail??').to.be.extensible;\n   *\n   * @name extensible\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('extensible', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a non-extensible ordinary object, simply return false.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\n    // The following provides ES6 behavior for ES5 environments.\n\n    var isExtensible = obj === Object(obj) && Object.isExtensible(obj);\n\n    this.assert(\n      isExtensible\n      , 'expected #{this} to be extensible'\n      , 'expected #{this} to not be extensible'\n    );\n  });\n\n  /**\n   * ### .sealed\n   *\n   * Asserts that the target is sealed, which means that new properties can't be\n   * added to it, and its existing properties can't be reconfigured or deleted.\n   * However, it's possible that its existing properties can still be reassigned\n   * to different values. Primitives are always sealed.\n   *\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.freeze({});\n   *\n   *     expect(sealedObject).to.be.sealed;\n   *     expect(frozenObject).to.be.sealed;\n   *     expect(1).to.be.sealed;\n   *\n   * Add `.not` earlier in the chain to negate `.sealed`.\n   *\n   *     expect({a: 1}).to.not.be.sealed;\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({a: 1}, 'nooo why fail??').to.be.sealed;\n   *\n   * @name sealed\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('sealed', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a sealed ordinary object, simply return true.\n    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed\n    // The following provides ES6 behavior for ES5 environments.\n\n    var isSealed = obj === Object(obj) ? Object.isSealed(obj) : true;\n\n    this.assert(\n      isSealed\n      , 'expected #{this} to be sealed'\n      , 'expected #{this} to not be sealed'\n    );\n  });\n\n  /**\n   * ### .frozen\n   *\n   * Asserts that the target is frozen, which means that new properties can't be\n   * added to it, and its existing properties can't be reassigned to different\n   * values, reconfigured, or deleted. Primitives are always frozen.\n   *\n   *     var frozenObject = Object.freeze({});\n   *\n   *     expect(frozenObject).to.be.frozen;\n   *     expect(1).to.be.frozen;\n   *\n   * Add `.not` earlier in the chain to negate `.frozen`.\n   *\n   *     expect({a: 1}).to.not.be.frozen;\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({a: 1}, 'nooo why fail??').to.be.frozen;\n   *\n   * @name frozen\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('frozen', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a frozen ordinary object, simply return true.\n    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen\n    // The following provides ES6 behavior for ES5 environments.\n\n    var isFrozen = obj === Object(obj) ? Object.isFrozen(obj) : true;\n\n    this.assert(\n      isFrozen\n      , 'expected #{this} to be frozen'\n      , 'expected #{this} to not be frozen'\n    );\n  });\n\n  /**\n   * ### .finite\n   *\n   * Asserts that the target is a number, and isn't `NaN` or positive/negative\n   * `Infinity`.\n   *\n   *     expect(1).to.be.finite;\n   *\n   * Add `.not` earlier in the chain to negate `.finite`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the subject either isn't a number, or that it's `NaN`, or\n   * that it's positive `Infinity`, or that it's negative `Infinity`. It's often\n   * best to identify the exact output that's expected, and then write an\n   * assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to be a number, it's often best to assert\n   * that it's the expected type, rather than asserting that it isn't one of\n   * many unexpected types.\n   *\n   *     expect('foo').to.be.a('string'); // Recommended\n   *     expect('foo').to.not.be.finite; // Not recommended\n   *\n   * When the target is expected to be `NaN`, it's often best to assert exactly\n   * that.\n   *\n   *     expect(NaN).to.be.NaN; // Recommended\n   *     expect(NaN).to.not.be.finite; // Not recommended\n   *\n   * When the target is expected to be positive infinity, it's often best to\n   * assert exactly that.\n   *\n   *     expect(Infinity).to.equal(Infinity); // Recommended\n   *     expect(Infinity).to.not.be.finite; // Not recommended\n   *\n   * When the target is expected to be negative infinity, it's often best to\n   * assert exactly that.\n   *\n   *     expect(-Infinity).to.equal(-Infinity); // Recommended\n   *     expect(-Infinity).to.not.be.finite; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect('foo', 'nooo why fail??').to.be.finite;\n   *\n   * @name finite\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('finite', function(msg) {\n    var obj = flag(this, 'object');\n\n    this.assert(\n        typeof obj === 'number' && isFinite(obj)\n      , 'expected #{this} to be a finite number'\n      , 'expected #{this} to not be a finite number'\n    );\n  });\n};\n", "/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  chai.expect = function (val, message) {\n    return new chai.Assertion(val, message);\n  };\n\n  /**\n   * ### .fail([message])\n   * ### .fail(actual, expected, [message], [operator])\n   *\n   * Throw a failure.\n   *\n   *     expect.fail();\n   *     expect.fail(\"custom error message\");\n   *     expect.fail(1, 2);\n   *     expect.fail(1, 2, \"custom error message\");\n   *     expect.fail(1, 2, \"custom error message\", \">\");\n   *     expect.fail(1, 2, undefined, \">\");\n   *\n   * @name fail\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @param {String} operator\n   * @namespace BDD\n   * @api public\n   */\n\n  chai.expect.fail = function (actual, expected, message, operator) {\n    if (arguments.length < 2) {\n        message = actual;\n        actual = undefined;\n    }\n\n    message = message || 'expect.fail()';\n    throw new chai.AssertionError(message, {\n        actual: actual\n      , expected: expected\n      , operator: operator\n    }, chai.expect.fail);\n  };\n};\n", "/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  var Assertion = chai.Assertion;\n\n  function loadShould () {\n    // explicitly define this method as function as to have it's name to include as `ssfi`\n    function shouldGetter() {\n      if (this instanceof String\n          || this instanceof Number\n          || this instanceof Boolean\n          || typeof Symbol === 'function' && this instanceof Symbol\n          || typeof BigInt === 'function' && this instanceof BigInt) {\n        return new Assertion(this.valueOf(), null, shouldGetter);\n      }\n      return new Assertion(this, null, shouldGetter);\n    }\n    function shouldSetter(value) {\n      // See https://github.com/chaijs/chai/issues/86: this makes\n      // `whatever.should = someValue` actually set `someValue`, which is\n      // especially useful for `global.should = require('chai').should()`.\n      //\n      // Note that we have to use [[DefineProperty]] instead of [[Put]]\n      // since otherwise we would trigger this very setter!\n      Object.defineProperty(this, 'should', {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    }\n    // modify Object.prototype to have `should`\n    Object.defineProperty(Object.prototype, 'should', {\n      set: shouldSetter\n      , get: shouldGetter\n      , configurable: true\n    });\n\n    var should = {};\n\n    /**\n     * ### .fail([message])\n     * ### .fail(actual, expected, [message], [operator])\n     *\n     * Throw a failure.\n     *\n     *     should.fail();\n     *     should.fail(\"custom error message\");\n     *     should.fail(1, 2);\n     *     should.fail(1, 2, \"custom error message\");\n     *     should.fail(1, 2, \"custom error message\", \">\");\n     *     should.fail(1, 2, undefined, \">\");\n     *\n     *\n     * @name fail\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @param {String} operator\n     * @namespace BDD\n     * @api public\n     */\n\n    should.fail = function (actual, expected, message, operator) {\n      if (arguments.length < 2) {\n          message = actual;\n          actual = undefined;\n      }\n\n      message = message || 'should.fail()';\n      throw new chai.AssertionError(message, {\n          actual: actual\n        , expected: expected\n        , operator: operator\n      }, should.fail);\n    };\n\n    /**\n     * ### .equal(actual, expected, [message])\n     *\n     * Asserts non-strict equality (`==`) of `actual` and `expected`.\n     *\n     *     should.equal(3, '3', '== coerces values to strings');\n     *\n     * @name equal\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @namespace Should\n     * @api public\n     */\n\n    should.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.equal(val2);\n    };\n\n    /**\n     * ### .throw(function, [constructor/string/regexp], [string/regexp], [message])\n     *\n     * Asserts that `function` will throw an error that is an instance of\n     * `constructor`, or alternately that it will throw an error with message\n     * matching `regexp`.\n     *\n     *     should.throw(fn, 'function throws a reference error');\n     *     should.throw(fn, /function throws a reference error/);\n     *     should.throw(fn, ReferenceError);\n     *     should.throw(fn, ReferenceError, 'function throws a reference error');\n     *     should.throw(fn, ReferenceError, /function throws a reference error/);\n     *\n     * @name throw\n     * @alias Throw\n     * @param {Function} function\n     * @param {ErrorConstructor} constructor\n     * @param {RegExp} regexp\n     * @param {String} message\n     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n     * @namespace Should\n     * @api public\n     */\n\n    should.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.Throw(errt, errs);\n    };\n\n    /**\n     * ### .exist\n     *\n     * Asserts that the target is neither `null` nor `undefined`.\n     *\n     *     var foo = 'hi';\n     *\n     *     should.exist(foo, 'foo exists');\n     *\n     * @name exist\n     * @namespace Should\n     * @api public\n     */\n\n    should.exist = function (val, msg) {\n      new Assertion(val, msg).to.exist;\n    }\n\n    // negation\n    should.not = {}\n\n    /**\n     * ### .not.equal(actual, expected, [message])\n     *\n     * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n     *\n     *     should.not.equal(3, 4, 'these numbers are not equal');\n     *\n     * @name not.equal\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.not.equal(val2);\n    };\n\n    /**\n     * ### .throw(function, [constructor/regexp], [message])\n     *\n     * Asserts that `function` will _not_ throw an error that is an instance of\n     * `constructor`, or alternately that it will not throw an error with message\n     * matching `regexp`.\n     *\n     *     should.not.throw(fn, Error, 'function does not throw');\n     *\n     * @name not.throw\n     * @alias not.Throw\n     * @param {Function} function\n     * @param {ErrorConstructor} constructor\n     * @param {RegExp} regexp\n     * @param {String} message\n     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.not.Throw(errt, errs);\n    };\n\n    /**\n     * ### .not.exist\n     *\n     * Asserts that the target is neither `null` nor `undefined`.\n     *\n     *     var bar = null;\n     *\n     *     should.not.exist(bar, 'bar does not exist');\n     *\n     * @name not.exist\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.exist = function (val, msg) {\n      new Assertion(val, msg).to.not.exist;\n    }\n\n    should['throw'] = should['Throw'];\n    should.not['throw'] = should.not['Throw'];\n\n    return should;\n  };\n\n  chai.should = loadShould;\n  chai.Should = loadShould;\n};\n", "/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  /*!\n   * Chai dependencies.\n   */\n\n  var Assertion = chai.Assertion\n    , flag = util.flag;\n\n  /*!\n   * Module export.\n   */\n\n  /**\n   * ### assert(expression, message)\n   *\n   * Write your own test expressions.\n   *\n   *     assert('foo' !== 'bar', 'foo is not bar');\n   *     assert(Array.isArray([]), 'empty arrays are arrays');\n   *\n   * @param {Mixed} expression to test for truthiness\n   * @param {String} message to display on error\n   * @name assert\n   * @namespace Assert\n   * @api public\n   */\n\n  var assert = chai.assert = function (express, errmsg) {\n    var test = new Assertion(null, null, chai.assert, true);\n    test.assert(\n        express\n      , errmsg\n      , '[ negation message unavailable ]'\n    );\n  };\n\n  /**\n   * ### .fail([message])\n   * ### .fail(actual, expected, [message], [operator])\n   *\n   * Throw a failure. Node.js `assert` module-compatible.\n   *\n   *     assert.fail();\n   *     assert.fail(\"custom error message\");\n   *     assert.fail(1, 2);\n   *     assert.fail(1, 2, \"custom error message\");\n   *     assert.fail(1, 2, \"custom error message\", \">\");\n   *     assert.fail(1, 2, undefined, \">\");\n   *\n   * @name fail\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @param {String} operator\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.fail = function (actual, expected, message, operator) {\n    if (arguments.length < 2) {\n        // Comply with Node's fail([message]) interface\n\n        message = actual;\n        actual = undefined;\n    }\n\n    message = message || 'assert.fail()';\n    throw new chai.AssertionError(message, {\n        actual: actual\n      , expected: expected\n      , operator: operator\n    }, assert.fail);\n  };\n\n  /**\n   * ### .isOk(object, [message])\n   *\n   * Asserts that `object` is truthy.\n   *\n   *     assert.isOk('everything', 'everything is ok');\n   *     assert.isOk(false, 'this will fail');\n   *\n   * @name isOk\n   * @alias ok\n   * @param {Mixed} object to test\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isOk = function (val, msg) {\n    new Assertion(val, msg, assert.isOk, true).is.ok;\n  };\n\n  /**\n   * ### .isNotOk(object, [message])\n   *\n   * Asserts that `object` is falsy.\n   *\n   *     assert.isNotOk('everything', 'this will fail');\n   *     assert.isNotOk(false, 'this will pass');\n   *\n   * @name isNotOk\n   * @alias notOk\n   * @param {Mixed} object to test\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotOk = function (val, msg) {\n    new Assertion(val, msg, assert.isNotOk, true).is.not.ok;\n  };\n\n  /**\n   * ### .equal(actual, expected, [message])\n   *\n   * Asserts non-strict equality (`==`) of `actual` and `expected`.\n   *\n   *     assert.equal(3, '3', '== coerces values to strings');\n   *\n   * @name equal\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.equal = function (act, exp, msg) {\n    var test = new Assertion(act, msg, assert.equal, true);\n\n    test.assert(\n        exp == flag(test, 'object')\n      , 'expected #{this} to equal #{exp}'\n      , 'expected #{this} to not equal #{act}'\n      , exp\n      , act\n      , true\n    );\n  };\n\n  /**\n   * ### .notEqual(actual, expected, [message])\n   *\n   * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n   *\n   *     assert.notEqual(3, 4, 'these numbers are not equal');\n   *\n   * @name notEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notEqual = function (act, exp, msg) {\n    var test = new Assertion(act, msg, assert.notEqual, true);\n\n    test.assert(\n        exp != flag(test, 'object')\n      , 'expected #{this} to not equal #{exp}'\n      , 'expected #{this} to equal #{act}'\n      , exp\n      , act\n      , true\n    );\n  };\n\n  /**\n   * ### .strictEqual(actual, expected, [message])\n   *\n   * Asserts strict equality (`===`) of `actual` and `expected`.\n   *\n   *     assert.strictEqual(true, true, 'these booleans are strictly equal');\n   *\n   * @name strictEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.strictEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.strictEqual, true).to.equal(exp);\n  };\n\n  /**\n   * ### .notStrictEqual(actual, expected, [message])\n   *\n   * Asserts strict inequality (`!==`) of `actual` and `expected`.\n   *\n   *     assert.notStrictEqual(3, '3', 'no coercion for strict equality');\n   *\n   * @name notStrictEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notStrictEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.notStrictEqual, true).to.not.equal(exp);\n  };\n\n  /**\n   * ### .deepEqual(actual, expected, [message])\n   *\n   * Asserts that `actual` is deeply equal to `expected`.\n   *\n   *     assert.deepEqual({ tea: 'green' }, { tea: 'green' });\n   *\n   * @name deepEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @alias deepStrictEqual\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepEqual = assert.deepStrictEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.deepEqual, true).to.eql(exp);\n  };\n\n  /**\n   * ### .notDeepEqual(actual, expected, [message])\n   *\n   * Assert that `actual` is not deeply equal to `expected`.\n   *\n   *     assert.notDeepEqual({ tea: 'green' }, { tea: 'jasmine' });\n   *\n   * @name notDeepEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.notDeepEqual, true).to.not.eql(exp);\n  };\n\n   /**\n   * ### .isAbove(valueToCheck, valueToBeAbove, [message])\n   *\n   * Asserts `valueToCheck` is strictly greater than (>) `valueToBeAbove`.\n   *\n   *     assert.isAbove(5, 2, '5 is strictly greater than 2');\n   *\n   * @name isAbove\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAbove\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAbove = function (val, abv, msg) {\n    new Assertion(val, msg, assert.isAbove, true).to.be.above(abv);\n  };\n\n   /**\n   * ### .isAtLeast(valueToCheck, valueToBeAtLeast, [message])\n   *\n   * Asserts `valueToCheck` is greater than or equal to (>=) `valueToBeAtLeast`.\n   *\n   *     assert.isAtLeast(5, 2, '5 is greater or equal to 2');\n   *     assert.isAtLeast(3, 3, '3 is greater or equal to 3');\n   *\n   * @name isAtLeast\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAtLeast\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAtLeast = function (val, atlst, msg) {\n    new Assertion(val, msg, assert.isAtLeast, true).to.be.least(atlst);\n  };\n\n   /**\n   * ### .isBelow(valueToCheck, valueToBeBelow, [message])\n   *\n   * Asserts `valueToCheck` is strictly less than (<) `valueToBeBelow`.\n   *\n   *     assert.isBelow(3, 6, '3 is strictly less than 6');\n   *\n   * @name isBelow\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeBelow\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isBelow = function (val, blw, msg) {\n    new Assertion(val, msg, assert.isBelow, true).to.be.below(blw);\n  };\n\n   /**\n   * ### .isAtMost(valueToCheck, valueToBeAtMost, [message])\n   *\n   * Asserts `valueToCheck` is less than or equal to (<=) `valueToBeAtMost`.\n   *\n   *     assert.isAtMost(3, 6, '3 is less than or equal to 6');\n   *     assert.isAtMost(4, 4, '4 is less than or equal to 4');\n   *\n   * @name isAtMost\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAtMost\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAtMost = function (val, atmst, msg) {\n    new Assertion(val, msg, assert.isAtMost, true).to.be.most(atmst);\n  };\n\n  /**\n   * ### .isTrue(value, [message])\n   *\n   * Asserts that `value` is true.\n   *\n   *     var teaServed = true;\n   *     assert.isTrue(teaServed, 'the tea has been served');\n   *\n   * @name isTrue\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isTrue = function (val, msg) {\n    new Assertion(val, msg, assert.isTrue, true).is['true'];\n  };\n\n  /**\n   * ### .isNotTrue(value, [message])\n   *\n   * Asserts that `value` is not true.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotTrue(tea, 'great, time for tea!');\n   *\n   * @name isNotTrue\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotTrue = function (val, msg) {\n    new Assertion(val, msg, assert.isNotTrue, true).to.not.equal(true);\n  };\n\n  /**\n   * ### .isFalse(value, [message])\n   *\n   * Asserts that `value` is false.\n   *\n   *     var teaServed = false;\n   *     assert.isFalse(teaServed, 'no tea yet? hmm...');\n   *\n   * @name isFalse\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFalse = function (val, msg) {\n    new Assertion(val, msg, assert.isFalse, true).is['false'];\n  };\n\n  /**\n   * ### .isNotFalse(value, [message])\n   *\n   * Asserts that `value` is not false.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotFalse(tea, 'great, time for tea!');\n   *\n   * @name isNotFalse\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFalse = function (val, msg) {\n    new Assertion(val, msg, assert.isNotFalse, true).to.not.equal(false);\n  };\n\n  /**\n   * ### .isNull(value, [message])\n   *\n   * Asserts that `value` is null.\n   *\n   *     assert.isNull(err, 'there was no error');\n   *\n   * @name isNull\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNull = function (val, msg) {\n    new Assertion(val, msg, assert.isNull, true).to.equal(null);\n  };\n\n  /**\n   * ### .isNotNull(value, [message])\n   *\n   * Asserts that `value` is not null.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotNull(tea, 'great, time for tea!');\n   *\n   * @name isNotNull\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotNull = function (val, msg) {\n    new Assertion(val, msg, assert.isNotNull, true).to.not.equal(null);\n  };\n\n  /**\n   * ### .isNaN\n   *\n   * Asserts that value is NaN.\n   *\n   *     assert.isNaN(NaN, 'NaN is NaN');\n   *\n   * @name isNaN\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNaN = function (val, msg) {\n    new Assertion(val, msg, assert.isNaN, true).to.be.NaN;\n  };\n\n  /**\n   * ### .isNotNaN\n   *\n   * Asserts that value is not NaN.\n   *\n   *     assert.isNotNaN(4, '4 is not NaN');\n   *\n   * @name isNotNaN\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n  assert.isNotNaN = function (val, msg) {\n    new Assertion(val, msg, assert.isNotNaN, true).not.to.be.NaN;\n  };\n\n  /**\n   * ### .exists\n   *\n   * Asserts that the target is neither `null` nor `undefined`.\n   *\n   *     var foo = 'hi';\n   *\n   *     assert.exists(foo, 'foo is neither `null` nor `undefined`');\n   *\n   * @name exists\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.exists = function (val, msg) {\n    new Assertion(val, msg, assert.exists, true).to.exist;\n  };\n\n  /**\n   * ### .notExists\n   *\n   * Asserts that the target is either `null` or `undefined`.\n   *\n   *     var bar = null\n   *       , baz;\n   *\n   *     assert.notExists(bar);\n   *     assert.notExists(baz, 'baz is either null or undefined');\n   *\n   * @name notExists\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notExists = function (val, msg) {\n    new Assertion(val, msg, assert.notExists, true).to.not.exist;\n  };\n\n  /**\n   * ### .isUndefined(value, [message])\n   *\n   * Asserts that `value` is `undefined`.\n   *\n   *     var tea;\n   *     assert.isUndefined(tea, 'no tea defined');\n   *\n   * @name isUndefined\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isUndefined = function (val, msg) {\n    new Assertion(val, msg, assert.isUndefined, true).to.equal(undefined);\n  };\n\n  /**\n   * ### .isDefined(value, [message])\n   *\n   * Asserts that `value` is not `undefined`.\n   *\n   *     var tea = 'cup of chai';\n   *     assert.isDefined(tea, 'tea has been defined');\n   *\n   * @name isDefined\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isDefined = function (val, msg) {\n    new Assertion(val, msg, assert.isDefined, true).to.not.equal(undefined);\n  };\n\n  /**\n   * ### .isFunction(value, [message])\n   *\n   * Asserts that `value` is a function.\n   *\n   *     function serveTea() { return 'cup of tea'; };\n   *     assert.isFunction(serveTea, 'great, we can have tea now');\n   *\n   * @name isFunction\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFunction = function (val, msg) {\n    new Assertion(val, msg, assert.isFunction, true).to.be.a('function');\n  };\n\n  /**\n   * ### .isNotFunction(value, [message])\n   *\n   * Asserts that `value` is _not_ a function.\n   *\n   *     var serveTea = [ 'heat', 'pour', 'sip' ];\n   *     assert.isNotFunction(serveTea, 'great, we have listed the steps');\n   *\n   * @name isNotFunction\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFunction = function (val, msg) {\n    new Assertion(val, msg, assert.isNotFunction, true).to.not.be.a('function');\n  };\n\n  /**\n   * ### .isObject(value, [message])\n   *\n   * Asserts that `value` is an object of type 'Object' (as revealed by `Object.prototype.toString`).\n   * _The assertion does not match subclassed objects._\n   *\n   *     var selection = { name: 'Chai', serve: 'with spices' };\n   *     assert.isObject(selection, 'tea selection is an object');\n   *\n   * @name isObject\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isObject = function (val, msg) {\n    new Assertion(val, msg, assert.isObject, true).to.be.a('object');\n  };\n\n  /**\n   * ### .isNotObject(value, [message])\n   *\n   * Asserts that `value` is _not_ an object of type 'Object' (as revealed by `Object.prototype.toString`).\n   *\n   *     var selection = 'chai'\n   *     assert.isNotObject(selection, 'tea selection is not an object');\n   *     assert.isNotObject(null, 'null is not an object');\n   *\n   * @name isNotObject\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotObject = function (val, msg) {\n    new Assertion(val, msg, assert.isNotObject, true).to.not.be.a('object');\n  };\n\n  /**\n   * ### .isArray(value, [message])\n   *\n   * Asserts that `value` is an array.\n   *\n   *     var menu = [ 'green', 'chai', 'oolong' ];\n   *     assert.isArray(menu, 'what kind of tea do we want?');\n   *\n   * @name isArray\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isArray = function (val, msg) {\n    new Assertion(val, msg, assert.isArray, true).to.be.an('array');\n  };\n\n  /**\n   * ### .isNotArray(value, [message])\n   *\n   * Asserts that `value` is _not_ an array.\n   *\n   *     var menu = 'green|chai|oolong';\n   *     assert.isNotArray(menu, 'what kind of tea do we want?');\n   *\n   * @name isNotArray\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotArray = function (val, msg) {\n    new Assertion(val, msg, assert.isNotArray, true).to.not.be.an('array');\n  };\n\n  /**\n   * ### .isString(value, [message])\n   *\n   * Asserts that `value` is a string.\n   *\n   *     var teaOrder = 'chai';\n   *     assert.isString(teaOrder, 'order placed');\n   *\n   * @name isString\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isString = function (val, msg) {\n    new Assertion(val, msg, assert.isString, true).to.be.a('string');\n  };\n\n  /**\n   * ### .isNotString(value, [message])\n   *\n   * Asserts that `value` is _not_ a string.\n   *\n   *     var teaOrder = 4;\n   *     assert.isNotString(teaOrder, 'order placed');\n   *\n   * @name isNotString\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotString = function (val, msg) {\n    new Assertion(val, msg, assert.isNotString, true).to.not.be.a('string');\n  };\n\n  /**\n   * ### .isNumber(value, [message])\n   *\n   * Asserts that `value` is a number.\n   *\n   *     var cups = 2;\n   *     assert.isNumber(cups, 'how many cups');\n   *\n   * @name isNumber\n   * @param {Number} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNumber = function (val, msg) {\n    new Assertion(val, msg, assert.isNumber, true).to.be.a('number');\n  };\n\n  /**\n   * ### .isNotNumber(value, [message])\n   *\n   * Asserts that `value` is _not_ a number.\n   *\n   *     var cups = '2 cups please';\n   *     assert.isNotNumber(cups, 'how many cups');\n   *\n   * @name isNotNumber\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotNumber = function (val, msg) {\n    new Assertion(val, msg, assert.isNotNumber, true).to.not.be.a('number');\n  };\n\n   /**\n   * ### .isFinite(value, [message])\n   *\n   * Asserts that `value` is a finite number. Unlike `.isNumber`, this will fail for `NaN` and `Infinity`.\n   *\n   *     var cups = 2;\n   *     assert.isFinite(cups, 'how many cups');\n   *\n   *     assert.isFinite(NaN); // throws\n   *\n   * @name isFinite\n   * @param {Number} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFinite = function (val, msg) {\n    new Assertion(val, msg, assert.isFinite, true).to.be.finite;\n  };\n\n  /**\n   * ### .isBoolean(value, [message])\n   *\n   * Asserts that `value` is a boolean.\n   *\n   *     var teaReady = true\n   *       , teaServed = false;\n   *\n   *     assert.isBoolean(teaReady, 'is the tea ready');\n   *     assert.isBoolean(teaServed, 'has tea been served');\n   *\n   * @name isBoolean\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isBoolean = function (val, msg) {\n    new Assertion(val, msg, assert.isBoolean, true).to.be.a('boolean');\n  };\n\n  /**\n   * ### .isNotBoolean(value, [message])\n   *\n   * Asserts that `value` is _not_ a boolean.\n   *\n   *     var teaReady = 'yep'\n   *       , teaServed = 'nope';\n   *\n   *     assert.isNotBoolean(teaReady, 'is the tea ready');\n   *     assert.isNotBoolean(teaServed, 'has tea been served');\n   *\n   * @name isNotBoolean\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotBoolean = function (val, msg) {\n    new Assertion(val, msg, assert.isNotBoolean, true).to.not.be.a('boolean');\n  };\n\n  /**\n   * ### .typeOf(value, name, [message])\n   *\n   * Asserts that `value`'s type is `name`, as determined by\n   * `Object.prototype.toString`.\n   *\n   *     assert.typeOf({ tea: 'chai' }, 'object', 'we have an object');\n   *     assert.typeOf(['chai', 'jasmine'], 'array', 'we have an array');\n   *     assert.typeOf('tea', 'string', 'we have a string');\n   *     assert.typeOf(/tea/, 'regexp', 'we have a regular expression');\n   *     assert.typeOf(null, 'null', 'we have a null');\n   *     assert.typeOf(undefined, 'undefined', 'we have an undefined');\n   *\n   * @name typeOf\n   * @param {Mixed} value\n   * @param {String} name\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.typeOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.typeOf, true).to.be.a(type);\n  };\n\n  /**\n   * ### .notTypeOf(value, name, [message])\n   *\n   * Asserts that `value`'s type is _not_ `name`, as determined by\n   * `Object.prototype.toString`.\n   *\n   *     assert.notTypeOf('tea', 'number', 'strings are not numbers');\n   *\n   * @name notTypeOf\n   * @param {Mixed} value\n   * @param {String} typeof name\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notTypeOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.notTypeOf, true).to.not.be.a(type);\n  };\n\n  /**\n   * ### .instanceOf(object, constructor, [message])\n   *\n   * Asserts that `value` is an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , chai = new Tea('chai');\n   *\n   *     assert.instanceOf(chai, Tea, 'chai is an instance of tea');\n   *\n   * @name instanceOf\n   * @param {Object} object\n   * @param {Constructor} constructor\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.instanceOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.instanceOf, true).to.be.instanceOf(type);\n  };\n\n  /**\n   * ### .notInstanceOf(object, constructor, [message])\n   *\n   * Asserts `value` is not an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , chai = new String('chai');\n   *\n   *     assert.notInstanceOf(chai, Tea, 'chai is not an instance of tea');\n   *\n   * @name notInstanceOf\n   * @param {Object} object\n   * @param {Constructor} constructor\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notInstanceOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.notInstanceOf, true)\n      .to.not.be.instanceOf(type);\n  };\n\n  /**\n   * ### .include(haystack, needle, [message])\n   *\n   * Asserts that `haystack` includes `needle`. Can be used to assert the\n   * inclusion of a value in an array, a substring in a string, or a subset of\n   * properties in an object.\n   *\n   *     assert.include([1,2,3], 2, 'array contains value');\n   *     assert.include('foobar', 'foo', 'string contains substring');\n   *     assert.include({ foo: 'bar', hello: 'universe' }, { foo: 'bar' }, 'object contains property');\n   *\n   * Strict equality (===) is used. When asserting the inclusion of a value in\n   * an array, the array is searched for an element that's strictly equal to the\n   * given value. When asserting a subset of properties in an object, the object\n   * is searched for the given property keys, checking that each one is present\n   * and strictly equal to the given property value. For instance:\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.include([obj1, obj2], obj1);\n   *     assert.include({foo: obj1, bar: obj2}, {foo: obj1});\n   *     assert.include({foo: obj1, bar: obj2}, {foo: obj1, bar: obj2});\n   *\n   * @name include\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.include = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.include, true).include(inc);\n  };\n\n  /**\n   * ### .notInclude(haystack, needle, [message])\n   *\n   * Asserts that `haystack` does not include `needle`. Can be used to assert\n   * the absence of a value in an array, a substring in a string, or a subset of\n   * properties in an object.\n   *\n   *     assert.notInclude([1,2,3], 4, \"array doesn't contain value\");\n   *     assert.notInclude('foobar', 'baz', \"string doesn't contain substring\");\n   *     assert.notInclude({ foo: 'bar', hello: 'universe' }, { foo: 'baz' }, 'object doesn't contain property');\n   *\n   * Strict equality (===) is used. When asserting the absence of a value in an\n   * array, the array is searched to confirm the absence of an element that's\n   * strictly equal to the given value. When asserting a subset of properties in\n   * an object, the object is searched to confirm that at least one of the given\n   * property keys is either not present or not strictly equal to the given\n   * property value. For instance:\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.notInclude([obj1, obj2], {a: 1});\n   *     assert.notInclude({foo: obj1, bar: obj2}, {foo: {a: 1}});\n   *     assert.notInclude({foo: obj1, bar: obj2}, {foo: obj1, bar: {b: 2}});\n   *\n   * @name notInclude\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notInclude, true).not.include(inc);\n  };\n\n  /**\n   * ### .deepInclude(haystack, needle, [message])\n   *\n   * Asserts that `haystack` includes `needle`. Can be used to assert the\n   * inclusion of a value in an array or a subset of properties in an object.\n   * Deep equality is used.\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.deepInclude([obj1, obj2], {a: 1});\n   *     assert.deepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}});\n   *     assert.deepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}, bar: {b: 2}});\n   *\n   * @name deepInclude\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.deepInclude, true).deep.include(inc);\n  };\n\n  /**\n   * ### .notDeepInclude(haystack, needle, [message])\n   *\n   * Asserts that `haystack` does not include `needle`. Can be used to assert\n   * the absence of a value in an array or a subset of properties in an object.\n   * Deep equality is used.\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.notDeepInclude([obj1, obj2], {a: 9});\n   *     assert.notDeepInclude({foo: obj1, bar: obj2}, {foo: {a: 9}});\n   *     assert.notDeepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}, bar: {b: 9}});\n   *\n   * @name notDeepInclude\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notDeepInclude, true).not.deep.include(inc);\n  };\n\n  /**\n   * ### .nestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.nestedInclude({'.a': {'b': 'x'}}, {'\\\\.a.[b]': 'x'});\n   *     assert.nestedInclude({'a': {'[b]': 'x'}}, {'a.\\\\[b\\\\]': 'x'});\n   *\n   * @name nestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.nestedInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.nestedInclude, true).nested.include(inc);\n  };\n\n  /**\n   * ### .notNestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' does not include 'needle'.\n   * Can be used to assert the absence of a subset of properties in an\n   * object.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.notNestedInclude({'.a': {'b': 'x'}}, {'\\\\.a.b': 'y'});\n   *     assert.notNestedInclude({'a': {'[b]': 'x'}}, {'a.\\\\[b\\\\]': 'y'});\n   *\n   * @name notNestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notNestedInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notNestedInclude, true)\n      .not.nested.include(inc);\n  };\n\n  /**\n   * ### .deepNestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object while checking for deep equality.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.deepNestedInclude({a: {b: [{x: 1}]}}, {'a.b[0]': {x: 1}});\n   *     assert.deepNestedInclude({'.a': {'[b]': {x: 1}}}, {'\\\\.a.\\\\[b\\\\]': {x: 1}});\n   *\n   * @name deepNestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepNestedInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.deepNestedInclude, true)\n      .deep.nested.include(inc);\n  };\n\n  /**\n   * ### .notDeepNestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' does not include 'needle'.\n   * Can be used to assert the absence of a subset of properties in an\n   * object while checking for deep equality.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.notDeepNestedInclude({a: {b: [{x: 1}]}}, {'a.b[0]': {y: 1}})\n   *     assert.notDeepNestedInclude({'.a': {'[b]': {x: 1}}}, {'\\\\.a.\\\\[b\\\\]': {y: 2}});\n   *\n   * @name notDeepNestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepNestedInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.notDeepNestedInclude, true)\n      .not.deep.nested.include(inc);\n  };\n\n  /**\n   * ### .ownInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object while ignoring inherited properties.\n   *\n   *     assert.ownInclude({ a: 1 }, { a: 1 });\n   *\n   * @name ownInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.ownInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.ownInclude, true).own.include(inc);\n  };\n\n  /**\n   * ### .notOwnInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the absence of a subset of properties in an\n   * object while ignoring inherited properties.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     assert.notOwnInclude({ a: 1 }, { b: 2 });\n   *\n   * @name notOwnInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notOwnInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.notOwnInclude, true).not.own.include(inc);\n  };\n\n  /**\n   * ### .deepOwnInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object while ignoring inherited properties and checking for deep equality.\n   *\n   *      assert.deepOwnInclude({a: {b: 2}}, {a: {b: 2}});\n   *\n   * @name deepOwnInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepOwnInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.deepOwnInclude, true)\n      .deep.own.include(inc);\n  };\n\n   /**\n   * ### .notDeepOwnInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the absence of a subset of properties in an\n   * object while ignoring inherited properties and checking for deep equality.\n   *\n   *      assert.notDeepOwnInclude({a: {b: 2}}, {a: {c: 3}});\n   *\n   * @name notDeepOwnInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepOwnInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.notDeepOwnInclude, true)\n      .not.deep.own.include(inc);\n  };\n\n  /**\n   * ### .match(value, regexp, [message])\n   *\n   * Asserts that `value` matches the regular expression `regexp`.\n   *\n   *     assert.match('foobar', /^foo/, 'regexp matches');\n   *\n   * @name match\n   * @param {Mixed} value\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.match = function (exp, re, msg) {\n    new Assertion(exp, msg, assert.match, true).to.match(re);\n  };\n\n  /**\n   * ### .notMatch(value, regexp, [message])\n   *\n   * Asserts that `value` does not match the regular expression `regexp`.\n   *\n   *     assert.notMatch('foobar', /^foo/, 'regexp does not match');\n   *\n   * @name notMatch\n   * @param {Mixed} value\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notMatch = function (exp, re, msg) {\n    new Assertion(exp, msg, assert.notMatch, true).to.not.match(re);\n  };\n\n  /**\n   * ### .property(object, property, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property`.\n   *\n   *     assert.property({ tea: { green: 'matcha' }}, 'tea');\n   *     assert.property({ tea: { green: 'matcha' }}, 'toString');\n   *\n   * @name property\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.property = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.property, true).to.have.property(prop);\n  };\n\n  /**\n   * ### .notProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a direct or inherited property named\n   * by `property`.\n   *\n   *     assert.notProperty({ tea: { green: 'matcha' }}, 'coffee');\n   *\n   * @name notProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.notProperty, true)\n      .to.not.have.property(prop);\n  };\n\n  /**\n   * ### .propertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property` with a value given by `value`. Uses a strict equality check\n   * (===).\n   *\n   *     assert.propertyVal({ tea: 'is good' }, 'tea', 'is good');\n   *\n   * @name propertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.propertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.propertyVal, true)\n      .to.have.property(prop, val);\n  };\n\n  /**\n   * ### .notPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct or inherited property named\n   * by `property` with value given by `value`. Uses a strict equality check\n   * (===).\n   *\n   *     assert.notPropertyVal({ tea: 'is good' }, 'tea', 'is bad');\n   *     assert.notPropertyVal({ tea: 'is good' }, 'coffee', 'is good');\n   *\n   * @name notPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notPropertyVal, true)\n      .to.not.have.property(prop, val);\n  };\n\n  /**\n   * ### .deepPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property` with a value given by `value`. Uses a deep equality check.\n   *\n   *     assert.deepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'matcha' });\n   *\n   * @name deepPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.deepPropertyVal, true)\n      .to.have.deep.property(prop, val);\n  };\n\n  /**\n   * ### .notDeepPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct or inherited property named\n   * by `property` with value given by `value`. Uses a deep equality check.\n   *\n   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { black: 'matcha' });\n   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'oolong' });\n   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'coffee', { green: 'matcha' });\n   *\n   * @name notDeepPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notDeepPropertyVal, true)\n      .to.not.have.deep.property(prop, val);\n  };\n\n  /**\n   * ### .ownProperty(object, property, [message])\n   *\n   * Asserts that `object` has a direct property named by `property`. Inherited\n   * properties aren't checked.\n   *\n   *     assert.ownProperty({ tea: { green: 'matcha' }}, 'tea');\n   *\n   * @name ownProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @api public\n   */\n\n  assert.ownProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.ownProperty, true)\n      .to.have.own.property(prop);\n  };\n\n  /**\n   * ### .notOwnProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a direct property named by\n   * `property`. Inherited properties aren't checked.\n   *\n   *     assert.notOwnProperty({ tea: { green: 'matcha' }}, 'coffee');\n   *     assert.notOwnProperty({}, 'toString');\n   *\n   * @name notOwnProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @api public\n   */\n\n  assert.notOwnProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.notOwnProperty, true)\n      .to.not.have.own.property(prop);\n  };\n\n  /**\n   * ### .ownPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct property named by `property` and a value\n   * equal to the provided `value`. Uses a strict equality check (===).\n   * Inherited properties aren't checked.\n   *\n   *     assert.ownPropertyVal({ coffee: 'is good'}, 'coffee', 'is good');\n   *\n   * @name ownPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.ownPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.ownPropertyVal, true)\n      .to.have.own.property(prop, value);\n  };\n\n  /**\n   * ### .notOwnPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct property named by `property`\n   * with a value equal to the provided `value`. Uses a strict equality check\n   * (===). Inherited properties aren't checked.\n   *\n   *     assert.notOwnPropertyVal({ tea: 'is better'}, 'tea', 'is worse');\n   *     assert.notOwnPropertyVal({}, 'toString', Object.prototype.toString);\n   *\n   * @name notOwnPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.notOwnPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.notOwnPropertyVal, true)\n      .to.not.have.own.property(prop, value);\n  };\n\n  /**\n   * ### .deepOwnPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct property named by `property` and a value\n   * equal to the provided `value`. Uses a deep equality check. Inherited\n   * properties aren't checked.\n   *\n   *     assert.deepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'matcha' });\n   *\n   * @name deepOwnPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.deepOwnPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.deepOwnPropertyVal, true)\n      .to.have.deep.own.property(prop, value);\n  };\n\n  /**\n   * ### .notDeepOwnPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct property named by `property`\n   * with a value equal to the provided `value`. Uses a deep equality check.\n   * Inherited properties aren't checked.\n   *\n   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { black: 'matcha' });\n   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'oolong' });\n   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'coffee', { green: 'matcha' });\n   *     assert.notDeepOwnPropertyVal({}, 'toString', Object.prototype.toString);\n   *\n   * @name notDeepOwnPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.notDeepOwnPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.notDeepOwnPropertyVal, true)\n      .to.not.have.deep.own.property(prop, value);\n  };\n\n  /**\n   * ### .nestedProperty(object, property, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property`, which can be a string using dot- and bracket-notation for\n   * nested reference.\n   *\n   *     assert.nestedProperty({ tea: { green: 'matcha' }}, 'tea.green');\n   *\n   * @name nestedProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.nestedProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.nestedProperty, true)\n      .to.have.nested.property(prop);\n  };\n\n  /**\n   * ### .notNestedProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property`, which\n   * can be a string using dot- and bracket-notation for nested reference. The\n   * property cannot exist on the object nor anywhere in its prototype chain.\n   *\n   *     assert.notNestedProperty({ tea: { green: 'matcha' }}, 'tea.oolong');\n   *\n   * @name notNestedProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notNestedProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.notNestedProperty, true)\n      .to.not.have.nested.property(prop);\n  };\n\n  /**\n   * ### .nestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property` with value given\n   * by `value`. `property` can use dot- and bracket-notation for nested\n   * reference. Uses a strict equality check (===).\n   *\n   *     assert.nestedPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'matcha');\n   *\n   * @name nestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.nestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.nestedPropertyVal, true)\n      .to.have.nested.property(prop, val);\n  };\n\n  /**\n   * ### .notNestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property` with\n   * value given by `value`. `property` can use dot- and bracket-notation for\n   * nested reference. Uses a strict equality check (===).\n   *\n   *     assert.notNestedPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'konacha');\n   *     assert.notNestedPropertyVal({ tea: { green: 'matcha' }}, 'coffee.green', 'matcha');\n   *\n   * @name notNestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notNestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notNestedPropertyVal, true)\n      .to.not.have.nested.property(prop, val);\n  };\n\n  /**\n   * ### .deepNestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property` with a value given\n   * by `value`. `property` can use dot- and bracket-notation for nested\n   * reference. Uses a deep equality check.\n   *\n   *     assert.deepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { matcha: 'yum' });\n   *\n   * @name deepNestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepNestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.deepNestedPropertyVal, true)\n      .to.have.deep.nested.property(prop, val);\n  };\n\n  /**\n   * ### .notDeepNestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property` with\n   * value given by `value`. `property` can use dot- and bracket-notation for\n   * nested reference. Uses a deep equality check.\n   *\n   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { oolong: 'yum' });\n   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { matcha: 'yuck' });\n   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.black', { matcha: 'yum' });\n   *\n   * @name notDeepNestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepNestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notDeepNestedPropertyVal, true)\n      .to.not.have.deep.nested.property(prop, val);\n  }\n\n  /**\n   * ### .lengthOf(object, length, [message])\n   *\n   * Asserts that `object` has a `length` or `size` with the expected value.\n   *\n   *     assert.lengthOf([1,2,3], 3, 'array has length of 3');\n   *     assert.lengthOf('foobar', 6, 'string has length of 6');\n   *     assert.lengthOf(new Set([1,2,3]), 3, 'set has size of 3');\n   *     assert.lengthOf(new Map([['a',1],['b',2],['c',3]]), 3, 'map has size of 3');\n   *\n   * @name lengthOf\n   * @param {Mixed} object\n   * @param {Number} length\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.lengthOf = function (exp, len, msg) {\n    new Assertion(exp, msg, assert.lengthOf, true).to.have.lengthOf(len);\n  };\n\n  /**\n   * ### .hasAnyKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has at least one of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAnyKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'iDontExist', 'baz']);\n   *     assert.hasAnyKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, iDontExist: 99, baz: 1337});\n   *     assert.hasAnyKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);\n   *     assert.hasAnyKeys(new Set([{foo: 'bar'}, 'anotherKey']), [{foo: 'bar'}, 'anotherKey']);\n   *\n   * @name hasAnyKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAnyKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAnyKeys, true).to.have.any.keys(keys);\n  }\n\n  /**\n   * ### .hasAllKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has all and only all of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'bar', 'baz']);\n   *     assert.hasAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, bar: 99, baz: 1337]);\n   *     assert.hasAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);\n   *     assert.hasAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}, 'anotherKey']);\n   *\n   * @name hasAllKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAllKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAllKeys, true).to.have.all.keys(keys);\n  }\n\n  /**\n   * ### .containsAllKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has all of the `keys` provided but may have more keys not listed.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'baz']);\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'bar', 'baz']);\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, baz: 1337});\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, bar: 99, baz: 1337});\n   *     assert.containsAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}]);\n   *     assert.containsAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);\n   *     assert.containsAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}]);\n   *     assert.containsAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}, 'anotherKey']);\n   *\n   * @name containsAllKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.containsAllKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.containsAllKeys, true)\n      .to.contain.all.keys(keys);\n  }\n\n  /**\n   * ### .doesNotHaveAnyKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has none of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAnyKeys({foo: 1, bar: 2, baz: 3}, ['one', 'two', 'example']);\n   *     assert.doesNotHaveAnyKeys({foo: 1, bar: 2, baz: 3}, {one: 1, two: 2, example: 'foo'});\n   *     assert.doesNotHaveAnyKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{one: 'two'}, 'example']);\n   *     assert.doesNotHaveAnyKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{one: 'two'}, 'example']);\n   *\n   * @name doesNotHaveAnyKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAnyKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAnyKeys, true)\n      .to.not.have.any.keys(keys);\n  }\n\n  /**\n   * ### .doesNotHaveAllKeys(object, [keys], [message])\n   *\n   * Asserts that `object` does not have at least one of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAllKeys({foo: 1, bar: 2, baz: 3}, ['one', 'two', 'example']);\n   *     assert.doesNotHaveAllKeys({foo: 1, bar: 2, baz: 3}, {one: 1, two: 2, example: 'foo'});\n   *     assert.doesNotHaveAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{one: 'two'}, 'example']);\n   *     assert.doesNotHaveAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{one: 'two'}, 'example']);\n   *\n   * @name doesNotHaveAllKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAllKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAllKeys, true)\n      .to.not.have.all.keys(keys);\n  }\n\n  /**\n   * ### .hasAnyDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has at least one of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {one: 'one'});\n   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {one: 'one'});\n   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {three: 'three'}]);\n   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);\n   *\n   * @name hasAnyDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAnyDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAnyDeepKeys, true)\n      .to.have.any.deep.keys(keys);\n  }\n\n /**\n   * ### .hasAllDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has all and only all of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAllDeepKeys(new Map([[{one: 'one'}, 'valueOne']]), {one: 'one'});\n   *     assert.hasAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.hasAllDeepKeys(new Set([{one: 'one'}]), {one: 'one'});\n   *     assert.hasAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);\n   *\n   * @name hasAllDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAllDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAllDeepKeys, true)\n      .to.have.all.deep.keys(keys);\n  }\n\n /**\n   * ### .containsAllDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` contains all of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.containsAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {one: 'one'});\n   *     assert.containsAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.containsAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {one: 'one'});\n   *     assert.containsAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);\n   *\n   * @name containsAllDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.containsAllDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.containsAllDeepKeys, true)\n      .to.contain.all.deep.keys(keys);\n  }\n\n /**\n   * ### .doesNotHaveAnyDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has none of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {thisDoesNot: 'exist'});\n   *     assert.doesNotHaveAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{twenty: 'twenty'}, {fifty: 'fifty'}]);\n   *     assert.doesNotHaveAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {twenty: 'twenty'});\n   *     assert.doesNotHaveAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{twenty: 'twenty'}, {fifty: 'fifty'}]);\n   *\n   * @name doesNotHaveAnyDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAnyDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAnyDeepKeys, true)\n      .to.not.have.any.deep.keys(keys);\n  }\n\n /**\n   * ### .doesNotHaveAllDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` does not have at least one of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {thisDoesNot: 'exist'});\n   *     assert.doesNotHaveAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{twenty: 'twenty'}, {one: 'one'}]);\n   *     assert.doesNotHaveAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {twenty: 'twenty'});\n   *     assert.doesNotHaveAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {fifty: 'fifty'}]);\n   *\n   * @name doesNotHaveAllDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAllDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAllDeepKeys, true)\n      .to.not.have.all.deep.keys(keys);\n  }\n\n /**\n   * ### .throws(fn, [errorLike/string/regexp], [string/regexp], [message])\n   *\n   * If `errorLike` is an `Error` constructor, asserts that `fn` will throw an error that is an\n   * instance of `errorLike`.\n   * If `errorLike` is an `Error` instance, asserts that the error thrown is the same\n   * instance as `errorLike`.\n   * If `errMsgMatcher` is provided, it also asserts that the error thrown will have a\n   * message matching `errMsgMatcher`.\n   *\n   *     assert.throws(fn, 'Error thrown must have this msg');\n   *     assert.throws(fn, /Error thrown must have a msg that matches this/);\n   *     assert.throws(fn, ReferenceError);\n   *     assert.throws(fn, errorInstance);\n   *     assert.throws(fn, ReferenceError, 'Error thrown must be a ReferenceError and have this msg');\n   *     assert.throws(fn, errorInstance, 'Error thrown must be the same errorInstance and have this msg');\n   *     assert.throws(fn, ReferenceError, /Error thrown must be a ReferenceError and match this/);\n   *     assert.throws(fn, errorInstance, /Error thrown must be the same errorInstance and match this/);\n   *\n   * @name throws\n   * @alias throw\n   * @alias Throw\n   * @param {Function} fn\n   * @param {ErrorConstructor|Error} errorLike\n   * @param {RegExp|String} errMsgMatcher\n   * @param {String} message\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.throws = function (fn, errorLike, errMsgMatcher, msg) {\n    if ('string' === typeof errorLike || errorLike instanceof RegExp) {\n      errMsgMatcher = errorLike;\n      errorLike = null;\n    }\n\n    var assertErr = new Assertion(fn, msg, assert.throws, true)\n      .to.throw(errorLike, errMsgMatcher);\n    return flag(assertErr, 'object');\n  };\n\n  /**\n   * ### .doesNotThrow(fn, [errorLike/string/regexp], [string/regexp], [message])\n   *\n   * If `errorLike` is an `Error` constructor, asserts that `fn` will _not_ throw an error that is an\n   * instance of `errorLike`.\n   * If `errorLike` is an `Error` instance, asserts that the error thrown is _not_ the same\n   * instance as `errorLike`.\n   * If `errMsgMatcher` is provided, it also asserts that the error thrown will _not_ have a\n   * message matching `errMsgMatcher`.\n   *\n   *     assert.doesNotThrow(fn, 'Any Error thrown must not have this message');\n   *     assert.doesNotThrow(fn, /Any Error thrown must not match this/);\n   *     assert.doesNotThrow(fn, Error);\n   *     assert.doesNotThrow(fn, errorInstance);\n   *     assert.doesNotThrow(fn, Error, 'Error must not have this message');\n   *     assert.doesNotThrow(fn, errorInstance, 'Error must not have this message');\n   *     assert.doesNotThrow(fn, Error, /Error must not match this/);\n   *     assert.doesNotThrow(fn, errorInstance, /Error must not match this/);\n   *\n   * @name doesNotThrow\n   * @param {Function} fn\n   * @param {ErrorConstructor} errorLike\n   * @param {RegExp|String} errMsgMatcher\n   * @param {String} message\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotThrow = function (fn, errorLike, errMsgMatcher, msg) {\n    if ('string' === typeof errorLike || errorLike instanceof RegExp) {\n      errMsgMatcher = errorLike;\n      errorLike = null;\n    }\n\n    new Assertion(fn, msg, assert.doesNotThrow, true)\n      .to.not.throw(errorLike, errMsgMatcher);\n  };\n\n  /**\n   * ### .operator(val1, operator, val2, [message])\n   *\n   * Compares two values using `operator`.\n   *\n   *     assert.operator(1, '<', 2, 'everything is ok');\n   *     assert.operator(1, '>', 2, 'this will fail');\n   *\n   * @name operator\n   * @param {Mixed} val1\n   * @param {String} operator\n   * @param {Mixed} val2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.operator = function (val, operator, val2, msg) {\n    var ok;\n    switch(operator) {\n      case '==':\n        ok = val == val2;\n        break;\n      case '===':\n        ok = val === val2;\n        break;\n      case '>':\n        ok = val > val2;\n        break;\n      case '>=':\n        ok = val >= val2;\n        break;\n      case '<':\n        ok = val < val2;\n        break;\n      case '<=':\n        ok = val <= val2;\n        break;\n      case '!=':\n        ok = val != val2;\n        break;\n      case '!==':\n        ok = val !== val2;\n        break;\n      default:\n        msg = msg ? msg + ': ' : msg;\n        throw new chai.AssertionError(\n          msg + 'Invalid operator \"' + operator + '\"',\n          undefined,\n          assert.operator\n        );\n    }\n    var test = new Assertion(ok, msg, assert.operator, true);\n    test.assert(\n        true === flag(test, 'object')\n      , 'expected ' + util.inspect(val) + ' to be ' + operator + ' ' + util.inspect(val2)\n      , 'expected ' + util.inspect(val) + ' to not be ' + operator + ' ' + util.inspect(val2) );\n  };\n\n  /**\n   * ### .closeTo(actual, expected, delta, [message])\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     assert.closeTo(1.5, 1, 0.5, 'numbers are close');\n   *\n   * @name closeTo\n   * @param {Number} actual\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.closeTo = function (act, exp, delta, msg) {\n    new Assertion(act, msg, assert.closeTo, true).to.be.closeTo(exp, delta);\n  };\n\n  /**\n   * ### .approximately(actual, expected, delta, [message])\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     assert.approximately(1.5, 1, 0.5, 'numbers are close');\n   *\n   * @name approximately\n   * @param {Number} actual\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.approximately = function (act, exp, delta, msg) {\n    new Assertion(act, msg, assert.approximately, true)\n      .to.be.approximately(exp, delta);\n  };\n\n  /**\n   * ### .sameMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in any order. Uses a\n   * strict equality check (===).\n   *\n   *     assert.sameMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'same members');\n   *\n   * @name sameMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameMembers, true)\n      .to.have.same.members(set2);\n  }\n\n  /**\n   * ### .notSameMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in any order.\n   * Uses a strict equality check (===).\n   *\n   *     assert.notSameMembers([ 1, 2, 3 ], [ 5, 1, 3 ], 'not same members');\n   *\n   * @name notSameMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameMembers, true)\n      .to.not.have.same.members(set2);\n  }\n\n  /**\n   * ### .sameDeepMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in any order. Uses a\n   * deep equality check.\n   *\n   *     assert.sameDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [{ b: 2 }, { a: 1 }, { c: 3 }], 'same deep members');\n   *\n   * @name sameDeepMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameDeepMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameDeepMembers, true)\n      .to.have.same.deep.members(set2);\n  }\n\n  /**\n   * ### .notSameDeepMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in any order.\n   * Uses a deep equality check.\n   *\n   *     assert.notSameDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [{ b: 2 }, { a: 1 }, { f: 5 }], 'not same deep members');\n   *\n   * @name notSameDeepMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameDeepMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameDeepMembers, true)\n      .to.not.have.same.deep.members(set2);\n  }\n\n  /**\n   * ### .sameOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in the same order.\n   * Uses a strict equality check (===).\n   *\n   *     assert.sameOrderedMembers([ 1, 2, 3 ], [ 1, 2, 3 ], 'same ordered members');\n   *\n   * @name sameOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameOrderedMembers, true)\n      .to.have.same.ordered.members(set2);\n  }\n\n  /**\n   * ### .notSameOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in the same\n   * order. Uses a strict equality check (===).\n   *\n   *     assert.notSameOrderedMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'not same ordered members');\n   *\n   * @name notSameOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameOrderedMembers, true)\n      .to.not.have.same.ordered.members(set2);\n  }\n\n  /**\n   * ### .sameDeepOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in the same order.\n   * Uses a deep equality check.\n   *\n   *     assert.sameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 }, { c: 3 } ], 'same deep ordered members');\n   *\n   * @name sameDeepOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameDeepOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameDeepOrderedMembers, true)\n      .to.have.same.deep.ordered.members(set2);\n  }\n\n  /**\n   * ### .notSameDeepOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in the same\n   * order. Uses a deep equality check.\n   *\n   *     assert.notSameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 }, { z: 5 } ], 'not same deep ordered members');\n   *     assert.notSameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 }, { c: 3 } ], 'not same deep ordered members');\n   *\n   * @name notSameDeepOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameDeepOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameDeepOrderedMembers, true)\n      .to.not.have.same.deep.ordered.members(set2);\n  }\n\n  /**\n   * ### .includeMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in any order. Uses a\n   * strict equality check (===). Duplicates are ignored.\n   *\n   *     assert.includeMembers([ 1, 2, 3 ], [ 2, 1, 2 ], 'include members');\n   *\n   * @name includeMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeMembers, true)\n      .to.include.members(subset);\n  }\n\n  /**\n   * ### .notIncludeMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in any order. Uses a\n   * strict equality check (===). Duplicates are ignored.\n   *\n   *     assert.notIncludeMembers([ 1, 2, 3 ], [ 5, 1 ], 'not include members');\n   *\n   * @name notIncludeMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeMembers, true)\n      .to.not.include.members(subset);\n  }\n\n  /**\n   * ### .includeDeepMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in any order. Uses a deep\n   * equality check. Duplicates are ignored.\n   *\n   *     assert.includeDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 }, { b: 2 } ], 'include deep members');\n   *\n   * @name includeDeepMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeDeepMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeDeepMembers, true)\n      .to.include.deep.members(subset);\n  }\n\n  /**\n   * ### .notIncludeDeepMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in any order. Uses a\n   * deep equality check. Duplicates are ignored.\n   *\n   *     assert.notIncludeDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { f: 5 } ], 'not include deep members');\n   *\n   * @name notIncludeDeepMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeDeepMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeDeepMembers, true)\n      .to.not.include.deep.members(subset);\n  }\n\n  /**\n   * ### .includeOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a strict equality\n   * check (===).\n   *\n   *     assert.includeOrderedMembers([ 1, 2, 3 ], [ 1, 2 ], 'include ordered members');\n   *\n   * @name includeOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeOrderedMembers, true)\n      .to.include.ordered.members(subset);\n  }\n\n  /**\n   * ### .notIncludeOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a strict equality\n   * check (===).\n   *\n   *     assert.notIncludeOrderedMembers([ 1, 2, 3 ], [ 2, 1 ], 'not include ordered members');\n   *     assert.notIncludeOrderedMembers([ 1, 2, 3 ], [ 2, 3 ], 'not include ordered members');\n   *\n   * @name notIncludeOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeOrderedMembers, true)\n      .to.not.include.ordered.members(subset);\n  }\n\n  /**\n   * ### .includeDeepOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a deep equality\n   * check.\n   *\n   *     assert.includeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 } ], 'include deep ordered members');\n   *\n   * @name includeDeepOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeDeepOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeDeepOrderedMembers, true)\n      .to.include.deep.ordered.members(subset);\n  }\n\n  /**\n   * ### .notIncludeDeepOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a deep equality\n   * check.\n   *\n   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { f: 5 } ], 'not include deep ordered members');\n   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 } ], 'not include deep ordered members');\n   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { c: 3 } ], 'not include deep ordered members');\n   *\n   * @name notIncludeDeepOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeDeepOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeDeepOrderedMembers, true)\n      .to.not.include.deep.ordered.members(subset);\n  }\n\n  /**\n   * ### .oneOf(inList, list, [message])\n   *\n   * Asserts that non-object, non-array value `inList` appears in the flat array `list`.\n   *\n   *     assert.oneOf(1, [ 2, 1 ], 'Not found in list');\n   *\n   * @name oneOf\n   * @param {*} inList\n   * @param {Array<*>} list\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.oneOf = function (inList, list, msg) {\n    new Assertion(inList, msg, assert.oneOf, true).to.be.oneOf(list);\n  }\n\n  /**\n   * ### .changes(function, object, property, [message])\n   *\n   * Asserts that a function changes the value of a property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 22 };\n   *     assert.changes(fn, obj, 'val');\n   *\n   * @name changes\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.changes = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.changes, true).to.change(obj, prop);\n  }\n\n   /**\n   * ### .changesBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function changes the value of a property by an amount (delta).\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val += 2 };\n   *     assert.changesBy(fn, obj, 'val', 2);\n   *\n   * @name changesBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.changesBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.changesBy, true)\n      .to.change(obj, prop).by(delta);\n  }\n\n   /**\n   * ### .doesNotChange(function, object, property, [message])\n   *\n   * Asserts that a function does not change the value of a property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { console.log('foo'); };\n   *     assert.doesNotChange(fn, obj, 'val');\n   *\n   * @name doesNotChange\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotChange = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotChange, true)\n      .to.not.change(obj, prop);\n  }\n\n  /**\n   * ### .changesButNotBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not change the value of a property or of a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val += 10 };\n   *     assert.changesButNotBy(fn, obj, 'val', 5);\n   *\n   * @name changesButNotBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.changesButNotBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.changesButNotBy, true)\n      .to.change(obj, prop).but.not.by(delta);\n  }\n\n  /**\n   * ### .increases(function, object, property, [message])\n   *\n   * Asserts that a function increases a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 13 };\n   *     assert.increases(fn, obj, 'val');\n   *\n   * @name increases\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.increases = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.increases, true)\n      .to.increase(obj, prop);\n  }\n\n  /**\n   * ### .increasesBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function increases a numeric object property or a function's return value by an amount (delta).\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val += 10 };\n   *     assert.increasesBy(fn, obj, 'val', 10);\n   *\n   * @name increasesBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.increasesBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.increasesBy, true)\n      .to.increase(obj, prop).by(delta);\n  }\n\n  /**\n   * ### .doesNotIncrease(function, object, property, [message])\n   *\n   * Asserts that a function does not increase a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 8 };\n   *     assert.doesNotIncrease(fn, obj, 'val');\n   *\n   * @name doesNotIncrease\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotIncrease = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotIncrease, true)\n      .to.not.increase(obj, prop);\n  }\n\n  /**\n   * ### .increasesButNotBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not increase a numeric object property or function's return value by an amount (delta).\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 15 };\n   *     assert.increasesButNotBy(fn, obj, 'val', 10);\n   *\n   * @name increasesButNotBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.increasesButNotBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.increasesButNotBy, true)\n      .to.increase(obj, prop).but.not.by(delta);\n  }\n\n  /**\n   * ### .decreases(function, object, property, [message])\n   *\n   * Asserts that a function decreases a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     assert.decreases(fn, obj, 'val');\n   *\n   * @name decreases\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.decreases = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.decreases, true)\n      .to.decrease(obj, prop);\n  }\n\n  /**\n   * ### .decreasesBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function decreases a numeric object property or a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val -= 5 };\n   *     assert.decreasesBy(fn, obj, 'val', 5);\n   *\n   * @name decreasesBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.decreasesBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.decreasesBy, true)\n      .to.decrease(obj, prop).by(delta);\n  }\n\n  /**\n   * ### .doesNotDecrease(function, object, property, [message])\n   *\n   * Asserts that a function does not decreases a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 15 };\n   *     assert.doesNotDecrease(fn, obj, 'val');\n   *\n   * @name doesNotDecrease\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotDecrease = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotDecrease, true)\n      .to.not.decrease(obj, prop);\n  }\n\n  /**\n   * ### .doesNotDecreaseBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not decreases a numeric object property or a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     assert.doesNotDecreaseBy(fn, obj, 'val', 1);\n   *\n   * @name doesNotDecreaseBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotDecreaseBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotDecreaseBy, true)\n      .to.not.decrease(obj, prop).by(delta);\n  }\n\n  /**\n   * ### .decreasesButNotBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not decreases a numeric object property or a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     assert.decreasesButNotBy(fn, obj, 'val', 1);\n   *\n   * @name decreasesButNotBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.decreasesButNotBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.decreasesButNotBy, true)\n      .to.decrease(obj, prop).but.not.by(delta);\n  }\n\n  /*!\n   * ### .ifError(object)\n   *\n   * Asserts if value is not a false value, and throws if it is a true value.\n   * This is added to allow for chai to be a drop-in replacement for Node's\n   * assert class.\n   *\n   *     var err = new Error('I am a custom error');\n   *     assert.ifError(err); // Rethrows err!\n   *\n   * @name ifError\n   * @param {Object} object\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.ifError = function (val) {\n    if (val) {\n      throw(val);\n    }\n  };\n\n  /**\n   * ### .isExtensible(object)\n   *\n   * Asserts that `object` is extensible (can have new properties added to it).\n   *\n   *     assert.isExtensible({});\n   *\n   * @name isExtensible\n   * @alias extensible\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isExtensible = function (obj, msg) {\n    new Assertion(obj, msg, assert.isExtensible, true).to.be.extensible;\n  };\n\n  /**\n   * ### .isNotExtensible(object)\n   *\n   * Asserts that `object` is _not_ extensible.\n   *\n   *     var nonExtensibleObject = Object.preventExtensions({});\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.freeze({});\n   *\n   *     assert.isNotExtensible(nonExtensibleObject);\n   *     assert.isNotExtensible(sealedObject);\n   *     assert.isNotExtensible(frozenObject);\n   *\n   * @name isNotExtensible\n   * @alias notExtensible\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotExtensible = function (obj, msg) {\n    new Assertion(obj, msg, assert.isNotExtensible, true).to.not.be.extensible;\n  };\n\n  /**\n   * ### .isSealed(object)\n   *\n   * Asserts that `object` is sealed (cannot have new properties added to it\n   * and its existing properties cannot be removed).\n   *\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.seal({});\n   *\n   *     assert.isSealed(sealedObject);\n   *     assert.isSealed(frozenObject);\n   *\n   * @name isSealed\n   * @alias sealed\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isSealed = function (obj, msg) {\n    new Assertion(obj, msg, assert.isSealed, true).to.be.sealed;\n  };\n\n  /**\n   * ### .isNotSealed(object)\n   *\n   * Asserts that `object` is _not_ sealed.\n   *\n   *     assert.isNotSealed({});\n   *\n   * @name isNotSealed\n   * @alias notSealed\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotSealed = function (obj, msg) {\n    new Assertion(obj, msg, assert.isNotSealed, true).to.not.be.sealed;\n  };\n\n  /**\n   * ### .isFrozen(object)\n   *\n   * Asserts that `object` is frozen (cannot have new properties added to it\n   * and its existing properties cannot be modified).\n   *\n   *     var frozenObject = Object.freeze({});\n   *     assert.frozen(frozenObject);\n   *\n   * @name isFrozen\n   * @alias frozen\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFrozen = function (obj, msg) {\n    new Assertion(obj, msg, assert.isFrozen, true).to.be.frozen;\n  };\n\n  /**\n   * ### .isNotFrozen(object)\n   *\n   * Asserts that `object` is _not_ frozen.\n   *\n   *     assert.isNotFrozen({});\n   *\n   * @name isNotFrozen\n   * @alias notFrozen\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFrozen = function (obj, msg) {\n    new Assertion(obj, msg, assert.isNotFrozen, true).to.not.be.frozen;\n  };\n\n  /**\n   * ### .isEmpty(target)\n   *\n   * Asserts that the target does not contain any values.\n   * For arrays and strings, it checks the `length` property.\n   * For `Map` and `Set` instances, it checks the `size` property.\n   * For non-function objects, it gets the count of own\n   * enumerable string keys.\n   *\n   *     assert.isEmpty([]);\n   *     assert.isEmpty('');\n   *     assert.isEmpty(new Map);\n   *     assert.isEmpty({});\n   *\n   * @name isEmpty\n   * @alias empty\n   * @param {Object|Array|String|Map|Set} target\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isEmpty = function(val, msg) {\n    new Assertion(val, msg, assert.isEmpty, true).to.be.empty;\n  };\n\n  /**\n   * ### .isNotEmpty(target)\n   *\n   * Asserts that the target contains values.\n   * For arrays and strings, it checks the `length` property.\n   * For `Map` and `Set` instances, it checks the `size` property.\n   * For non-function objects, it gets the count of own\n   * enumerable string keys.\n   *\n   *     assert.isNotEmpty([1, 2]);\n   *     assert.isNotEmpty('34');\n   *     assert.isNotEmpty(new Set([5, 6]));\n   *     assert.isNotEmpty({ key: 7 });\n   *\n   * @name isNotEmpty\n   * @alias notEmpty\n   * @param {Object|Array|String|Map|Set} target\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotEmpty = function(val, msg) {\n    new Assertion(val, msg, assert.isNotEmpty, true).to.not.be.empty;\n  };\n\n  /*!\n   * Aliases.\n   */\n\n  (function alias(name, as){\n    assert[as] = assert[name];\n    return alias;\n  })\n  ('isOk', 'ok')\n  ('isNotOk', 'notOk')\n  ('throws', 'throw')\n  ('throws', 'Throw')\n  ('isExtensible', 'extensible')\n  ('isNotExtensible', 'notExtensible')\n  ('isSealed', 'sealed')\n  ('isNotSealed', 'notSealed')\n  ('isFrozen', 'frozen')\n  ('isNotFrozen', 'notFrozen')\n  ('isEmpty', 'empty')\n  ('isNotEmpty', 'notEmpty');\n};\n", "/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar used = [];\n\n/*!\n * Chai version\n */\n\nexports.version = '4.3.3';\n\n/*!\n * Assertion Error\n */\n\nexports.AssertionError = require('assertion-error');\n\n/*!\n * Utils for plugins (not exported)\n */\n\nvar util = require('./chai/utils');\n\n/**\n * # .use(function)\n *\n * Provides a way to extend the internals of Chai.\n *\n * @param {Function}\n * @returns {this} for chaining\n * @api public\n */\n\nexports.use = function (fn) {\n  if (!~used.indexOf(fn)) {\n    fn(exports, util);\n    used.push(fn);\n  }\n\n  return exports;\n};\n\n/*!\n * Utility Functions\n */\n\nexports.util = util;\n\n/*!\n * Configuration\n */\n\nvar config = require('./chai/config');\nexports.config = config;\n\n/*!\n * Primary `Assertion` prototype\n */\n\nvar assertion = require('./chai/assertion');\nexports.use(assertion);\n\n/*!\n * Core Assertions\n */\n\nvar core = require('./chai/core/assertions');\nexports.use(core);\n\n/*!\n * Expect interface\n */\n\nvar expect = require('./chai/interface/expect');\nexports.use(expect);\n\n/*!\n * Should interface\n */\n\nvar should = require('./chai/interface/should');\nexports.use(should);\n\n/*!\n * Assert interface\n */\n\nvar assert = require('./chai/interface/assert');\nexports.use(assert);\n", "module.exports = require('./lib/chai');\n", "export function sum(a: number, b: number): number {\n    return a + b;\n}", "import chai from './index.js';\n\nexport const expect = chai.expect;\nexport const version = chai.version;\nexport const Assertion = chai.Assertion;\nexport const AssertionError = chai.AssertionError;\nexport const util = chai.util;\nexport const config = chai.config;\nexport const use = chai.use;\nexport const should = chai.should;\nexport const assert = chai.assert;\nexport const core = chai.core;\n\nexport default chai;\n", "import { sum } from \"../src/sum\";\nimport { expect } from \"chai\";\n\nexport default function sumTest() {\n    expect(sum(2, 2)).to.be.equal(5);\n}", "import sumTest from './sum.test';\n\nsumTest();"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAMA,AASA,yBAAoB;AAClB,YAAI,WAAW,CAAC,EAAE,MAAM,KAAK,SAAS;AAEtC,8BAAuB,KAAK,KAAK;AAC/B,iBAAO,KAAK,GAAG,EAAE,QAAQ,SAAU,KAAK;AACtC,gBAAI,CAAC,CAAC,SAAS,QAAQ,GAAG;AAAG,kBAAI,OAAO,IAAI;AAAA,UAC9C,CAAC;AAAA,QACH;AAEA,eAAO,yBAA0B;AAC/B,cAAI,OAAO,CAAC,EAAE,MAAM,KAAK,SAAS,GAC9B,IAAI,GACJ,MAAM,CAAC;AAEX,iBAAO,IAAI,KAAK,QAAQ,KAAK;AAC3B,yBAAa,KAAK,KAAK,EAAE;AAAA,UAC3B;AAEA,iBAAO;AAAA,QACT;AAAA,MACF;AAEA,AAIA,aAAO,UAAU;AAajB,+BAAyB,SAAS,QAAQ,KAAK;AAC7C,YAAI,SAAS,QAAQ,QAAQ,WAAW,SAAS,eAAe,QAAQ,GACpE,QAAQ,OAAO,UAAU,CAAC,CAAC;AAG/B,aAAK,UAAU,WAAW;AAC1B,aAAK,WAAW;AAGhB,iBAAS,OAAO,OAAO;AACrB,eAAK,OAAO,MAAM;AAAA,QACpB;AAGA,cAAM,OAAO;AACb,YAAI,MAAM,mBAAmB;AAC3B,gBAAM,kBAAkB,MAAM,GAAG;AAAA,QACnC,OAAO;AACL,cAAI;AACF,kBAAM,IAAI,MAAM;AAAA,UAClB,SAAQ,GAAN;AACA,iBAAK,QAAQ,EAAE;AAAA,UACjB;AAAA,QACF;AAAA,MACF;AAEA,AAIA,sBAAe,YAAY,OAAO,OAAO,MAAM,SAAS;AAExD,AAIA,sBAAe,UAAU,OAAO;AAEhC,AAIA,sBAAe,UAAU,cAAc;AASvC,sBAAe,UAAU,SAAS,SAAU,OAAO;AACjD,YAAI,SAAS,QAAQ,eAAe,UAAU,OAAO,GACjD,QAAQ,OAAO,EAAE,MAAM,KAAK,KAAK,GAAG,IAAI;AAG5C,YAAI,UAAU,SAAS,KAAK,OAAO;AACjC,gBAAM,QAAQ,KAAK;AAAA,QACrB;AAEA,eAAO;AAAA,MACT;AAAA;AAAA;;;ACnHA;AAAA;AAAA;AA8CA,2BAAqB,KAAK,MAAM;AAC9B,YAAI,OAAO,QAAQ,eAAe,QAAQ,MAAM;AAC9C,iBAAO;AAAA,QACT;AAGA,eAAO,QAAQ,OAAO,GAAG;AAAA,MAC3B;AAqBA,yBAAmB,MAAM;AACvB,YAAI,MAAM,KAAK,QAAQ,cAAc,MAAM;AAC3C,YAAI,QAAQ,IAAI,MAAM,iBAAiB;AACvC,eAAO,MAAM,IAAI,oBAAoB,OAAO;AAC1C,cACE,UAAU,iBACV,UAAU,eACV,UAAU,aACV;AACA,mBAAO,CAAC;AAAA,UACV;AACA,cAAI,SAAS;AACb,cAAI,OAAO,OAAO,KAAK,KAAK;AAC5B,cAAI,SAAS;AACb,cAAI,MAAM;AACR,qBAAS,EAAE,GAAG,WAAW,KAAK,EAAE,EAAE;AAAA,UACpC,OAAO;AACL,qBAAS,EAAE,GAAG,MAAM,QAAQ,eAAe,IAAI,EAAE;AAAA,UACnD;AAEA,iBAAO;AAAA,QACT,CAAC;AAAA,MACH;AAiBA,oCAA8B,KAAK,QAAQ,WAAW;AACpD,YAAI,iBAAiB;AACrB,YAAI,MAAM;AACV,oBAAY,OAAO,cAAc,cAAc,OAAO,SAAS;AAE/D,iBAAS,IAAI,GAAG,IAAI,WAAW,KAAK;AAClC,cAAI,OAAO,OAAO;AAClB,cAAI,gBAAgB;AAClB,gBAAI,OAAO,KAAK,MAAM,aAAa;AACjC,+BAAiB,eAAe,KAAK;AAAA,YACvC,OAAO;AACL,+BAAiB,eAAe,KAAK;AAAA,YACvC;AAEA,gBAAI,MAAM,YAAY,GAAG;AACvB,oBAAM;AAAA,YACR;AAAA,UACF;AAAA,QACF;AAEA,eAAO;AAAA,MACT;AAgBA,oCAA8B,KAAK,KAAK,QAAQ;AAC9C,YAAI,UAAU;AACd,YAAI,YAAY,OAAO;AACvB,YAAI,OAAO;AAEX,iBAAS,IAAI,GAAG,IAAI,WAAW,KAAK;AAClC,cAAI,WAAW;AACf,cAAI,UAAU;AACd,iBAAO,OAAO;AAGd,cAAI,MAAM,YAAY,GAAG;AACvB,uBAAW,OAAO,KAAK,MAAM,cAAc,KAAK,IAAI,KAAK;AAEzD,oBAAQ,YAAY;AAAA,UACtB,WAAW,OAAO,KAAK,MAAM,eAAe,QAAQ,KAAK,IAAI;AAC3D,sBAAU,QAAQ,KAAK;AAAA,UACzB,WAAW,OAAO,KAAK,MAAM,eAAe,QAAQ,KAAK,IAAI;AAC3D,sBAAU,QAAQ,KAAK;AAAA,UACzB,OAAO;AAEL,gBAAI,OAAO,OAAO,IAAI;AAEtB,uBAAW,OAAO,KAAK,MAAM,cAAc,KAAK,IAAI,KAAK;AAEzD,sBAAU,OAAO,KAAK,MAAM,cAAc,CAAC,IAAI,CAAC;AAChD,oBAAQ,YAAY;AACpB,sBAAU,QAAQ;AAAA,UACpB;AAAA,QACF;AAAA,MACF;AAwBA,2BAAqB,KAAK,MAAM;AAC9B,YAAI,SAAS,UAAU,IAAI;AAC3B,YAAI,OAAO,OAAO,OAAO,SAAS;AAClC,YAAI,OAAO;AAAA,UACT,QACE,OAAO,SAAS,IACd,qBAAqB,KAAK,QAAQ,OAAO,SAAS,CAAC,IACnD;AAAA,UACJ,MAAM,KAAK,KAAK,KAAK;AAAA,UACrB,OAAO,qBAAqB,KAAK,MAAM;AAAA,QACzC;AACA,aAAK,SAAS,YAAY,KAAK,QAAQ,KAAK,IAAI;AAEhD,eAAO;AAAA,MACT;AAiCA,4BAAsB,KAAK,MAAM;AAC/B,YAAI,OAAO,YAAY,KAAK,IAAI;AAChC,eAAO,KAAK;AAAA,MACd;AAmCA,4BAAsB,KAAK,MAAM,KAAK;AACpC,YAAI,SAAS,UAAU,IAAI;AAC3B,6BAAqB,KAAK,KAAK,MAAM;AACrC,eAAO;AAAA,MACT;AAEA,aAAO,UAAU;AAAA,QACf;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA;AAAA;;;AC5SA;AAAA;AAyBA,aAAO,UAAU,cAAc,KAAK,KAAK,OAAO;AAC9C,YAAI,QAAQ,IAAI,WAAY,KAAI,UAAU,uBAAO,OAAO,IAAI;AAC5D,YAAI,UAAU,WAAW,GAAG;AAC1B,gBAAM,OAAO;AAAA,QACf,OAAO;AACL,iBAAO,MAAM;AAAA,QACf;AAAA,MACF;AAAA;AAAA;;;AChCA;AAAA;AAMA,AAIA,UAAI,OAAO;AAaX,aAAO,UAAU,cAAc,KAAK,MAAM;AACxC,YAAI,SAAS,KAAK,KAAK,QAAQ,GAC3B,OAAO,KAAK;AAChB,eAAO,SAAS,CAAC,OAAO;AAAA,MAC1B;AAAA;AAAA;;;AC3BA;AAAA;AAAA,MAAC,UAAU,SAAQ,SAAS;AAC3B,eAAO,YAAY,YAAY,OAAO,WAAW,cAAc,OAAO,UAAU,QAAQ,IACxF,OAAO,WAAW,cAAc,OAAO,MAAM,OAAO,OAAO,IAC1D,QAAO,aAAa,QAAQ;AAAA,MAC9B,GAAE,SAAO,WAAY;AAAE;AAOvB,YAAI,gBAAgB,OAAO,YAAY;AAGvC,YAAI,eAAe,OAAO,SAAS,WAAW,OAAO;AAErD,YAAI,eAAe,OAAO,WAAW;AACrC,YAAI,YAAY,OAAO,QAAQ;AAC/B,YAAI,YAAY,OAAO,QAAQ;AAC/B,YAAI,gBAAgB,OAAO,YAAY;AACvC,YAAI,gBAAgB,OAAO,YAAY;AACvC,YAAI,iBAAiB,OAAO,aAAa;AACzC,YAAI,uBAAuB,gBAAgB,OAAO,OAAO,aAAa;AACtE,YAAI,0BAA0B,gBAAgB,OAAO,OAAO,gBAAgB;AAC5E,YAAI,mBAAmB,aAAa,OAAO,IAAI,UAAU,YAAY;AACrE,YAAI,mBAAmB,aAAa,OAAO,IAAI,UAAU,YAAY;AACrE,YAAI,uBAAuB,oBAAoB,OAAO,eAAe,qBAAI,IAAI,GAAE,QAAQ,CAAC;AACxF,YAAI,uBAAuB,oBAAoB,OAAO,eAAe,qBAAI,IAAI,GAAE,QAAQ,CAAC;AACxF,YAAI,sBAAsB,wBAAwB,OAAO,MAAM,UAAU,OAAO,cAAc;AAC9F,YAAI,yBAAyB,uBAAuB,OAAO,eAAe,CAAC,EAAE,OAAO,UAAU,CAAC;AAC/F,YAAI,uBAAuB,wBAAwB,OAAO,OAAO,UAAU,OAAO,cAAc;AAChG,YAAI,0BAA0B,wBAAwB,OAAO,eAAe,GAAG,OAAO,UAAU,CAAC;AACjG,YAAI,0BAA0B;AAC9B,YAAI,2BAA2B;AAW/B,4BAAoB,KAAK;AAevB,cAAI,YAAY,OAAO;AACvB,cAAI,cAAc,UAAU;AAC1B,mBAAO;AAAA,UACT;AAQA,cAAI,QAAQ,MAAM;AAChB,mBAAO;AAAA,UACT;AAkBA,cAAI,QAAQ,cAAc;AACxB,mBAAO;AAAA,UACT;AAQA,cACE,MAAM,QAAQ,GAAG,KAChB,6BAA4B,SAAS,CAAE,QAAO,eAAe,OAC9D;AACA,mBAAO;AAAA,UACT;AAIA,cAAI,OAAO,WAAW,YAAY,WAAW,MAAM;AAQjD,gBAAI,OAAO,OAAO,aAAa,YAAY,QAAQ,OAAO,UAAU;AAClE,qBAAO;AAAA,YACT;AAqBA,gBAAI,OAAO,OAAO,aAAa,YAAY,QAAQ,OAAO,UAAU;AAClE,qBAAO;AAAA,YACT;AAEA,gBAAI,OAAO,OAAO,cAAc,UAAU;AAOxC,kBAAI,OAAO,OAAO,UAAU,cAAc,YACtC,QAAQ,OAAO,UAAU,WAAW;AACtC,uBAAO;AAAA,cACT;AAQA,kBAAI,OAAO,OAAO,UAAU,YAAY,YACpC,QAAQ,OAAO,UAAU,SAAS;AACpC,uBAAO;AAAA,cACT;AAAA,YACF;AAEA,gBAAK,QAAO,OAAO,gBAAgB,cAC/B,OAAO,OAAO,gBAAgB,aAC9B,eAAe,OAAO,aAAa;AAOrC,kBAAI,IAAI,YAAY,cAAc;AAChC,uBAAO;AAAA,cACT;AAcA,kBAAI,IAAI,YAAY,MAAM;AACxB,uBAAO;AAAA,cACT;AAcA,kBAAI,IAAI,YAAY,MAAM;AACxB,uBAAO;AAAA,cACT;AAAA,YACF;AAAA,UACF;AAwBA,cAAI,YAAa,2BAA2B,IAAI,OAAO;AACvD,cAAI,OAAO,cAAc,UAAU;AACjC,mBAAO;AAAA,UACT;AAEA,cAAI,eAAe,OAAO,eAAe,GAAG;AAS5C,cAAI,iBAAiB,OAAO,WAAW;AACrC,mBAAO;AAAA,UACT;AAQA,cAAI,iBAAiB,KAAK,WAAW;AACnC,mBAAO;AAAA,UACT;AAWA,cAAI,iBAAiB,iBAAiB,QAAQ,WAAW;AACvD,mBAAO;AAAA,UACT;AAQA,cAAI,aAAa,iBAAiB,IAAI,WAAW;AAC/C,mBAAO;AAAA,UACT;AAQA,cAAI,aAAa,iBAAiB,IAAI,WAAW;AAC/C,mBAAO;AAAA,UACT;AAQA,cAAI,iBAAiB,iBAAiB,QAAQ,WAAW;AACvD,mBAAO;AAAA,UACT;AAQA,cAAI,iBAAiB,iBAAiB,QAAQ,WAAW;AACvD,mBAAO;AAAA,UACT;AAQA,cAAI,kBAAkB,iBAAiB,SAAS,WAAW;AACzD,mBAAO;AAAA,UACT;AAQA,cAAI,aAAa,iBAAiB,sBAAsB;AACtD,mBAAO;AAAA,UACT;AAQA,cAAI,aAAa,iBAAiB,sBAAsB;AACtD,mBAAO;AAAA,UACT;AAQA,cAAI,uBAAuB,iBAAiB,wBAAwB;AAClE,mBAAO;AAAA,UACT;AAQA,cAAI,wBAAwB,iBAAiB,yBAAyB;AACpE,mBAAO;AAAA,UACT;AAQA,cAAI,iBAAiB,MAAM;AACzB,mBAAO;AAAA,UACT;AAEA,iBAAO,OACJ,UACA,SACA,KAAK,GAAG,EACR,MAAM,yBAAyB,wBAAwB;AAAA,QAC5D;AAEA,eAAO;AAAA,MAEP,CAAE;AAAA;AAAA;;;ACnYF;AAAA;AAoBA,UAAI,kBAAiB;AACrB,UAAI,OAAO;AACX,UAAI,OAAO;AAEX,aAAO,UAAU,qBAAqB,KAAK,OAAO;AAChD,YAAI,UAAU,KAAK,KAAK,SAAS;AACjC,YAAI,OAAO,KAAK,KAAK,MAAM;AAE3B,kBAAU,UAAU,UAAU,OAAO;AAErC,cAAM,KAAK,KAAK,QAAQ;AACxB,gBAAQ,MAAM,IAAI,SAAU,GAAG;AAAE,iBAAO,EAAE,YAAY;AAAA,QAAG,CAAC;AAC1D,cAAM,KAAK;AAGX,YAAI,MAAM,MAAM,IAAI,SAAU,GAAG,OAAO;AACtC,cAAI,MAAM,CAAC,CAAE,KAAK,KAAK,KAAK,KAAK,GAAI,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC,IAAI,OAAO;AACrE,cAAI,KAAK,MAAM,SAAS,KAAK,UAAU,MAAM,SAAS,IAAI,QAAQ;AAClE,iBAAO,KAAK,MAAM,MAAM;AAAA,QAC1B,CAAC,EAAE,KAAK,IAAI;AAEZ,YAAI,UAAU,KAAK,GAAG,EAAE,YAAY;AAEpC,YAAI,CAAC,MAAM,KAAK,SAAU,UAAU;AAAE,iBAAO,YAAY;AAAA,QAAU,CAAC,GAAG;AACrE,gBAAM,IAAI,gBACR,UAAU,2BAA2B,MAAM,WAAW,UAAU,UAChE,QACA,IACF;AAAA,QACF;AAAA,MACF;AAAA;AAAA;;;AClDA;AAAA;AAiBA,aAAO,UAAU,mBAAmB,KAAK,MAAM;AAC7C,eAAO,KAAK,SAAS,IAAI,KAAK,KAAK,IAAI;AAAA,MACzC;AAAA;AAAA;;;ACnBA;AAAA;AAAA;AAqBA,UAAI,WAAW,SAAS,UAAU;AAClC,UAAI,oBAAoB;AACxB,2BAAqB,OAAO;AAC1B,YAAI,OAAO,UAAU,YAAY;AAC/B,iBAAO;AAAA,QACT;AAEA,YAAI,OAAO;AACX,YAAI,OAAO,SAAS,UAAU,SAAS,eAAe,OAAO,MAAM,SAAS,aAAa;AAEvF,cAAI,QAAQ,SAAS,KAAK,KAAK,EAAE,MAAM,iBAAiB;AACxD,cAAI,OAAO;AACT,mBAAO,MAAM;AAAA,UACf;AAAA,QACF,OAAO;AAEL,iBAAO,MAAM;AAAA,QACf;AAEA,eAAO;AAAA,MACT;AAEA,aAAO,UAAU;AAAA;AAAA;;;AC3CjB;AAAA;AAAA;AAAA;;;ACAA;AAAA;AAAA,MAAC,UAAU,SAAQ,SAAS;AAC1B,eAAO,YAAY,YAAY,OAAO,WAAW,cAAc,QAAQ,OAAO,IAC9E,OAAO,WAAW,cAAc,OAAO,MAAM,OAAO,CAAC,SAAS,GAAG,OAAO,IACvE,WAAS,OAAO,eAAe,cAAc,aAAa,WAAU,MAAM,QAAQ,QAAO,QAAQ,CAAC,CAAC;AAAA,MACtG,GAAE,SAAO,SAAU,UAAS;AAAE;AAE5B,yBAAiB,KAAK;AACpB;AAEA,cAAI,OAAO,WAAW,cAAc,OAAO,OAAO,aAAa,UAAU;AACvE,sBAAU,SAAU,MAAK;AACvB,qBAAO,OAAO;AAAA,YAChB;AAAA,UACF,OAAO;AACL,sBAAU,SAAU,MAAK;AACvB,qBAAO,QAAO,OAAO,WAAW,cAAc,KAAI,gBAAgB,UAAU,SAAQ,OAAO,YAAY,WAAW,OAAO;AAAA,YAC3H;AAAA,UACF;AAEA,iBAAO,QAAQ,GAAG;AAAA,QACpB;AAEA,gCAAwB,KAAK,GAAG;AAC9B,iBAAO,gBAAgB,GAAG,KAAK,sBAAsB,KAAK,CAAC,KAAK,4BAA4B,KAAK,CAAC,KAAK,iBAAiB;AAAA,QAC1H;AAEA,iCAAyB,KAAK;AAC5B,cAAI,MAAM,QAAQ,GAAG;AAAG,mBAAO;AAAA,QACjC;AAEA,uCAA+B,KAAK,GAAG;AACrC,cAAI,OAAO,WAAW,eAAe,CAAE,QAAO,YAAY,OAAO,GAAG;AAAI;AACxE,cAAI,OAAO,CAAC;AACZ,cAAI,KAAK;AACT,cAAI,KAAK;AACT,cAAI,KAAK;AAET,cAAI;AACF,qBAAS,KAAK,IAAI,OAAO,UAAU,GAAG,IAAI,CAAE,MAAM,MAAK,GAAG,KAAK,GAAG,OAAO,KAAK,MAAM;AAClF,mBAAK,KAAK,GAAG,KAAK;AAElB,kBAAI,KAAK,KAAK,WAAW;AAAG;AAAA,YAC9B;AAAA,UACF,SAAS,KAAP;AACA,iBAAK;AACL,iBAAK;AAAA,UACP,UAAE;AACA,gBAAI;AACF,kBAAI,CAAC,MAAM,GAAG,aAAa;AAAM,mBAAG,UAAU;AAAA,YAChD,UAAE;AACA,kBAAI;AAAI,sBAAM;AAAA,YAChB;AAAA,UACF;AAEA,iBAAO;AAAA,QACT;AAEA,6CAAqC,GAAG,QAAQ;AAC9C,cAAI,CAAC;AAAG;AACR,cAAI,OAAO,MAAM;AAAU,mBAAO,kBAAkB,GAAG,MAAM;AAC7D,cAAI,IAAI,OAAO,UAAU,SAAS,KAAK,CAAC,EAAE,MAAM,GAAG,EAAE;AACrD,cAAI,MAAM,YAAY,EAAE;AAAa,gBAAI,EAAE,YAAY;AACvD,cAAI,MAAM,SAAS,MAAM;AAAO,mBAAO,MAAM,KAAK,CAAC;AACnD,cAAI,MAAM,eAAe,2CAA2C,KAAK,CAAC;AAAG,mBAAO,kBAAkB,GAAG,MAAM;AAAA,QACjH;AAEA,mCAA2B,KAAK,KAAK;AACnC,cAAI,OAAO,QAAQ,MAAM,IAAI;AAAQ,kBAAM,IAAI;AAE/C,mBAAS,IAAI,GAAG,OAAO,IAAI,MAAM,GAAG,GAAG,IAAI,KAAK;AAAK,iBAAK,KAAK,IAAI;AAEnE,iBAAO;AAAA,QACT;AAEA,oCAA4B;AAC1B,gBAAM,IAAI,UAAU,2IAA2I;AAAA,QACjK;AAEA,YAAI,aAAa;AAAA,UACf,MAAM,CAAC,KAAK,IAAI;AAAA,UAChB,KAAK,CAAC,KAAK,IAAI;AAAA,UACf,QAAQ,CAAC,KAAK,IAAI;AAAA,UAClB,WAAW,CAAC,KAAK,IAAI;AAAA,UAErB,SAAS,CAAC,KAAK,IAAI;AAAA,UACnB,QAAQ,CAAC,KAAK,IAAI;AAAA,UAClB,QAAQ,CAAC,KAAK,IAAI;AAAA,UAGlB,OAAO,CAAC,MAAM,IAAI;AAAA,UAClB,KAAK,CAAC,MAAM,IAAI;AAAA,UAChB,OAAO,CAAC,MAAM,IAAI;AAAA,UAClB,QAAQ,CAAC,MAAM,IAAI;AAAA,UACnB,MAAM,CAAC,MAAM,IAAI;AAAA,UACjB,SAAS,CAAC,MAAM,IAAI;AAAA,UACpB,MAAM,CAAC,MAAM,IAAI;AAAA,UACjB,OAAO,CAAC,MAAM,IAAI;AAAA,UAClB,aAAa,CAAC,QAAQ,IAAI;AAAA,UAC1B,WAAW,CAAC,QAAQ,IAAI;AAAA,UACxB,aAAa,CAAC,QAAQ,IAAI;AAAA,UAC1B,cAAc,CAAC,QAAQ,IAAI;AAAA,UAC3B,YAAY,CAAC,QAAQ,IAAI;AAAA,UACzB,eAAe,CAAC,QAAQ,IAAI;AAAA,UAC5B,YAAY,CAAC,QAAQ,IAAI;AAAA,UACzB,aAAa,CAAC,QAAQ,IAAI;AAAA,UAC1B,MAAM,CAAC,MAAM,IAAI;AAAA,QACnB;AACA,YAAI,SAAS;AAAA,UACX,SAAS;AAAA,UACT,QAAQ;AAAA,UACR,QAAQ;AAAA,UACR,SAAS;AAAA,UACT,WAAW;AAAA,UACX,MAAM;AAAA,UACN,QAAQ;AAAA,UACR,QAAQ;AAAA,UACR,MAAM;AAAA,UACN,QAAQ;AAAA,QACV;AACA,YAAI,YAAY;AAEhB,0BAAkB,OAAO,WAAW;AAClC,cAAI,QAAQ,WAAW,OAAO,eAAe,WAAW;AAExD,cAAI,CAAC,OAAO;AACV,mBAAO,OAAO,KAAK;AAAA,UACrB;AAEA,iBAAO,QAAQ,OAAO,MAAM,IAAI,GAAG,EAAE,OAAO,OAAO,KAAK,GAAG,OAAO,EAAE,OAAO,MAAM,IAAI,GAAG;AAAA,QAC1F;AAEA,oCAA4B;AAC1B,cAAI,OAAO,UAAU,SAAS,KAAK,UAAU,OAAO,SAAY,UAAU,KAAK,CAAC,GAC5E,kBAAkB,KAAK,YACvB,aAAa,oBAAoB,SAAS,QAAQ,iBAClD,aAAa,KAAK,OAClB,QAAQ,eAAe,SAAS,IAAI,YACpC,cAAc,KAAK,QACnB,SAAS,gBAAgB,SAAS,QAAQ,aAC1C,qBAAqB,KAAK,eAC1B,gBAAgB,uBAAuB,SAAS,OAAO,oBACvD,iBAAiB,KAAK,WACtB,YAAY,mBAAmB,SAAS,QAAQ,gBAChD,sBAAsB,KAAK,gBAC3B,iBAAiB,wBAAwB,SAAS,WAAW,qBAC7D,mBAAmB,KAAK,aACxB,cAAc,qBAAqB,SAAS,WAAW,kBACvD,YAAY,KAAK,MACjB,OAAO,cAAc,SAAS,CAAC,IAAI,WACnC,gBAAgB,KAAK,UACrB,YAAW,kBAAkB,SAAS,WAAW,eACjD,eAAe,KAAK,SACpB,UAAU,iBAAiB,SAAS,SAAS;AAEjD,cAAI,UAAU;AAAA,YACZ,YAAY,QAAQ,UAAU;AAAA,YAC9B,OAAO,OAAO,KAAK;AAAA,YACnB,QAAQ,QAAQ,MAAM;AAAA,YACtB,eAAe,QAAQ,aAAa;AAAA,YACpC,WAAW,QAAQ,SAAS;AAAA,YAC5B,gBAAgB,OAAO,cAAc;AAAA,YACrC,aAAa,OAAO,WAAW;AAAA,YAC/B,UAAU,OAAO,SAAQ;AAAA,YACzB;AAAA,YACA;AAAA,UACF;AAEA,cAAI,QAAQ,QAAQ;AAClB,oBAAQ,UAAU;AAAA,UACpB;AAEA,iBAAO;AAAA,QACT;AACA,0BAAkB,QAAQ,QAAQ;AAChC,cAAI,OAAO,UAAU,SAAS,KAAK,UAAU,OAAO,SAAY,UAAU,KAAK;AAC/E,mBAAS,OAAO,MAAM;AACtB,cAAI,aAAa,KAAK;AACtB,cAAI,eAAe,OAAO;AAE1B,cAAI,aAAa,UAAU,eAAe,YAAY;AACpD,mBAAO;AAAA,UACT;AAEA,cAAI,eAAe,UAAU,eAAe,YAAY;AACtD,mBAAO,GAAG,OAAO,OAAO,MAAM,GAAG,SAAS,UAAU,CAAC,EAAE,OAAO,IAAI;AAAA,UACpE;AAEA,iBAAO;AAAA,QACT;AAEA,6BAAqB,MAAM,SAAS,aAAa;AAC/C,cAAI,YAAY,UAAU,SAAS,KAAK,UAAU,OAAO,SAAY,UAAU,KAAK;AACpF,wBAAc,eAAe,QAAQ;AACrC,cAAI,OAAO,KAAK;AAChB,cAAI,SAAS;AAAG,mBAAO;AACvB,cAAI,iBAAiB,QAAQ;AAC7B,cAAI,SAAS;AACb,cAAI,OAAO;AACX,cAAI,YAAY;AAEhB,mBAAS,IAAI,GAAG,IAAI,MAAM,KAAK,GAAG;AAChC,gBAAI,OAAO,IAAI,MAAM,KAAK;AAC1B,gBAAI,eAAe,IAAI,MAAM,KAAK;AAClC,wBAAY,GAAG,OAAO,WAAW,GAAG,EAAE,OAAO,KAAK,SAAS,GAAG,GAAG;AACjE,gBAAI,QAAQ,KAAK;AAEjB,oBAAQ,WAAW,iBAAiB,OAAO,SAAU,QAAO,IAAI,UAAU;AAC1E,gBAAI,SAAS,QAAQ,YAAY,OAAO,OAAO,IAAK,QAAO,KAAK;AAChE,gBAAI,aAAa,OAAO,SAAS,OAAO;AACxC,gBAAI,kBAAkB,aAAa,UAAU;AAG7C,gBAAI,QAAQ,aAAa,kBAAkB,OAAO,SAAS,UAAU,UAAU,gBAAgB;AAC7F;AAAA,YACF;AAIA,gBAAI,CAAC,QAAQ,CAAC,gBAAgB,kBAAkB,gBAAgB;AAC9D;AAAA,YACF;AAIA,mBAAO,OAAO,KAAK,YAAY,KAAK,IAAI,IAAI,OAAO,IAAK,gBAAe,KAAK;AAG5E,gBAAI,CAAC,QAAQ,gBAAgB,kBAAkB,kBAAkB,aAAa,KAAK,SAAS,gBAAgB;AAC1G;AAAA,YACF;AAEA,sBAAU;AAGV,gBAAI,CAAC,QAAQ,CAAC,gBAAgB,aAAa,KAAK,UAAU,gBAAgB;AACxE,0BAAY,GAAG,OAAO,WAAW,GAAG,EAAE,OAAO,KAAK,SAAS,IAAI,GAAG,GAAG;AACrE;AAAA,YACF;AAEA,wBAAY;AAAA,UACd;AAEA,iBAAO,GAAG,OAAO,MAAM,EAAE,OAAO,SAAS;AAAA,QAC3C;AAEA,iCAAyB,KAAK;AAC5B,cAAI,IAAI,MAAM,0BAA0B,GAAG;AACzC,mBAAO;AAAA,UACT;AAEA,iBAAO,KAAK,UAAU,GAAG,EAAE,QAAQ,MAAM,KAAK,EAAE,QAAQ,QAAQ,GAAG,EAAE,QAAQ,YAAY,GAAG;AAAA,QAC9F;AAEA,iCAAyB,OAAO,SAAS;AACvC,cAAI,QAAQ,eAAe,OAAO,CAAC,GAC/B,MAAM,MAAM,IACZ,QAAQ,MAAM;AAElB,kBAAQ,YAAY;AAEpB,cAAI,OAAO,QAAQ,UAAU;AAC3B,kBAAM,gBAAgB,GAAG;AAAA,UAC3B,WAAW,OAAO,QAAQ,UAAU;AAClC,kBAAM,IAAI,OAAO,QAAQ,QAAQ,KAAK,OAAO,GAAG,GAAG;AAAA,UACrD;AAEA,kBAAQ,YAAY,IAAI;AACxB,kBAAQ,QAAQ,QAAQ,OAAO,OAAO;AACtC,iBAAO,GAAG,OAAO,KAAK,IAAI,EAAE,OAAO,KAAK;AAAA,QAC1C;AAEA,8BAAsB,OAAO,SAAS;AAGpC,cAAI,qBAAqB,OAAO,KAAK,KAAK,EAAE,MAAM,MAAM,MAAM;AAC9D,cAAI,CAAC,MAAM,UAAU,CAAC,mBAAmB;AAAQ,mBAAO;AACxD,kBAAQ,YAAY;AACpB,cAAI,eAAe,YAAY,OAAO,OAAO;AAC7C,kBAAQ,YAAY,aAAa;AACjC,cAAI,mBAAmB;AAEvB,cAAI,mBAAmB,QAAQ;AAC7B,+BAAmB,YAAY,mBAAmB,IAAI,SAAU,KAAK;AACnE,qBAAO,CAAC,KAAK,MAAM,IAAI;AAAA,YACzB,CAAC,GAAG,SAAS,eAAe;AAAA,UAC9B;AAEA,iBAAO,KAAK,OAAO,YAAY,EAAE,OAAO,mBAAmB,KAAK,OAAO,gBAAgB,IAAI,IAAI,IAAI;AAAA,QACrG;AAqBA,YAAI,WAAW,SAAS,UAAU;AAClC,YAAI,oBAAoB;AACxB,6BAAqB,OAAO;AAC1B,cAAI,OAAO,UAAU,YAAY;AAC/B,mBAAO;AAAA,UACT;AAEA,cAAI,OAAO;AACX,cAAI,OAAO,SAAS,UAAU,SAAS,eAAe,OAAO,MAAM,SAAS,aAAa;AAEvF,gBAAI,QAAQ,SAAS,KAAK,KAAK,EAAE,MAAM,iBAAiB;AACxD,gBAAI,OAAO;AACT,qBAAO,MAAM;AAAA,YACf;AAAA,UACF,OAAO;AAEL,mBAAO,MAAM;AAAA,UACf;AAEA,iBAAO;AAAA,QACT;AAEA,YAAI,gBAAgB;AAEpB,YAAI,eAAe,uBAAsB,OAAO;AAE9C,cAAI,OAAO,WAAW,cAAc,iBAAiB,QAAQ;AAC3D,mBAAO;AAAA,UACT;AAEA,cAAI,MAAM,OAAO,cAAc;AAC7B,mBAAO,MAAM,OAAO;AAAA,UACtB;AAEA,iBAAO,cAAc,MAAM,WAAW;AAAA,QACxC;AAEA,mCAA2B,OAAO,SAAS;AACzC,cAAI,OAAO,aAAa,KAAK;AAC7B,kBAAQ,YAAY,KAAK,SAAS;AAGlC,cAAI,qBAAqB,OAAO,KAAK,KAAK,EAAE,MAAM,MAAM,MAAM;AAC9D,cAAI,CAAC,MAAM,UAAU,CAAC,mBAAmB;AAAQ,mBAAO,GAAG,OAAO,MAAM,IAAI;AAG5E,cAAI,SAAS;AAEb,mBAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,gBAAI,SAAS,GAAG,OAAO,QAAQ,QAAQ,SAAS,MAAM,IAAI,QAAQ,QAAQ,GAAG,QAAQ,CAAC,EAAE,OAAO,MAAM,MAAM,SAAS,IAAI,KAAK,IAAI;AACjI,oBAAQ,YAAY,OAAO;AAE3B,gBAAI,MAAM,OAAO,MAAM,UAAU,QAAQ,YAAY,GAAG;AACtD,wBAAU,GAAG,OAAO,WAAW,GAAG,EAAE,OAAO,MAAM,SAAS,MAAM,KAAK,GAAG,GAAG;AAC3E;AAAA,YACF;AAEA,sBAAU;AAAA,UACZ;AAEA,cAAI,mBAAmB;AAEvB,cAAI,mBAAmB,QAAQ;AAC7B,+BAAmB,YAAY,mBAAmB,IAAI,SAAU,KAAK;AACnE,qBAAO,CAAC,KAAK,MAAM,IAAI;AAAA,YACzB,CAAC,GAAG,SAAS,eAAe;AAAA,UAC9B;AAEA,iBAAO,GAAG,OAAO,MAAM,IAAI,EAAE,OAAO,MAAM,EAAE,OAAO,mBAAmB,KAAK,OAAO,gBAAgB,IAAI,IAAI,IAAI;AAAA,QAChH;AAEA,6BAAqB,YAAY,SAAS;AAExC,cAAI,QAAQ,WAAW,OAAO,EAAE,MAAM,GAAG;AACzC,cAAI,OAAO,MAAM;AACjB,iBAAO,QAAQ,QAAQ,GAAG,OAAO,MAAM,GAAG,EAAE,OAAO,SAAS,MAAM,IAAI,QAAQ,WAAW,KAAK,SAAS,CAAC,CAAC,GAAG,MAAM;AAAA,QACpH;AAEA,iCAAyB,MAAM,SAAS;AACtC,cAAI,OAAO,cAAc,IAAI;AAE7B,cAAI,CAAC,MAAM;AACT,mBAAO,QAAQ,QAAQ,cAAc,SAAS;AAAA,UAChD;AAEA,iBAAO,QAAQ,QAAQ,aAAa,OAAO,SAAS,MAAM,QAAQ,WAAW,EAAE,GAAG,GAAG,GAAG,SAAS;AAAA,QACnG;AAEA,iCAAyB,MAAM,SAAS;AACtC,cAAI,QAAQ,eAAe,MAAM,CAAC,GAC9B,MAAM,MAAM,IACZ,QAAQ,MAAM;AAElB,kBAAQ,YAAY;AACpB,gBAAM,QAAQ,QAAQ,KAAK,OAAO;AAClC,kBAAQ,YAAY,IAAI;AACxB,kBAAQ,QAAQ,QAAQ,OAAO,OAAO;AACtC,iBAAO,GAAG,OAAO,KAAK,MAAM,EAAE,OAAO,KAAK;AAAA,QAC5C;AAGA,8BAAsB,KAAK;AACzB,cAAI,UAAU,CAAC;AACf,cAAI,QAAQ,SAAU,OAAO,KAAK;AAChC,oBAAQ,KAAK,CAAC,KAAK,KAAK,CAAC;AAAA,UAC3B,CAAC;AACD,iBAAO;AAAA,QACT;AAEA,4BAAoB,KAAK,SAAS;AAChC,cAAI,OAAO,IAAI,OAAO;AAEtB,cAAI,QAAQ,GAAG;AACb,mBAAO;AAAA,UACT;AAEA,kBAAQ,YAAY;AACpB,iBAAO,QAAQ,OAAO,YAAY,aAAa,GAAG,GAAG,SAAS,eAAe,GAAG,IAAI;AAAA,QACtF;AAEA,YAAI,QAAQ,OAAO,SAAS,SAAU,GAAG;AACvC,iBAAO,MAAM;AAAA,QACf;AAGA,+BAAuB,QAAQ,SAAS;AACtC,cAAI,MAAM,MAAM,GAAG;AACjB,mBAAO,QAAQ,QAAQ,OAAO,QAAQ;AAAA,UACxC;AAEA,cAAI,WAAW,UAAU;AACvB,mBAAO,QAAQ,QAAQ,YAAY,QAAQ;AAAA,UAC7C;AAEA,cAAI,WAAW,WAAW;AACxB,mBAAO,QAAQ,QAAQ,aAAa,QAAQ;AAAA,UAC9C;AAEA,cAAI,WAAW,GAAG;AAChB,mBAAO,QAAQ,QAAQ,IAAI,WAAW,WAAW,OAAO,MAAM,QAAQ;AAAA,UACxE;AAEA,iBAAO,QAAQ,QAAQ,SAAS,QAAQ,QAAQ,QAAQ,GAAG,QAAQ;AAAA,QACrE;AAEA,+BAAuB,QAAQ,SAAS;AACtC,cAAI,OAAO,SAAS,OAAO,SAAS,GAAG,QAAQ,WAAW,CAAC;AAC3D,cAAI,SAAS;AAAW,oBAAQ;AAChC,iBAAO,QAAQ,QAAQ,MAAM,QAAQ;AAAA,QACvC;AAEA,+BAAuB,OAAO,SAAS;AACrC,cAAI,QAAQ,MAAM,SAAS,EAAE,MAAM,GAAG,EAAE;AACxC,cAAI,eAAe,QAAQ,WAAY,KAAI,MAAM;AACjD,cAAI,SAAS,MAAM;AACnB,iBAAO,QAAQ,QAAQ,IAAI,OAAO,SAAS,QAAQ,YAAY,GAAG,GAAG,EAAE,OAAO,KAAK,GAAG,QAAQ;AAAA,QAChG;AAEA,8BAAsB,KAAK;AACzB,cAAI,SAAS,CAAC;AACd,cAAI,QAAQ,SAAU,OAAO;AAC3B,mBAAO,KAAK,KAAK;AAAA,UACnB,CAAC;AACD,iBAAO;AAAA,QACT;AAEA,4BAAoB,KAAK,SAAS;AAChC,cAAI,IAAI,SAAS;AAAG,mBAAO;AAC3B,kBAAQ,YAAY;AACpB,iBAAO,QAAQ,OAAO,YAAY,aAAa,GAAG,GAAG,OAAO,GAAG,IAAI;AAAA,QACrE;AAEA,YAAI,oBAAoB,IAAI,OAAO,mJAAwJ,GAAG;AAC9L,YAAI,mBAAmB;AAAA,UACrB,MAAM;AAAA,UACN,KAAM;AAAA,UACN,MAAM;AAAA,UACN,MAAM;AAAA,UACN,MAAM;AAAA,UACN,KAAK;AAAA,UACL,MAAM;AAAA,QACR;AACA,YAAI,MAAM;AACV,YAAI,gBAAgB;AAEpB,wBAAgB,MAAM;AACpB,iBAAO,iBAAiB,SAAS,MAAM,OAAO,OAAO,OAAO,KAAK,WAAW,CAAC,EAAE,SAAS,GAAG,CAAC,EAAE,MAAM,CAAC,aAAa,CAAC;AAAA,QACrH;AAEA,+BAAuB,QAAQ,SAAS;AACtC,cAAI,kBAAkB,KAAK,MAAM,GAAG;AAClC,qBAAS,OAAO,QAAQ,mBAAmB,MAAM;AAAA,UACnD;AAEA,iBAAO,QAAQ,QAAQ,IAAI,OAAO,SAAS,QAAQ,QAAQ,WAAW,CAAC,GAAG,GAAG,GAAG,QAAQ;AAAA,QAC1F;AAEA,+BAAuB,OAAO;AAC5B,cAAI,iBAAiB,OAAO,WAAW;AACrC,mBAAO,MAAM,cAAc,UAAU,OAAO,MAAM,aAAa,GAAG,IAAI;AAAA,UACxE;AAEA,iBAAO,MAAM,SAAS;AAAA,QACxB;AAEA,YAAI,kBAAkB,4BAA2B;AAC/C,iBAAO;AAAA,QACT;AAEA,YAAI;AACF,cAAI,mBAAmB,QAAQ,QAAQ,MAAM,GACzC,oBAAoB,iBAAiB,mBACrC,WAAW,iBAAiB,UAC5B,YAAY,iBAAiB;AAEjC,cAAI,MAAM,QAAQ,kBAAkB,QAAQ,QAAQ,CAAC,CAAC,GAAG;AACvD,8BAAkB,0BAAyB,OAAO,SAAS;AACzD,kBAAI,qBAAqB,kBAAkB,KAAK,GAC5C,sBAAsB,eAAe,oBAAoB,CAAC,GAC1D,QAAQ,oBAAoB,IAC5B,aAAa,oBAAoB;AAErC,kBAAI,UAAU,UAAU;AACtB,uBAAO;AAAA,cACT;AAEA,qBAAO,UAAU,OAAO,UAAU,YAAY,MAAM,IAAI,GAAG,EAAE,OAAO,QAAQ,QAAQ,YAAY,OAAO,GAAG,GAAG;AAAA,YAC/G;AAAA,UACF;AAAA,QACF,SAAS,SAAP;AAAA,QAEF;AAEA,YAAI,iBAAiB;AAErB,+BAAuB,QAAQ,SAAS;AACtC,cAAI,aAAa,OAAO,oBAAoB,MAAM;AAClD,cAAI,UAAU,OAAO,wBAAwB,OAAO,sBAAsB,MAAM,IAAI,CAAC;AAErF,cAAI,WAAW,WAAW,KAAK,QAAQ,WAAW,GAAG;AACnD,mBAAO;AAAA,UACT;AAEA,kBAAQ,YAAY;AACpB,kBAAQ,OAAO,QAAQ,QAAQ,CAAC;AAEhC,cAAI,QAAQ,KAAK,QAAQ,MAAM,KAAK,GAAG;AACrC,mBAAO;AAAA,UACT;AAEA,kBAAQ,KAAK,KAAK,MAAM;AACxB,cAAI,mBAAmB,YAAY,WAAW,IAAI,SAAU,KAAK;AAC/D,mBAAO,CAAC,KAAK,OAAO,IAAI;AAAA,UAC1B,CAAC,GAAG,SAAS,eAAe;AAC5B,cAAI,iBAAiB,YAAY,QAAQ,IAAI,SAAU,KAAK;AAC1D,mBAAO,CAAC,KAAK,OAAO,IAAI;AAAA,UAC1B,CAAC,GAAG,SAAS,eAAe;AAC5B,kBAAQ,KAAK,IAAI;AACjB,cAAI,MAAM;AAEV,cAAI,oBAAoB,gBAAgB;AACtC,kBAAM;AAAA,UACR;AAEA,iBAAO,KAAK,OAAO,gBAAgB,EAAE,OAAO,GAAG,EAAE,OAAO,gBAAgB,IAAI;AAAA,QAC9E;AAEA,YAAI,cAAc,OAAO,WAAW,eAAe,OAAO,cAAc,OAAO,cAAc;AAC7F,8BAAsB,OAAO,SAAS;AACpC,cAAI,OAAO;AAEX,cAAI,eAAe,eAAe,OAAO;AACvC,mBAAO,MAAM;AAAA,UACf;AAEA,iBAAO,QAAQ,cAAc,MAAM,WAAW;AAE9C,cAAI,CAAC,QAAQ,SAAS,UAAU;AAC9B,mBAAO;AAAA,UACT;AAEA,kBAAQ,YAAY,KAAK;AACzB,iBAAO,GAAG,OAAO,IAAI,EAAE,OAAO,cAAc,OAAO,OAAO,CAAC;AAAA,QAC7D;AAEA,kCAA0B,MAAM,SAAS;AACvC,cAAI,KAAK,WAAW;AAAG,mBAAO;AAC9B,kBAAQ,YAAY;AACpB,iBAAO,cAAc,OAAO,YAAY,MAAM,OAAO,GAAG,IAAI;AAAA,QAC9D;AAEA,YAAI,YAAY,CAAC,SAAS,QAAQ,UAAU,QAAQ,WAAW,YAAY,cAAc,gBAAgB,UAAU,aAAa;AAChI,iCAAyB,OAAO,SAAS;AACvC,cAAI,aAAa,OAAO,oBAAoB,KAAK,EAAE,OAAO,SAAU,KAAK;AACvE,mBAAO,UAAU,QAAQ,GAAG,MAAM;AAAA,UACpC,CAAC;AACD,cAAI,OAAO,MAAM;AACjB,kBAAQ,YAAY,KAAK;AACzB,cAAI,UAAU;AAEd,cAAI,OAAO,MAAM,YAAY,UAAU;AACrC,sBAAU,SAAS,MAAM,SAAS,QAAQ,QAAQ;AAAA,UACpD,OAAO;AACL,uBAAW,QAAQ,SAAS;AAAA,UAC9B;AAEA,oBAAU,UAAU,KAAK,OAAO,OAAO,IAAI;AAC3C,kBAAQ,YAAY,QAAQ,SAAS;AACrC,cAAI,mBAAmB,YAAY,WAAW,IAAI,SAAU,KAAK;AAC/D,mBAAO,CAAC,KAAK,MAAM,IAAI;AAAA,UACzB,CAAC,GAAG,SAAS,eAAe;AAC5B,iBAAO,GAAG,OAAO,IAAI,EAAE,OAAO,OAAO,EAAE,OAAO,mBAAmB,MAAM,OAAO,kBAAkB,IAAI,IAAI,EAAE;AAAA,QAC5G;AAEA,kCAA0B,MAAM,SAAS;AACvC,cAAI,QAAQ,eAAe,MAAM,CAAC,GAC9B,MAAM,MAAM,IACZ,QAAQ,MAAM;AAElB,kBAAQ,YAAY;AAEpB,cAAI,CAAC,OAAO;AACV,mBAAO,GAAG,OAAO,QAAQ,QAAQ,KAAK,QAAQ,CAAC;AAAA,UACjD;AAEA,iBAAO,GAAG,OAAO,QAAQ,QAAQ,KAAK,QAAQ,GAAG,GAAG,EAAE,OAAO,QAAQ,QAAQ,IAAK,OAAO,OAAO,GAAI,GAAG,QAAQ,CAAC;AAAA,QAClH;AACA,uCAA+B,YAAY,SAAS;AAElD,iBAAO,YAAY,YAAY,SAAS,aAAa,IAAI;AAAA,QAC3D;AACA,6BAAqB,SAAS,SAAS;AACrC,cAAI,aAAa,QAAQ,kBAAkB;AAC3C,cAAI,OAAO,QAAQ,QAAQ,YAAY;AACvC,cAAI,OAAO,QAAQ,QAAQ,IAAI,OAAO,IAAI,GAAG,SAAS;AACtD,cAAI,YAAY,QAAQ,QAAQ,KAAK,SAAS;AAC9C,cAAI,OAAO,QAAQ,QAAQ,KAAK,OAAO,MAAM,GAAG,GAAG,SAAS;AAC5D,kBAAQ,YAAY,KAAK,SAAS,IAAI;AACtC,cAAI,mBAAmB;AAEvB,cAAI,WAAW,SAAS,GAAG;AACzB,gCAAoB;AACpB,gCAAoB,YAAY,WAAW,IAAI,SAAU,KAAK;AAC5D,qBAAO,CAAC,KAAK,QAAQ,aAAa,GAAG,CAAC;AAAA,YACxC,CAAC,GAAG,SAAS,kBAAkB,GAAG;AAAA,UACpC;AAEA,kBAAQ,YAAY,iBAAiB;AACrC,cAAI,YAAW,QAAQ;AACvB,cAAI,WAAW,sBAAsB,QAAQ,UAAU,OAAO;AAE9D,cAAI,YAAY,SAAS,SAAS,WAAU;AAC1C,uBAAW,GAAG,OAAO,WAAW,GAAG,EAAE,OAAO,QAAQ,SAAS,QAAQ,GAAG;AAAA,UAC1E;AAEA,iBAAO,GAAG,OAAO,IAAI,EAAE,OAAO,gBAAgB,EAAE,OAAO,SAAS,EAAE,OAAO,QAAQ,EAAE,OAAO,IAAI;AAAA,QAChG;AAEA,YAAI,mBAAmB,OAAO,WAAW,cAAc,OAAO,OAAO,QAAQ;AAC7E,YAAI,cAAc,mBAAmB,OAAO,IAAI,cAAc,IAAI;AAClE,YAAI,cAAc;AAElB,YAAI;AAEF,cAAI,WAAW;AAEf,wBAAc,SAAS,UAAU,SAAS,QAAQ,SAAS;AAAA,QAC7D,SAAS,eAAP;AACA,wBAAc;AAAA,QAChB;AAEA,YAAI,iBAAiB,oBAAI,QAAQ;AACjC,YAAI,eAAe,CAAC;AACpB,YAAI,eAAe;AAAA,UACjB,WAAW,qBAAqB,OAAO,SAAS;AAC9C,mBAAO,QAAQ,QAAQ,aAAa,WAAW;AAAA,UACjD;AAAA,UACA,MAAM,eAAe,OAAO,SAAS;AACnC,mBAAO,QAAQ,QAAQ,MAAM,MAAM;AAAA,UACrC;AAAA,UACA,SAAS,iBAAiB,OAAO,SAAS;AACxC,mBAAO,QAAQ,QAAQ,OAAO,SAAS;AAAA,UACzC;AAAA,UACA,SAAS,kBAAiB,OAAO,SAAS;AACxC,mBAAO,QAAQ,QAAQ,OAAO,SAAS;AAAA,UACzC;AAAA,UACA,QAAQ;AAAA,UACR,QAAQ;AAAA,UACR,QAAQ;AAAA,UACR,QAAQ;AAAA,UACR,QAAQ;AAAA,UACR,QAAQ;AAAA,UACR,UAAU;AAAA,UACV,UAAU;AAAA,UACV,QAAQ;AAAA,UAER,QAAQ;AAAA,UACR,OAAO;AAAA,UACP,MAAM;AAAA,UACN,KAAK;AAAA,UACL,KAAK;AAAA,UACL,QAAQ;AAAA,UACR,SAAS;AAAA,UAET,SAAS,kBAAiB,OAAO,SAAS;AACxC,mBAAO,QAAQ,QAAQ,mBAAc,SAAS;AAAA,UAChD;AAAA,UACA,SAAS,kBAAiB,OAAO,SAAS;AACxC,mBAAO,QAAQ,QAAQ,mBAAc,SAAS;AAAA,UAChD;AAAA,UACA,WAAW;AAAA,UACX,WAAW;AAAA,UACX,YAAY;AAAA,UACZ,mBAAmB;AAAA,UACnB,YAAY;AAAA,UACZ,aAAa;AAAA,UACb,YAAY;AAAA,UACZ,aAAa;AAAA,UACb,cAAc;AAAA,UACd,cAAc;AAAA,UACd,WAAW,qBAAqB;AAC9B,mBAAO;AAAA,UACT;AAAA,UACA,UAAU,qBAAoB;AAC5B,mBAAO;AAAA,UACT;AAAA,UACA,aAAa,uBAAuB;AAClC,mBAAO;AAAA,UACT;AAAA,UACA,OAAO;AAAA,UACP,gBAAgB;AAAA,UAChB,UAAU;AAAA,QACZ;AAEA,YAAI,gBAAgB,wBAAuB,OAAO,SAAS,MAAM;AAC/D,cAAI,eAAe,SAAS,OAAO,MAAM,iBAAiB,YAAY;AACpE,mBAAO,MAAM,aAAa,OAAO;AAAA,UACnC;AAEA,cAAI,eAAe,eAAe,SAAS,OAAO,MAAM,iBAAiB,YAAY;AACnF,mBAAO,MAAM,aAAa,QAAQ,OAAO,OAAO;AAAA,UAClD;AAEA,cAAI,aAAa,SAAS,OAAO,MAAM,YAAY,YAAY;AAC7D,mBAAO,MAAM,QAAQ,QAAQ,OAAO,OAAO;AAAA,UAC7C;AAEA,cAAI,iBAAiB,SAAS,eAAe,IAAI,MAAM,WAAW,GAAG;AACnE,mBAAO,eAAe,IAAI,MAAM,WAAW,EAAE,OAAO,OAAO;AAAA,UAC7D;AAEA,cAAI,aAAa,OAAO;AACtB,mBAAO,aAAa,MAAM,OAAO,OAAO;AAAA,UAC1C;AAEA,iBAAO;AAAA,QACT;AAEA,YAAI,aAAa,OAAO,UAAU;AAElC,yBAAiB,OAAO,SAAS;AAC/B,oBAAU,iBAAiB,OAAO;AAClC,kBAAQ,UAAU;AAClB,cAAI,WAAW,SACX,gBAAgB,SAAS;AAC7B,cAAI,OAAO,UAAU,OAAO,SAAS,QAAQ,KAAK;AAElD,cAAI,SAAS,UAAU;AACrB,mBAAO,WAAW,KAAK,KAAK,EAAE,MAAM,GAAG,EAAE;AAAA,UAC3C;AAGA,cAAI,aAAa,OAAO;AACtB,mBAAO,aAAa,MAAM,OAAO,OAAO;AAAA,UAC1C;AAGA,cAAI,iBAAiB,OAAO;AAC1B,gBAAI,SAAS,cAAc,OAAO,SAAS,IAAI;AAE/C,gBAAI,QAAQ;AACV,kBAAI,OAAO,WAAW;AAAU,uBAAO;AACvC,qBAAO,QAAQ,QAAQ,OAAO;AAAA,YAChC;AAAA,UACF;AAEA,cAAI,QAAQ,QAAQ,OAAO,eAAe,KAAK,IAAI;AAEnD,cAAI,UAAU,OAAO,aAAa,UAAU,MAAM;AAChD,mBAAO,cAAc,OAAO,OAAO;AAAA,UACrC;AAIA,cAAI,SAAS,OAAO,gBAAgB,cAAc,iBAAiB,aAAa;AAC9E,mBAAO,YAAY,OAAO,OAAO;AAAA,UACnC;AAEA,cAAI,iBAAiB,OAAO;AAE1B,gBAAI,MAAM,gBAAgB,QAAQ;AAChC,qBAAO,aAAa,OAAO,OAAO;AAAA,YACpC;AAGA,mBAAO,cAAc,OAAO,OAAO;AAAA,UACrC;AAGA,cAAI,UAAU,OAAO,KAAK,GAAG;AAC3B,mBAAO,cAAc,OAAO,OAAO;AAAA,UACrC;AAGA,iBAAO,QAAQ,QAAQ,OAAO,KAAK,GAAG,IAAI;AAAA,QAC5C;AACA,qCAA6B,aAAa,WAAW;AACnD,cAAI,eAAe,IAAI,WAAW,GAAG;AACnC,mBAAO;AAAA,UACT;AAEA,yBAAe,IAAI,aAAa,SAAS;AACzC,iBAAO;AAAA,QACT;AACA,mCAA2B,WAAW,WAAW;AAC/C,cAAI,aAAa,cAAc;AAC7B,mBAAO;AAAA,UACT;AAEA,uBAAa,aAAa;AAC1B,iBAAO;AAAA,QACT;AACA,YAAI,SAAS;AAEb,iBAAQ,SAAS;AACjB,iBAAQ,UAAU;AAClB,iBAAQ,UAAU;AAClB,iBAAQ,sBAAsB;AAC9B,iBAAQ,oBAAoB;AAE5B,eAAO,eAAe,UAAS,cAAc,EAAE,OAAO,KAAK,CAAC;AAAA,MAE9D,CAAE;AAAA;AAAA;;;ACn1BF;AAAA;AAAA,aAAO,UAAU;AAAA,QAef,cAAc;AAAA,QAed,UAAU;AAAA,QAsBV,mBAAmB;AAAA,QAoBnB,UAAU;AAAA,QAoBV,mBAAmB,CAAC,QAAQ,SAAS,WAAW,QAAQ;AAAA,MAC1D;AAAA;AAAA;;;AC7FA;AAAA;AAGA,UAAI,UAAU;AACd,UAAI,QAAQ;AACZ,UAAI,UAAS;AAEb,aAAO,UAAU;AAiBjB,uBAAiB,KAAK,YAAY,OAAO,QAAQ;AAC/C,YAAI,UAAU;AAAA,UACZ;AAAA,UACA,OAAQ,OAAO,UAAU,cAAc,IAAI;AAAA,UAC3C;AAAA,UACA,UAAU,QAAO,oBAAoB,QAAO,oBAAoB;AAAA,QAClE;AACA,eAAO,MAAM,QAAQ,KAAK,OAAO;AAAA,MACnC;AAAA;AAAA;;;AChCA;AAAA;AAMA,AAIA,UAAI,UAAU;AACd,UAAI,UAAS;AAeb,aAAO,UAAU,oBAAoB,KAAK;AACxC,YAAI,MAAM,QAAQ,GAAG,GACjB,OAAO,OAAO,UAAU,SAAS,KAAK,GAAG;AAE7C,YAAI,QAAO,qBAAqB,IAAI,UAAU,QAAO,mBAAmB;AACtE,cAAI,SAAS,qBAAqB;AAChC,mBAAO,CAAC,IAAI,QAAQ,IAAI,SAAS,KAC7B,eACA,gBAAgB,IAAI,OAAO;AAAA,UACjC,WAAW,SAAS,kBAAkB;AACpC,mBAAO,aAAa,IAAI,SAAS;AAAA,UACnC,WAAW,SAAS,mBAAmB;AACrC,gBAAI,OAAO,OAAO,KAAK,GAAG,GACtB,OAAO,KAAK,SAAS,IACnB,KAAK,OAAO,GAAG,CAAC,EAAE,KAAK,IAAI,IAAI,UAC/B,KAAK,KAAK,IAAI;AACpB,mBAAO,eAAe,OAAO;AAAA,UAC/B,OAAO;AACL,mBAAO;AAAA,UACT;AAAA,QACF,OAAO;AACL,iBAAO;AAAA,QACT;AAAA,MACF;AAAA;AAAA;;;ACjDA;AAAA;AAMA,AAIA,UAAI,OAAO;AAAX,UACI,YAAY;AADhB,UAEI,aAAa;AAqBjB,aAAO,UAAU,oBAAoB,KAAK,MAAM;AAC9C,YAAI,SAAS,KAAK,KAAK,QAAQ,GAC3B,MAAM,KAAK,KAAK,QAAQ,GACxB,WAAW,KAAK,IAChB,SAAS,UAAU,KAAK,IAAI,GAC5B,MAAM,SAAS,KAAK,KAAK,KAAK,IAC9B,UAAU,KAAK,KAAK,SAAS;AAEjC,YAAG,OAAO,QAAQ;AAAY,gBAAM,IAAI;AACxC,cAAM,OAAO;AACb,cAAM,IACH,QAAQ,cAAc,WAAY;AAAE,iBAAO,WAAW,GAAG;AAAA,QAAG,CAAC,EAC7D,QAAQ,aAAa,WAAY;AAAE,iBAAO,WAAW,MAAM;AAAA,QAAG,CAAC,EAC/D,QAAQ,aAAa,WAAY;AAAE,iBAAO,WAAW,QAAQ;AAAA,QAAG,CAAC;AAEpE,eAAO,UAAU,UAAU,OAAO,MAAM;AAAA,MAC1C;AAAA;AAAA;;;ACjDA;AAAA;AA6BA,aAAO,UAAU,uBAAuB,WAAW,QAAQ,YAAY;AACrE,YAAI,QAAQ,UAAU,WAAY,WAAU,UAAU,uBAAO,OAAO,IAAI;AAExE,YAAI,CAAC,OAAO,SAAS;AACnB,iBAAO,UAAU,uBAAO,OAAO,IAAI;AAAA,QACrC;AAEA,qBAAa,UAAU,WAAW,IAAI,aAAa;AAEnD,iBAAS,QAAQ,OAAO;AACtB,cAAI,cACC,SAAS,YAAY,SAAS,UAAU,SAAS,cAAc,QAAQ,WAAY;AACtF,mBAAO,QAAQ,QAAQ,MAAM;AAAA,UAC/B;AAAA,QACF;AAAA,MACF;AAAA;AAAA;;;AC5CA;AAAA;AAAA;AAEA,AAMA,UAAI,OAAO;AACX,yBAAmB;AACjB,aAAK,OAAO,oBAAoB,KAAK,OAAO,IAAI,KAAK,IAAI;AAAA,MAC3D;AAEA,cAAQ,YAAY;AAAA,QAClB,KAAK,gBAAgB,KAAK;AACxB,iBAAO,IAAI,KAAK;AAAA,QAClB;AAAA,QACA,KAAK,gBAAgB,KAAK,OAAO;AAC/B,cAAI,OAAO,aAAa,GAAG,GAAG;AAC5B,mBAAO,eAAe,KAAK,KAAK,MAAM;AAAA,cACpC;AAAA,cACA,cAAc;AAAA,YAChB,CAAC;AAAA,UACH;AAAA,QACF;AAAA,MACF;AAEA,UAAI,aAAa,OAAO,YAAY,aAAa,UAAU;AAC3D,AAQA,8BAAwB,iBAAiB,kBAAkB,YAAY;AAErE,YAAI,CAAC,cAAc,YAAY,eAAe,KAAK,YAAY,gBAAgB,GAAG;AAChF,iBAAO;AAAA,QACT;AACA,YAAI,cAAc,WAAW,IAAI,eAAe;AAChD,YAAI,aAAa;AACf,cAAI,SAAS,YAAY,IAAI,gBAAgB;AAC7C,cAAI,OAAO,WAAW,WAAW;AAC/B,mBAAO;AAAA,UACT;AAAA,QACF;AACA,eAAO;AAAA,MACT;AAEA,AAQA,0BAAoB,iBAAiB,kBAAkB,YAAY,QAAQ;AAEzE,YAAI,CAAC,cAAc,YAAY,eAAe,KAAK,YAAY,gBAAgB,GAAG;AAChF;AAAA,QACF;AACA,YAAI,cAAc,WAAW,IAAI,eAAe;AAChD,YAAI,aAAa;AACf,sBAAY,IAAI,kBAAkB,MAAM;AAAA,QAC1C,OAAO;AACL,wBAAc,IAAI,WAAW;AAC7B,sBAAY,IAAI,kBAAkB,MAAM;AACxC,qBAAW,IAAI,iBAAiB,WAAW;AAAA,QAC7C;AAAA,MACF;AAEA,AAIA,aAAO,UAAU;AACjB,aAAO,QAAQ,aAAa;AAc5B,yBAAmB,iBAAiB,kBAAkB,SAAS;AAE7D,YAAI,WAAW,QAAQ,YAAY;AACjC,iBAAO,mBAAmB,iBAAiB,kBAAkB,OAAO;AAAA,QACtE;AAEA,YAAI,eAAe,YAAY,iBAAiB,gBAAgB;AAChE,YAAI,iBAAiB,MAAM;AACzB,iBAAO;AAAA,QACT;AAGA,eAAO,mBAAmB,iBAAiB,kBAAkB,OAAO;AAAA,MACtE;AAQA,2BAAqB,iBAAiB,kBAAkB;AAEtD,YAAI,oBAAoB,kBAAkB;AAExC,iBAAO,oBAAoB,KAAK,IAAI,oBAAoB,IAAI;AAAA,QAC9D;AAGA,YACE,oBAAoB,mBACpB,qBAAqB,kBACrB;AACA,iBAAO;AAAA,QACT;AAIA,YAAI,YAAY,eAAe,KAAK,YAAY,gBAAgB,GAAG;AAEjE,iBAAO;AAAA,QACT;AACA,eAAO;AAAA,MACT;AAEA,AAYA,kCAA4B,iBAAiB,kBAAkB,SAAS;AACtE,kBAAU,WAAW,CAAC;AACtB,gBAAQ,UAAU,QAAQ,YAAY,QAAQ,QAAQ,QAAQ,WAAW,IAAI,WAAW;AACxF,YAAI,aAAa,WAAW,QAAQ;AAGpC,YAAI,oBAAoB,eAAe,iBAAiB,kBAAkB,QAAQ,OAAO;AACzF,YAAI,sBAAsB,MAAM;AAC9B,iBAAO;AAAA,QACT;AACA,YAAI,qBAAqB,eAAe,kBAAkB,iBAAiB,QAAQ,OAAO;AAC1F,YAAI,uBAAuB,MAAM;AAC/B,iBAAO;AAAA,QACT;AAGA,YAAI,YAAY;AACd,cAAI,mBAAmB,WAAW,iBAAiB,gBAAgB;AAEnE,cAAI,qBAAqB,SAAS,qBAAqB,MAAM;AAC3D,uBAAW,iBAAiB,kBAAkB,QAAQ,SAAS,gBAAgB;AAC/E,mBAAO;AAAA,UACT;AAGA,cAAI,eAAe,YAAY,iBAAiB,gBAAgB;AAChE,cAAI,iBAAiB,MAAM;AAEzB,mBAAO;AAAA,UACT;AAAA,QACF;AAEA,YAAI,eAAe,KAAK,eAAe;AACvC,YAAI,iBAAiB,KAAK,gBAAgB,GAAG;AAC3C,qBAAW,iBAAiB,kBAAkB,QAAQ,SAAS,KAAK;AACpE,iBAAO;AAAA,QACT;AAGA,mBAAW,iBAAiB,kBAAkB,QAAQ,SAAS,IAAI;AAEnE,YAAI,SAAS,yBAAyB,iBAAiB,kBAAkB,cAAc,OAAO;AAC9F,mBAAW,iBAAiB,kBAAkB,QAAQ,SAAS,MAAM;AACrE,eAAO;AAAA,MACT;AAEA,wCAAkC,iBAAiB,kBAAkB,cAAc,SAAS;AAC1F,gBAAQ;AAAA,eACD;AAAA,eACA;AAAA,eACA;AAAA,eACA;AAEH,mBAAO,UAAU,gBAAgB,QAAQ,GAAG,iBAAiB,QAAQ,CAAC;AAAA,eACnE;AAAA,eACA;AAAA,eACA;AAAA,eACA;AAAA,eACA;AAAA,eACA;AACH,mBAAO,oBAAoB;AAAA,eACxB;AAAA,eACA;AAAA,eACA;AAAA,eACA;AAAA,eACA;AAAA,eACA;AAAA,eACA;AAAA,eACA;AAAA,eACA;AAAA,eACA;AAAA,eACA;AACH,mBAAO,cAAc,iBAAiB,kBAAkB,OAAO;AAAA,eAC5D;AACH,mBAAO,YAAY,iBAAiB,gBAAgB;AAAA,eACjD;AACH,mBAAO,eAAe,iBAAiB,kBAAkB,OAAO;AAAA,eAC7D;AACH,mBAAO,cAAc,IAAI,WAAW,gBAAgB,MAAM,GAAG,IAAI,WAAW,iBAAiB,MAAM,GAAG,OAAO;AAAA,eAC1G;AACH,mBAAO,cAAc,IAAI,WAAW,eAAe,GAAG,IAAI,WAAW,gBAAgB,GAAG,OAAO;AAAA,eAC5F;AACH,mBAAO,aAAa,iBAAiB,kBAAkB,OAAO;AAAA,eAC3D;AACH,mBAAO,aAAa,iBAAiB,kBAAkB,OAAO;AAAA;AAE9D,mBAAO,YAAY,iBAAiB,kBAAkB,OAAO;AAAA;AAAA,MAEnE;AAEA,AAQA,2BAAqB,iBAAiB,kBAAkB;AACtD,eAAO,gBAAgB,SAAS,MAAM,iBAAiB,SAAS;AAAA,MAClE;AAEA,AASA,4BAAsB,iBAAiB,kBAAkB,SAAS;AAEhE,YAAI,gBAAgB,SAAS,iBAAiB,MAAM;AAClD,iBAAO;AAAA,QACT;AACA,YAAI,gBAAgB,SAAS,GAAG;AAC9B,iBAAO;AAAA,QACT;AACA,YAAI,gBAAgB,CAAC;AACrB,YAAI,iBAAiB,CAAC;AACtB,wBAAgB,QAAQ,uBAAuB,KAAK,OAAO;AACzD,wBAAc,KAAK,CAAE,KAAK,KAAM,CAAC;AAAA,QACnC,CAAC;AACD,yBAAiB,QAAQ,uBAAuB,KAAK,OAAO;AAC1D,yBAAe,KAAK,CAAE,KAAK,KAAM,CAAC;AAAA,QACpC,CAAC;AACD,eAAO,cAAc,cAAc,KAAK,GAAG,eAAe,KAAK,GAAG,OAAO;AAAA,MAC3E;AAEA,AASA,6BAAuB,iBAAiB,kBAAkB,SAAS;AACjE,YAAI,SAAS,gBAAgB;AAC7B,YAAI,WAAW,iBAAiB,QAAQ;AACtC,iBAAO;AAAA,QACT;AACA,YAAI,WAAW,GAAG;AAChB,iBAAO;AAAA,QACT;AACA,YAAI,QAAQ;AACZ,eAAO,EAAE,QAAQ,QAAQ;AACvB,cAAI,UAAU,gBAAgB,QAAQ,iBAAiB,QAAQ,OAAO,MAAM,OAAO;AACjF,mBAAO;AAAA,UACT;AAAA,QACF;AACA,eAAO;AAAA,MACT;AAEA,AASA,8BAAwB,iBAAiB,kBAAkB,SAAS;AAClE,eAAO,cAAc,oBAAoB,eAAe,GAAG,oBAAoB,gBAAgB,GAAG,OAAO;AAAA,MAC3G;AAEA,AAMA,mCAA6B,QAAQ;AACnC,eAAO,OAAO,WAAW,eACvB,OAAO,WAAW,YAClB,OAAO,OAAO,aAAa,eAC3B,OAAO,OAAO,OAAO,cAAc;AAAA,MACvC;AAEA,AAOA,kCAA4B,QAAQ;AAClC,YAAI,oBAAoB,MAAM,GAAG;AAC/B,cAAI;AACF,mBAAO,oBAAoB,OAAO,OAAO,UAAU,CAAC;AAAA,UACtD,SAAS,eAAP;AACA,mBAAO,CAAC;AAAA,UACV;AAAA,QACF;AACA,eAAO,CAAC;AAAA,MACV;AAEA,AAMA,mCAA6B,WAAW;AACtC,YAAI,kBAAkB,UAAU,KAAK;AACrC,YAAI,cAAc,CAAE,gBAAgB,KAAM;AAC1C,eAAO,gBAAgB,SAAS,OAAO;AACrC,4BAAkB,UAAU,KAAK;AACjC,sBAAY,KAAK,gBAAgB,KAAK;AAAA,QACxC;AACA,eAAO;AAAA,MACT;AAEA,AAMA,iCAA2B,QAAQ;AACjC,YAAI,OAAO,CAAC;AACZ,iBAAS,OAAO,QAAQ;AACtB,eAAK,KAAK,GAAG;AAAA,QACf;AACA,eAAO;AAAA,MACT;AAEA,AAUA,yBAAmB,iBAAiB,kBAAkB,MAAM,SAAS;AACnE,YAAI,SAAS,KAAK;AAClB,YAAI,WAAW,GAAG;AAChB,iBAAO;AAAA,QACT;AACA,iBAAS,IAAI,GAAG,IAAI,QAAQ,KAAK,GAAG;AAClC,cAAI,UAAU,gBAAgB,KAAK,KAAK,iBAAiB,KAAK,KAAK,OAAO,MAAM,OAAO;AACrF,mBAAO;AAAA,UACT;AAAA,QACF;AACA,eAAO;AAAA,MACT;AAEA,AAUA,2BAAqB,iBAAiB,kBAAkB,SAAS;AAC/D,YAAI,eAAe,kBAAkB,eAAe;AACpD,YAAI,gBAAgB,kBAAkB,gBAAgB;AACtD,YAAI,aAAa,UAAU,aAAa,WAAW,cAAc,QAAQ;AACvE,uBAAa,KAAK;AAClB,wBAAc,KAAK;AACnB,cAAI,cAAc,cAAc,aAAa,MAAM,OAAO;AACxD,mBAAO;AAAA,UACT;AACA,iBAAO,UAAU,iBAAiB,kBAAkB,cAAc,OAAO;AAAA,QAC3E;AAEA,YAAI,kBAAkB,mBAAmB,eAAe;AACxD,YAAI,mBAAmB,mBAAmB,gBAAgB;AAC1D,YAAI,gBAAgB,UAAU,gBAAgB,WAAW,iBAAiB,QAAQ;AAChF,0BAAgB,KAAK;AACrB,2BAAiB,KAAK;AACtB,iBAAO,cAAc,iBAAiB,kBAAkB,OAAO;AAAA,QACjE;AAEA,YAAI,aAAa,WAAW,KACxB,gBAAgB,WAAW,KAC3B,cAAc,WAAW,KACzB,iBAAiB,WAAW,GAAG;AACjC,iBAAO;AAAA,QACT;AAEA,eAAO;AAAA,MACT;AAEA,AASA,2BAAqB,OAAO;AAC1B,eAAO,UAAU,QAAQ,OAAO,UAAU;AAAA,MAC5C;AAAA;AAAA;;;ACtcA;AAAA;AAAA,UAAI,UAAS;AAEb,AAiBA,aAAO,UAAU,0BAA0B;AACzC,eAAO,QAAO,YACZ,OAAO,UAAU,eACjB,OAAO,YAAY;AAAA,MACvB;AAAA;AAAA;;;ACvBA;AAAA;AAMA,UAAI,QAAO;AACX,UAAI,OAAO;AACX,UAAI,iBAAiB;AACrB,UAAI,gBAAgB;AA4BpB,aAAO,UAAU,qBAAqB,KAAK,MAAM,QAAQ;AACvD,iBAAS,WAAW,SAAY,WAAY;AAAA,QAAC,IAAI;AAEjD,eAAO,eAAe,KAAK,MACzB;AAAA,UAAE,KAAK,0BAA0B;AAgB7B,gBAAI,CAAC,eAAe,KAAK,CAAC,KAAK,MAAM,UAAU,GAAG;AAChD,mBAAK,MAAM,QAAQ,cAAc;AAAA,YACnC;AAEA,gBAAI,SAAS,OAAO,KAAK,IAAI;AAC7B,gBAAI,WAAW;AACb,qBAAO;AAET,gBAAI,eAAe,IAAI,MAAK,UAAU;AACtC,0BAAc,MAAM,YAAY;AAChC,mBAAO;AAAA,UACT;AAAA,UACA,cAAc;AAAA,QAClB,CAAC;AAAA,MACH;AAAA;AAAA;;;ACvEA;AAAA;AAAA,UAAI,eAAe,OAAO,yBAAyB,WAAY;AAAA,MAAC,GAAG,QAAQ;AAE3E,AAwCA,aAAO,UAAU,wBAAyB,IAAI,eAAe,aAAa;AACxE,YAAI,CAAC,aAAa;AAAc,iBAAO;AAEvC,eAAO,eAAe,IAAI,UAAU;AAAA,UAClC,KAAK,WAAY;AACf,gBAAI,aAAa;AACf,oBAAM,MAAM,4BAA4B,gBAAgB,6EAEtD,gBAAgB,aAAa,gBAAgB,qBAAqB;AAAA,YACtE;AAEA,kBAAM,MAAM,4BAA4B,gBAAgB,4CACtB,gBAAgB,IAAI;AAAA,UACxD;AAAA,QACF,CAAC;AAED,eAAO;AAAA,MACT;AAAA;AAAA;;;AC3DA;AAAA;AAmBA,aAAO,UAAU,uBAAuB,QAAQ;AAC9C,YAAI,SAAS,OAAO,oBAAoB,MAAM;AAE9C,6BAAqB,UAAU;AAC7B,cAAI,OAAO,QAAQ,QAAQ,MAAM,IAAI;AACnC,mBAAO,KAAK,QAAQ;AAAA,UACtB;AAAA,QACF;AAEA,YAAI,QAAQ,OAAO,eAAe,MAAM;AACxC,eAAO,UAAU,MAAM;AACrB,iBAAO,oBAAoB,KAAK,EAAE,QAAQ,WAAW;AACrD,kBAAQ,OAAO,eAAe,KAAK;AAAA,QACrC;AAEA,eAAO;AAAA,MACT;AAAA;AAAA;;;ACnCA;AAAA;AAAA,UAAI,UAAS;AACb,UAAI,OAAO;AACX,UAAI,gBAAgB;AACpB,UAAI,iBAAiB;AAErB,AAyBA,UAAI,WAAW,CAAC,WAAW,aAAa,QAAQ,QAAQ;AAExD,aAAO,UAAU,iBAAiB,KAAK,wBAAwB;AAC7D,YAAI,CAAC,eAAe;AAAG,iBAAO;AAE9B,eAAO,IAAI,MAAM,KAAK;AAAA,UACpB,KAAK,qBAAqB,QAAQ,UAAU;AAK1C,gBAAI,OAAO,aAAa,YACpB,QAAO,kBAAkB,QAAQ,QAAQ,MAAM,MAC/C,CAAC,QAAQ,IAAI,QAAQ,QAAQ,GAAG;AAElC,kBAAI,wBAAwB;AAC1B,sBAAM,MAAM,4BAA4B,yBAAyB,MAC/D,WAAW,qCACX,yBAAyB,IAAI;AAAA,cACjC;AAKA,kBAAI,aAAa;AACjB,kBAAI,qBAAqB;AACzB,4BAAc,MAAM,EAAE,QAAQ,SAAS,MAAM;AAC3C,oBACE,CAAC,OAAO,UAAU,eAAe,IAAI,KACrC,SAAS,QAAQ,IAAI,MAAM,IAC3B;AACA,sBAAI,OAAO,qBACT,UACA,MACA,kBACF;AACA,sBAAI,OAAO,oBAAoB;AAC7B,iCAAa;AACb,yCAAqB;AAAA,kBACvB;AAAA,gBACF;AAAA,cACF,CAAC;AAED,kBAAI,eAAe,MAAM;AACvB,sBAAM,MAAM,4BAA4B,WACtC,qBAAqB,aAAa,IAAI;AAAA,cAC1C,OAAO;AACL,sBAAM,MAAM,4BAA4B,QAAQ;AAAA,cAClD;AAAA,YACF;AAcA,gBAAI,SAAS,QAAQ,QAAQ,MAAM,MAAM,CAAC,KAAK,QAAQ,UAAU,GAAG;AAClE,mBAAK,QAAQ,QAAQ,WAAW;AAAA,YAClC;AAEA,mBAAO,QAAQ,IAAI,QAAQ,QAAQ;AAAA,UACrC;AAAA,QACF,CAAC;AAAA,MACH;AAYA,oCAA8B,MAAM,MAAM,KAAK;AAC7C,YAAI,KAAK,IAAI,KAAK,SAAS,KAAK,MAAM,KAAK,KAAK;AAC9C,iBAAO;AAAA,QACT;AAEA,YAAI,OAAO,CAAC;AAIZ,iBAAS,IAAI,GAAG,KAAK,KAAK,QAAQ,KAAK;AACrC,eAAK,KAAK,MAAM,KAAK,SAAS,CAAC,EAAE,KAAK,CAAC;AACvC,eAAK,GAAG,KAAK;AAAA,QACf;AACA,iBAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AACpC,eAAK,GAAG,KAAK;AAAA,QACf;AAEA,iBAAS,IAAI,GAAG,KAAK,KAAK,QAAQ,KAAK;AACrC,cAAI,KAAK,KAAK,WAAW,IAAI,CAAC;AAC9B,mBAAS,IAAI,GAAG,KAAK,KAAK,QAAQ,KAAK;AACrC,gBAAI,KAAK,IAAI,IAAI,CAAC,KAAK,KAAK;AAC1B,mBAAK,GAAG,KAAK;AACb;AAAA,YACF;AACA,iBAAK,GAAG,KAAK,KAAK,IAChB,KAAK,IAAI,GAAG,KAAK,GACjB,KAAK,GAAG,IAAI,KAAK,GACjB,KAAK,IAAI,GAAG,IAAI,KACb,QAAO,KAAK,WAAW,IAAI,CAAC,IAAI,IAAI,EACzC;AAAA,UACF;AAAA,QACF;AAEA,eAAO,KAAK,KAAK,QAAQ,KAAK;AAAA,MAChC;AAAA;AAAA;;;AClJA;AAAA;AAMA,UAAI,iBAAiB;AACrB,UAAI,QAAO;AACX,UAAI,OAAO;AACX,UAAI,UAAU;AACd,UAAI,gBAAgB;AA4BpB,aAAO,UAAU,mBAAmB,KAAK,MAAM,QAAQ;AACrD,YAAI,gBAAgB,WAAY;AAa9B,cAAI,CAAC,KAAK,MAAM,UAAU,GAAG;AAC3B,iBAAK,MAAM,QAAQ,aAAa;AAAA,UAClC;AAEA,cAAI,SAAS,OAAO,MAAM,MAAM,SAAS;AACzC,cAAI,WAAW;AACb,mBAAO;AAET,cAAI,eAAe,IAAI,MAAK,UAAU;AACtC,wBAAc,MAAM,YAAY;AAChC,iBAAO;AAAA,QACT;AAEA,uBAAe,eAAe,MAAM,KAAK;AACzC,YAAI,QAAQ,QAAQ,eAAe,IAAI;AAAA,MACzC;AAAA;AAAA;;;ACnEA;AAAA;AAMA,UAAI,QAAO;AACX,UAAI,OAAO;AACX,UAAI,iBAAiB;AACrB,UAAI,gBAAgB;AAoCpB,aAAO,UAAU,2BAA2B,KAAK,MAAM,QAAQ;AAC7D,YAAI,OAAO,OAAO,yBAAyB,KAAK,IAAI,GAChD,SAAS,WAAY;AAAA,QAAC;AAE1B,YAAI,QAAQ,eAAe,OAAO,KAAK;AACrC,mBAAS,KAAK;AAEhB,eAAO,eAAe,KAAK,MACzB;AAAA,UAAE,KAAK,qCAAqC;AAgBxC,gBAAI,CAAC,eAAe,KAAK,CAAC,KAAK,MAAM,UAAU,GAAG;AAChD,mBAAK,MAAM,QAAQ,yBAAyB;AAAA,YAC9C;AAKA,gBAAI,eAAe,KAAK,MAAM,UAAU;AACxC,iBAAK,MAAM,YAAY,IAAI;AAC3B,gBAAI,SAAS,OAAO,MAAM,EAAE,KAAK,IAAI;AACrC,iBAAK,MAAM,YAAY,YAAY;AAEnC,gBAAI,WAAW,QAAW;AACxB,qBAAO;AAAA,YACT;AAEA,gBAAI,eAAe,IAAI,MAAK,UAAU;AACtC,0BAAc,MAAM,YAAY;AAChC,mBAAO;AAAA,UACT;AAAA,UACA,cAAc;AAAA,QAClB,CAAC;AAAA,MACH;AAAA;AAAA;;;AC3FA;AAAA;AAMA,UAAI,iBAAiB;AACrB,UAAI,QAAO;AACX,UAAI,OAAO;AACX,UAAI,UAAU;AACd,UAAI,gBAAgB;AAoCpB,aAAO,UAAU,yBAAyB,KAAK,MAAM,QAAQ;AAC3D,YAAI,UAAU,IAAI,OACd,SAAS,WAAY;AACrB,gBAAM,IAAI,MAAM,OAAO,oBAAoB;AAAA,QAC7C;AAEF,YAAI,WAAW,eAAe,OAAO;AACnC,mBAAS;AAEX,YAAI,2BAA2B,WAAY;AAazC,cAAI,CAAC,KAAK,MAAM,UAAU,GAAG;AAC3B,iBAAK,MAAM,QAAQ,wBAAwB;AAAA,UAC7C;AAKA,cAAI,eAAe,KAAK,MAAM,UAAU;AACxC,eAAK,MAAM,YAAY,IAAI;AAC3B,cAAI,SAAS,OAAO,MAAM,EAAE,MAAM,MAAM,SAAS;AACjD,eAAK,MAAM,YAAY,YAAY;AAEnC,cAAI,WAAW,QAAW;AACxB,mBAAO;AAAA,UACT;AAEA,cAAI,eAAe,IAAI,MAAK,UAAU;AACtC,wBAAc,MAAM,YAAY;AAChC,iBAAO;AAAA,QACT;AAEA,uBAAe,0BAA0B,MAAM,KAAK;AACpD,YAAI,QAAQ,QAAQ,0BAA0B,IAAI;AAAA,MACpD;AAAA;AAAA;;;AC3FA;AAAA;AAMA,AAIA,UAAI,iBAAiB;AACrB,UAAI,QAAO;AACX,UAAI,OAAO;AACX,UAAI,UAAU;AACd,UAAI,gBAAgB;AAEpB,AAKA,UAAI,kBAAkB,OAAO,OAAO,mBAAmB;AAIvD,UAAI,SAAS,WAAW;AAAA,MAAC;AACzB,UAAI,eAAe,OAAO,oBAAoB,MAAM,EAAE,OAAO,SAAS,MAAM;AAC1E,YAAI,WAAW,OAAO,yBAAyB,QAAQ,IAAI;AAM3D,YAAI,OAAO,aAAa;AACtB,iBAAO;AAET,eAAO,CAAC,SAAS;AAAA,MACnB,CAAC;AAGD,UAAI,OAAQ,SAAS,UAAU;AAA/B,UACI,QAAQ,SAAS,UAAU;AA+B/B,aAAO,UAAU,4BAA4B,KAAK,MAAM,QAAQ,kBAAkB;AAChF,YAAI,OAAO,qBAAqB,YAAY;AAC1C,6BAAmB,WAAY;AAAA,UAAE;AAAA,QACnC;AAEA,YAAI,oBAAoB;AAAA,UACpB;AAAA,UACA;AAAA,QACJ;AAGA,YAAI,CAAC,IAAI,WAAW;AAClB,cAAI,YAAY,CAAC;AAAA,QACnB;AACA,YAAI,UAAU,QAAQ;AAEtB,eAAO,eAAe,KAAK,MACzB;AAAA,UAAE,KAAK,iCAAiC;AACpC,8BAAkB,iBAAiB,KAAK,IAAI;AAE5C,gBAAI,yBAAyB,WAAY;AAgBvC,kBAAI,CAAC,KAAK,MAAM,UAAU,GAAG;AAC3B,qBAAK,MAAM,QAAQ,sBAAsB;AAAA,cAC3C;AAEA,kBAAI,SAAS,kBAAkB,OAAO,MAAM,MAAM,SAAS;AAC3D,kBAAI,WAAW,QAAW;AACxB,uBAAO;AAAA,cACT;AAEA,kBAAI,eAAe,IAAI,MAAK,UAAU;AACtC,4BAAc,MAAM,YAAY;AAChC,qBAAO;AAAA,YACT;AAEA,2BAAe,wBAAwB,MAAM,IAAI;AAGjD,gBAAI,iBAAiB;AAEnB,kBAAI,YAAY,OAAO,OAAO,IAAI;AAElC,wBAAU,OAAO;AACjB,wBAAU,QAAQ;AAClB,qBAAO,eAAe,wBAAwB,SAAS;AAAA,YACzD,OAEK;AACH,kBAAI,gBAAgB,OAAO,oBAAoB,GAAG;AAClD,4BAAc,QAAQ,SAAU,cAAc;AAC5C,oBAAI,aAAa,QAAQ,YAAY,MAAM,IAAI;AAC7C;AAAA,gBACF;AAEA,oBAAI,KAAK,OAAO,yBAAyB,KAAK,YAAY;AAC1D,uBAAO,eAAe,wBAAwB,cAAc,EAAE;AAAA,cAChE,CAAC;AAAA,YACH;AAEA,0BAAc,MAAM,sBAAsB;AAC1C,mBAAO,QAAQ,sBAAsB;AAAA,UACvC;AAAA,UACA,cAAc;AAAA,QAClB,CAAC;AAAA,MACH;AAAA;AAAA;;;ACvJA;AAAA;AAMA,UAAI,QAAO;AACX,UAAI,gBAAgB;AAmCpB,aAAO,UAAU,kCAAkC,KAAK,MAAM,QAAQ,kBAAkB;AACtF,YAAI,oBAAoB,IAAI,UAAU;AAEtC,YAAI,oBAAoB,kBAAkB;AAC1C,0BAAkB,mBAAmB,4CAA4C;AAC/E,cAAI,SAAS,iBAAiB,iBAAiB,EAAE,KAAK,IAAI;AAC1D,cAAI,WAAW,QAAW;AACxB,mBAAO;AAAA,UACT;AAEA,cAAI,eAAe,IAAI,MAAK,UAAU;AACtC,wBAAc,MAAM,YAAY;AAChC,iBAAO;AAAA,QACT;AAEA,YAAI,UAAU,kBAAkB;AAChC,0BAAkB,SAAS,6CAA6C;AACtE,cAAI,SAAS,OAAO,OAAO,EAAE,MAAM,MAAM,SAAS;AAClD,cAAI,WAAW,QAAW;AACxB,mBAAO;AAAA,UACT;AAEA,cAAI,eAAe,IAAI,MAAK,UAAU;AACtC,wBAAc,MAAM,YAAY;AAChC,iBAAO;AAAA,QACT;AAAA,MACF;AAAA;AAAA;;;ACpEA;AAAA;AAMA,AAIA,UAAI,UAAU;AAkBd,aAAO,UAAU,0BAA0B,GAAG,GAAG;AAC/C,eAAO,QAAQ,CAAC,IAAI,QAAQ,CAAC,IAAI,KAAK;AAAA,MACxC;AAAA;AAAA;;;AC9BA;AAAA;AAoBA,aAAO,UAAU,yCAAyC,KAAK;AAC7D,YAAI,OAAO,OAAO,0BAA0B;AAAY,iBAAO,CAAC;AAEhE,eAAO,OAAO,sBAAsB,GAAG,EAAE,OAAO,SAAU,KAAK;AAC7D,iBAAO,OAAO,yBAAyB,KAAK,GAAG,EAAE;AAAA,QACnD,CAAC;AAAA,MACH;AAAA;AAAA;;;AC1BA;AAAA;AAMA,AAIA,UAAI,kCAAkC;AAgBtC,aAAO,UAAU,oCAAoC,KAAK;AACxD,eAAO,OAAO,KAAK,GAAG,EAAE,OAAO,gCAAgC,GAAG,CAAC;AAAA,MACrE;AAAA;AAAA;;;AC5BA;AAAA;AAAA;AA8BA,kCAA4B,QAAQ,WAAW;AAC7C,eAAO,qBAAqB,SAAS,WAAW;AAAA,MAClD;AAkBA,qCAA+B,QAAQ,WAAW;AAChD,YAAI,qBAAqB,OAAO;AAE9B,iBAAO,OAAO,gBAAgB,UAAU,eAAe,kBAAkB,UAAU;AAAA,QACrF,WAAW,UAAU,qBAAqB,SAAS,cAAc,OAAO;AAEtE,iBAAO,OAAO,gBAAgB,aAAa,kBAAkB;AAAA,QAC/D;AAEA,eAAO;AAAA,MACT;AAgBA,iCAA2B,QAAQ,YAAY;AAC7C,YAAI,mBAAmB,OAAO,WAAW,WAAW,SAAS,OAAO;AACpE,YAAI,sBAAsB,QAAQ;AAChC,iBAAO,WAAW,KAAK,gBAAgB;AAAA,QACzC,WAAW,OAAO,eAAe,UAAU;AACzC,iBAAO,iBAAiB,QAAQ,UAAU,MAAM;AAAA,QAClD;AAEA,eAAO;AAAA,MACT;AAcA,UAAI,oBAAoB;AACxB,+BAAyB,eAAe;AACtC,YAAI,OAAO;AACX,YAAI,OAAO,cAAc,SAAS,aAAa;AAE7C,cAAI,QAAQ,OAAO,aAAa,EAAE,MAAM,iBAAiB;AACzD,cAAI,OAAO;AACT,mBAAO,MAAM;AAAA,UACf;AAAA,QACF,OAAO;AACL,iBAAO,cAAc;AAAA,QACvB;AAEA,eAAO;AAAA,MACT;AAaA,kCAA4B,WAAW;AACrC,YAAI,kBAAkB;AACtB,YAAI,qBAAqB,OAAO;AAC9B,4BAAkB,gBAAgB,UAAU,WAAW;AAAA,QACzD,WAAW,OAAO,cAAc,YAAY;AAI1C,4BAAkB,gBAAgB,SAAS,EAAE,KAAK,KAC9C,gBAAgB,IAAI,UAAU,CAAC;AAAA,QACrC;AAEA,eAAO;AAAA,MACT;AAeA,0BAAoB,WAAW;AAC7B,YAAI,MAAM;AACV,YAAI,aAAa,UAAU,SAAS;AAClC,gBAAM,UAAU;AAAA,QAClB,WAAW,OAAO,cAAc,UAAU;AACxC,gBAAM;AAAA,QACR;AAEA,eAAO;AAAA,MACT;AAEA,aAAO,UAAU;AAAA,QACf;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA;AAAA;;;AC3KA;AAAA;AAkBA,qBAAe,OAAO;AAGpB,eAAO,UAAU;AAAA,MACnB;AAGA,aAAO,UAAU,OAAO,SAAS;AAAA;AAAA;;;ACzBjC;AAAA;AAAA,UAAI,OAAO;AAEX,UAAI,OAAO;AAEX,4BAAsB,KAAK;AACzB,YAAI,aAAa,KAAK,GAAG;AACzB,YAAI,cAAc,CAAC,SAAS,UAAU,UAAU;AAEhD,eAAO,YAAY,QAAQ,UAAU,MAAM;AAAA,MAC7C;AAkBA,aAAO,UAAU,qBAAqB,KAAK,MAAM;AAC/C,YAAI,WAAW,KAAK,KAAK,UAAU;AACnC,YAAI,SAAS,KAAK,KAAK,QAAQ;AAC/B,YAAI,WAAW,KAAK;AACpB,YAAI,MAAM,SAAS,KAAK,KAAK,KAAK;AAElC,YAAI,UAAU;AACZ,iBAAO;AAAA,QACT;AAEA,YAAI,OAAO,QAAQ;AAAY,gBAAM,IAAI;AAEzC,cAAM,OAAO;AACb,YAAI,CAAC,KAAK;AACR,iBAAO;AAAA,QACT;AAEA,YAAI,WAAW,KAAK,GAAG,GAAG;AACxB,iBAAO;AAAA,QACT;AAEA,YAAI,WAAW,aAAa,QAAQ;AACpC,YAAI,UAAU,KAAK,GAAG,GAAG;AACvB,iBAAO,WAAW,uBAAuB;AAAA,QAC3C;AAEA,eAAO,WAAW,oBAAoB;AAAA,MACxC;AAAA;AAAA;;;ACtDA;AAAA;AAMA,AAIA,UAAI,UAAU;AAEd,AAIA,cAAQ,OAAO;AAEf,AAIA,cAAQ,OAAO;AAEf,AAGA,cAAQ,cAAc;AAEtB,AAIA,cAAQ,aAAa;AAErB,AAIA,cAAQ,YAAY;AAEpB,AAIA,cAAQ,UAAU;AAElB,AAIA,cAAQ,aAAa;AAErB,AAIA,cAAQ,OAAO;AAEf,AAIA,cAAQ,gBAAgB;AAExB,AAIA,cAAQ,MAAM;AAEd,AAIA,cAAQ,cAAc,QAAQ;AAE9B,AAIA,cAAQ,cAAc,QAAQ;AAE9B,AAIA,cAAQ,UAAU;AAElB,AAIA,cAAQ,cAAc;AAEtB,AAIA,cAAQ,YAAY;AAEpB,AAIA,cAAQ,oBAAoB;AAE5B,AAIA,cAAQ,kBAAkB;AAE1B,AAIA,cAAQ,qBAAqB;AAE7B,AAIA,cAAQ,2BAA2B;AAEnC,AAIA,cAAQ,mBAAmB;AAE3B,AAIA,cAAQ,kCAAkC;AAE1C,AAIA,cAAQ,6BAA6B;AAErC,AAIA,cAAQ,aAAa;AAErB,AAIA,cAAQ,UAAU;AAElB,AAIA,cAAQ,iBAAiB;AAEzB,AAIA,cAAQ,iBAAiB;AAEzB,AAIA,cAAQ,QAAQ;AAEhB,AAIA,cAAQ,cAAc;AAAA;AAAA;;;ACjLtB;AAAA;AAOA,UAAI,UAAS;AAEb,aAAO,UAAU,SAAU,OAAO,OAAM;AACtC,AAIA,YAAI,kBAAiB,MAAM,gBACvB,OAAO,MAAK;AAEhB,AAIA,cAAM,YAAY;AAElB,AAsCA,4BAAoB,KAAK,KAAK,MAAM,UAAU;AAC5C,eAAK,MAAM,QAAQ,QAAQ,UAAS;AACpC,eAAK,MAAM,YAAY,QAAQ;AAC/B,eAAK,MAAM,UAAU,GAAG;AACxB,eAAK,MAAM,WAAW,GAAG;AAEzB,iBAAO,MAAK,QAAQ,IAAI;AAAA,QAC1B;AAEA,eAAO,eAAe,YAAW,gBAAgB;AAAA,UAC/C,KAAK,WAAW;AACd,oBAAQ,KAAK,6EAA6E;AAC1F,mBAAO,QAAO;AAAA,UAChB;AAAA,UACA,KAAK,SAAS,OAAO;AACnB,oBAAQ,KAAK,6EAA6E;AAC1F,oBAAO,eAAe;AAAA,UACxB;AAAA,QACF,CAAC;AAED,eAAO,eAAe,YAAW,YAAY;AAAA,UAC3C,KAAK,WAAW;AACd,oBAAQ,KAAK,qEAAqE;AAClF,mBAAO,QAAO;AAAA,UAChB;AAAA,UACA,KAAK,SAAS,OAAO;AACnB,oBAAQ,KAAK,qEAAqE;AAClF,oBAAO,WAAW;AAAA,UACpB;AAAA,QACF,CAAC;AAED,mBAAU,cAAc,SAAU,MAAM,IAAI;AAC1C,gBAAK,YAAY,KAAK,WAAW,MAAM,EAAE;AAAA,QAC3C;AAEA,mBAAU,YAAY,SAAU,MAAM,IAAI;AACxC,gBAAK,UAAU,KAAK,WAAW,MAAM,EAAE;AAAA,QACzC;AAEA,mBAAU,qBAAqB,SAAU,MAAM,IAAI,kBAAkB;AACnE,gBAAK,mBAAmB,KAAK,WAAW,MAAM,IAAI,gBAAgB;AAAA,QACpE;AAEA,mBAAU,oBAAoB,SAAU,MAAM,IAAI;AAChD,gBAAK,kBAAkB,KAAK,WAAW,MAAM,EAAE;AAAA,QACjD;AAEA,mBAAU,kBAAkB,SAAU,MAAM,IAAI;AAC9C,gBAAK,gBAAgB,KAAK,WAAW,MAAM,EAAE;AAAA,QAC/C;AAEA,mBAAU,2BAA2B,SAAU,MAAM,IAAI,kBAAkB;AACzE,gBAAK,yBAAyB,KAAK,WAAW,MAAM,IAAI,gBAAgB;AAAA,QAC1E;AAiBA,mBAAU,UAAU,SAAS,SAAU,MAAM,KAAK,WAAW,UAAU,SAAS,UAAU;AACxF,cAAI,KAAK,MAAK,KAAK,MAAM,SAAS;AAClC,cAAI,UAAU;AAAU,uBAAW;AACnC,cAAI,WAAc,YAAY,WAAc;AAAS,uBAAW;AAChE,cAAI,SAAS,QAAO;AAAU,uBAAW;AAEzC,cAAI,CAAC,IAAI;AACP,kBAAM,MAAK,WAAW,MAAM,SAAS;AACrC,gBAAI,SAAS,MAAK,UAAU,MAAM,SAAS;AAC3C,gBAAI,iCAAiC;AAAA,cACjC;AAAA,cACA;AAAA,cACA;AAAA,YACJ;AAEA,gBAAI,WAAW,MAAK,YAAY,MAAM,SAAS;AAC/C,gBAAI,UAAU;AACZ,6CAA+B,WAAW;AAAA,YAC5C;AAEA,kBAAM,IAAI,gBACR,KACA,gCACC,QAAO,eAAgB,KAAK,SAAS,KAAK,MAAM,MAAM,CAAC;AAAA,UAC5D;AAAA,QACF;AAEA,AAQA,eAAO,eAAe,WAAU,WAAW,QACzC;AAAA,UAAE,KAAK,WAAY;AACf,mBAAO,KAAK,MAAM,QAAQ;AAAA,UAC5B;AAAA,UACA,KAAK,SAAU,KAAK;AAClB,iBAAK,MAAM,UAAU,GAAG;AAAA,UAC1B;AAAA,QACJ,CAAC;AAAA,MACH;AAAA;AAAA;;;AC9KA;AAAA;AAOA,aAAO,UAAU,SAAU,OAAM,GAAG;AAClC,YAAI,aAAY,MAAK,WACjB,kBAAiB,MAAK,gBACtB,OAAO,EAAE;AAiCb;AAAA,UAAE;AAAA,UAAM;AAAA,UAAM;AAAA,UAAQ;AAAA,UACpB;AAAA,UAAO;AAAA,UAAO;AAAA,UAAQ;AAAA,UACtB;AAAA,UAAQ;AAAA,UAAS;AAAA,UAAM;AAAA,UACvB;AAAA,UAAQ;AAAA,UAAO;AAAA,UAAQ;AAAA,UAAS;AAAA,QAAO,EAAE,QAAQ,SAAU,OAAO;AAClE,qBAAU,YAAY,KAAK;AAAA,QAC7B,CAAC;AAyBD,mBAAU,YAAY,OAAO,WAAY;AACvC,eAAK,MAAM,UAAU,IAAI;AAAA,QAC3B,CAAC;AAuCD,mBAAU,YAAY,QAAQ,WAAY;AACxC,eAAK,MAAM,QAAQ,IAAI;AAAA,QACzB,CAAC;AAwBD,mBAAU,YAAY,UAAU,WAAY;AAC1C,eAAK,MAAM,UAAU,IAAI;AAAA,QAC3B,CAAC;AAwBD,mBAAU,YAAY,OAAO,WAAY;AACvC,eAAK,MAAM,OAAO,IAAI;AAAA,QACxB,CAAC;AAsBD,mBAAU,YAAY,WAAW,WAAY;AAC3C,eAAK,MAAM,WAAW,IAAI;AAAA,QAC5B,CAAC;AAkBD,mBAAU,YAAY,OAAO,WAAY;AACvC,eAAK,MAAM,OAAO,IAAI;AACtB,eAAK,MAAM,OAAO,KAAK;AAAA,QACzB,CAAC;AAsBD,mBAAU,YAAY,OAAO,WAAY;AACvC,eAAK,MAAM,OAAO,IAAI;AACtB,eAAK,MAAM,OAAO,KAAK;AAAA,QACzB,CAAC;AA8DD,oBAAa,MAAM,KAAK;AACtB,cAAI;AAAK,iBAAK,MAAM,WAAW,GAAG;AAClC,iBAAO,KAAK,YAAY;AACxB,cAAI,MAAM,KAAK,MAAM,QAAQ,GACzB,UAAU,CAAC,CAAE,KAAK,KAAK,KAAK,KAAK,GAAI,EAAE,QAAQ,KAAK,OAAO,CAAC,CAAC,IAAI,QAAQ;AAE7E,eAAK,OACD,SAAS,EAAE,KAAK,GAAG,EAAE,YAAY,GACjC,4BAA4B,UAAU,MACtC,gCAAgC,UAAU,IAC9C;AAAA,QACF;AAEA,mBAAU,mBAAmB,MAAM,EAAE;AACrC,mBAAU,mBAAmB,KAAK,EAAE;AAqJpC,+BAAuB,GAAG,GAAG;AAC3B,iBAAQ,EAAE,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,KAAM,MAAM;AAAA,QAC7C;AAEA,2CAAoC;AAClC,eAAK,MAAM,YAAY,IAAI;AAAA,QAC7B;AAEA,yBAAkB,KAAK,KAAK;AAC1B,cAAI;AAAK,iBAAK,MAAM,WAAW,GAAG;AAElC,cAAI,MAAM,KAAK,MAAM,QAAQ,GACzB,UAAU,EAAE,KAAK,GAAG,EAAE,YAAY,GAClC,UAAU,KAAK,MAAM,SAAS,GAC9B,SAAS,KAAK,MAAM,QAAQ,GAC5B,OAAO,KAAK,MAAM,MAAM,GACxB,SAAS,KAAK,MAAM,MAAM,GAC1B,aAAa,SAAS,UAAU;AAEpC,oBAAU,UAAU,UAAU,OAAO;AAErC,cAAI,WAAW;AAEf,kBAAQ;AAAA,iBACD;AACH,yBAAW,IAAI,QAAQ,GAAG,MAAM;AAChC;AAAA,iBAEG;AACH,kBAAI,QAAQ;AACV,sBAAM,IAAI,gBACR,UAAU,4CACV,QACA,IACF;AAAA,cACF;AAEA,yBAAW,IAAI,IAAI,GAAG;AACtB;AAAA,iBAEG;AACH,kBAAI,QAAQ,SAAS,EAAE,MAAM;AAC7B,kBAAI,QAAQ,SAAU,MAAM;AAC1B,2BAAW,YAAY,MAAM,MAAM,GAAG;AAAA,cACxC,CAAC;AACD;AAAA,iBAEG;AACH,kBAAI,QAAQ;AACV,oBAAI,QAAQ,SAAU,MAAM;AAC1B,6BAAW,YAAY,EAAE,IAAI,MAAM,GAAG;AAAA,gBACxC,CAAC;AAAA,cACH,OAAO;AACL,2BAAW,IAAI,IAAI,GAAG;AAAA,cACxB;AACA;AAAA,iBAEG;AACH,kBAAI,QAAQ;AACV,2BAAW,IAAI,KAAK,SAAU,MAAM;AAClC,yBAAO,EAAE,IAAI,MAAM,GAAG;AAAA,gBACxB,CAAC;AAAA,cACH,OAAO;AACL,2BAAW,IAAI,QAAQ,GAAG,MAAM;AAAA,cAClC;AACA;AAAA;AAMA,kBAAI,QAAQ,OAAO,GAAG,GAAG;AACvB,sBAAM,IAAI,gBACR,UAAU,yCACR,UAAU,UACV,EAAE,KAAK,GAAG,EAAE,YAAY,IAAI,yHAI5B,EAAE,KAAK,GAAG,EAAE,YAAY,GAC1B,QACA,IACF;AAAA,cACF;AAEA,kBAAI,QAAQ,OAAO,KAAK,GAAG,GACvB,WAAW,MACX,UAAU;AAEd,oBAAM,QAAQ,SAAU,MAAM;AAC5B,oBAAI,gBAAgB,IAAI,WAAU,GAAG;AACrC,kBAAE,cAAc,MAAM,eAAe,IAAI;AACzC,qBAAK,eAAe,YAAY,IAAI;AAEpC,oBAAI,CAAC,UAAU,MAAM,WAAW,GAAG;AACjC,gCAAc,SAAS,MAAM,IAAI,KAAK;AACtC;AAAA,gBACF;AAEA,oBAAI;AACF,gCAAc,SAAS,MAAM,IAAI,KAAK;AAAA,gBACxC,SAAS,KAAP;AACA,sBAAI,CAAC,EAAE,WAAW,sBAAsB,KAAK,eAAc,GAAG;AAC5D,0BAAM;AAAA,kBACR;AACA,sBAAI,aAAa;AAAM,+BAAW;AAClC;AAAA,gBACF;AAAA,cACF,GAAG,IAAI;AAMP,kBAAI,UAAU,MAAM,SAAS,KAAK,YAAY,MAAM,QAAQ;AAC1D,sBAAM;AAAA,cACR;AACA;AAAA;AAIJ,eAAK,OACH,UACE,yBAAyB,aAAa,aAAa,EAAE,QAAQ,GAAG,GAChE,6BAA6B,aAAa,aAAa,EAAE,QAAQ,GAAG,CAAC;AAAA,QAC3E;AAEA,mBAAU,mBAAmB,WAAW,SAAS,uBAAuB;AACxE,mBAAU,mBAAmB,WAAW,SAAS,uBAAuB;AACxE,mBAAU,mBAAmB,YAAY,SAAS,uBAAuB;AACzE,mBAAU,mBAAmB,YAAY,SAAS,uBAAuB;AAsCzE,mBAAU,YAAY,MAAM,WAAY;AACtC,eAAK,OACD,KAAK,MAAM,QAAQ,GACnB,iCACA,8BAA8B;AAAA,QACpC,CAAC;AA4BD,mBAAU,YAAY,QAAQ,WAAY;AACxC,eAAK,OACD,SAAS,KAAK,MAAM,QAAQ,GAC5B,+BACA,gCACA,KAAK,MAAM,QAAQ,IAAI,QAAQ,IACnC;AAAA,QACF,CAAC;AA4BD,mBAAU,YAAY,SAAS,WAAY;AACzC,eAAK,OACD,UAAU,KAAK,MAAM,QAAQ,GAC7B,gCACA,+BACA,KAAK,MAAM,QAAQ,IAAI,OAAO,KAClC;AAAA,QACF,CAAC;AAyBD,mBAAU,YAAY,QAAQ,WAAY;AACxC,eAAK,OACD,SAAS,KAAK,MAAM,QAAQ,GAC5B,+BACA,iCACJ;AAAA,QACF,CAAC;AAyBD,mBAAU,YAAY,aAAa,WAAY;AAC7C,eAAK,OACD,WAAc,KAAK,MAAM,QAAQ,GACjC,oCACA,sCACJ;AAAA,QACF,CAAC;AAyBD,mBAAU,YAAY,OAAO,WAAY;AACvC,eAAK,OACD,EAAE,MAAM,KAAK,MAAM,QAAQ,CAAC,GAC1B,8BACA,gCACN;AAAA,QACF,CAAC;AAmCD,+BAAwB;AACtB,cAAI,MAAM,KAAK,MAAM,QAAQ;AAC7B,eAAK,OACD,QAAQ,QAAQ,QAAQ,QACxB,6BACA,+BACJ;AAAA,QACF;AAEA,mBAAU,YAAY,SAAS,WAAW;AAC1C,mBAAU,YAAY,UAAU,WAAW;AAmD3C,mBAAU,YAAY,SAAS,WAAY;AACzC,cAAI,MAAM,KAAK,MAAM,QAAQ,GACzB,OAAO,KAAK,MAAM,MAAM,GACxB,UAAU,KAAK,MAAM,SAAS,GAC9B;AAEJ,oBAAU,UAAU,UAAU,OAAO;AAErC,kBAAQ,EAAE,KAAK,GAAG,EAAE,YAAY;AAAA,iBACzB;AAAA,iBACA;AACH,2BAAa,IAAI;AACjB;AAAA,iBACG;AAAA,iBACA;AACH,2BAAa,IAAI;AACjB;AAAA,iBACG;AAAA,iBACA;AACH,oBAAM,IAAI,gBACR,UAAU,uCACV,QACA,IACF;AAAA,iBACG;AACH,kBAAI,MAAM,UAAU,kCAAkC,EAAE,QAAQ,GAAG;AACnE,oBAAM,IAAI,gBAAe,IAAI,KAAK,GAAG,QAAW,IAAI;AAAA;AAEpD,kBAAI,QAAQ,OAAO,GAAG,GAAG;AACvB,sBAAM,IAAI,gBACR,UAAU,4CAA4C,EAAE,QAAQ,GAAG,GACnE,QACA,IACF;AAAA,cACF;AACA,2BAAa,OAAO,KAAK,GAAG,EAAE;AAAA;AAGlC,eAAK,OACD,MAAM,YACN,gCACA,kCACJ;AAAA,QACF,CAAC;AAgCD,kCAA2B;AACzB,cAAI,MAAM,KAAK,MAAM,QAAQ,GACzB,OAAO,EAAE,KAAK,GAAG;AACrB,eAAK,OACD,gBAAgB,MAChB,8CAA8C,MAC9C,sCACJ;AAAA,QACF;AAEA,mBAAU,YAAY,aAAa,cAAc;AACjD,mBAAU,YAAY,aAAa,cAAc;AA+CjD,6BAAsB,KAAK,KAAK;AAC9B,cAAI;AAAK,iBAAK,MAAM,WAAW,GAAG;AAClC,cAAI,MAAM,KAAK,MAAM,QAAQ;AAC7B,cAAI,KAAK,MAAM,MAAM,GAAG;AACtB,gBAAI,eAAe,KAAK,MAAM,UAAU;AACxC,iBAAK,MAAM,YAAY,IAAI;AAC3B,iBAAK,IAAI,GAAG;AACZ,iBAAK,MAAM,YAAY,YAAY;AAAA,UACrC,OAAO;AACL,iBAAK,OACD,QAAQ,KACR,oCACA,wCACA,KACA,KAAK,MACL,IACJ;AAAA,UACF;AAAA,QACF;AAEA,mBAAU,UAAU,SAAS,WAAW;AACxC,mBAAU,UAAU,UAAU,WAAW;AACzC,mBAAU,UAAU,MAAM,WAAW;AA2CrC,2BAAmB,KAAK,KAAK;AAC3B,cAAI;AAAK,iBAAK,MAAM,WAAW,GAAG;AAClC,eAAK,OACD,EAAE,IAAI,KAAK,KAAK,MAAM,QAAQ,CAAC,GAC/B,2CACA,+CACA,KACA,KAAK,MACL,IACJ;AAAA,QACF;AAEA,mBAAU,UAAU,OAAO,SAAS;AACpC,mBAAU,UAAU,QAAQ,SAAS;AA6CrC,6BAAsB,GAAG,KAAK;AAC5B,cAAI;AAAK,iBAAK,MAAM,WAAW,GAAG;AAClC,cAAI,MAAM,KAAK,MAAM,QAAQ,GACzB,WAAW,KAAK,MAAM,UAAU,GAChC,UAAU,KAAK,MAAM,SAAS,GAC9B,YAAc,UAAW,UAAU,OAAO,IAC1C,OAAO,KAAK,MAAM,MAAM,GACxB,UAAU,EAAE,KAAK,GAAG,EAAE,YAAY,GAClC,QAAQ,EAAE,KAAK,CAAC,EAAE,YAAY,GAC9B,cACA,cAAc;AAElB,cAAI,YAAY,YAAY,SAAS,YAAY,OAAO;AACtD,gBAAI,WAAU,KAAK,SAAS,MAAM,IAAI,EAAE,GAAG,KAAK,SAAS,QAAQ;AAAA,UACnE;AAEA,cAAI,CAAC,YAAa,aAAY,UAAU,UAAU,SAAS;AACzD,2BAAe,YAAY;AAAA,UAC7B,WAAW,UAAU,YAAa,aAAY,YAAY,WAAW;AACnE,2BAAe,YAAY;AAAA,UAC7B,WAAW,CAAC,YAAa,aAAY,UAAU,YAAY,WAAW;AACpE,gBAAI,WAAY,YAAY,WAAY,MAAM,MAAM,MAAM;AAC1D,2BAAe,YAAY,cAAc,WAAW;AAAA,UACtD,OAAO;AACL,0BAAc;AAAA,UAChB;AAEA,cAAI,aAAa;AACf,kBAAM,IAAI,gBAAe,cAAc,QAAW,IAAI;AAAA,UACxD;AAEA,cAAI,UAAU;AACZ,gBAAI,aAAa,UACb;AACJ,gBAAI,YAAY,SAAS,YAAY,OAAO;AAC1C,2BAAa;AACb,2BAAa,IAAI;AAAA,YACnB,OAAO;AACL,2BAAa,IAAI;AAAA,YACnB;AACA,iBAAK,OACD,aAAa,GACb,gCAAgC,aAAa,gCAC7C,oCAAoC,aAAa,iBACjD,GACA,UACJ;AAAA,UACF,OAAO;AACL,iBAAK,OACD,MAAM,GACN,uCACA,yCACA,CACJ;AAAA,UACF;AAAA,QACF;AAEA,mBAAU,UAAU,SAAS,WAAW;AACxC,mBAAU,UAAU,MAAM,WAAW;AACrC,mBAAU,UAAU,eAAe,WAAW;AA8C9C,6BAAsB,GAAG,KAAK;AAC5B,cAAI;AAAK,iBAAK,MAAM,WAAW,GAAG;AAClC,cAAI,MAAM,KAAK,MAAM,QAAQ,GACzB,WAAW,KAAK,MAAM,UAAU,GAChC,UAAU,KAAK,MAAM,SAAS,GAC9B,YAAc,UAAW,UAAU,OAAO,IAC1C,OAAO,KAAK,MAAM,MAAM,GACxB,UAAU,EAAE,KAAK,GAAG,EAAE,YAAY,GAClC,QAAQ,EAAE,KAAK,CAAC,EAAE,YAAY,GAC9B,cACA,cAAc;AAElB,cAAI,YAAY,YAAY,SAAS,YAAY,OAAO;AACtD,gBAAI,WAAU,KAAK,SAAS,MAAM,IAAI,EAAE,GAAG,KAAK,SAAS,QAAQ;AAAA,UACnE;AAEA,cAAI,CAAC,YAAa,aAAY,UAAU,UAAU,SAAS;AACzD,2BAAe,YAAY;AAAA,UAC7B,WAAW,UAAU,YAAa,aAAY,YAAY,WAAW;AACnE,2BAAe,YAAY;AAAA,UAC7B,WAAW,CAAC,YAAa,aAAY,UAAU,YAAY,WAAW;AACpE,gBAAI,WAAY,YAAY,WAAY,MAAM,MAAM,MAAM;AAC1D,2BAAe,YAAY,cAAc,WAAW;AAAA,UACtD,OAAO;AACL,0BAAc;AAAA,UAChB;AAEA,cAAI,aAAa;AACf,kBAAM,IAAI,gBAAe,cAAc,QAAW,IAAI;AAAA,UACxD;AAEA,cAAI,UAAU;AACZ,gBAAI,aAAa,UACb;AACJ,gBAAI,YAAY,SAAS,YAAY,OAAO;AAC1C,2BAAa;AACb,2BAAa,IAAI;AAAA,YACnB,OAAO;AACL,2BAAa,IAAI;AAAA,YACnB;AACA,iBAAK,OACD,cAAc,GACd,gCAAgC,aAAa,mCAC7C,gCAAgC,aAAa,iBAC7C,GACA,UACJ;AAAA,UACF,OAAO;AACL,iBAAK,OACD,OAAO,GACP,0CACA,uCACA,CACJ;AAAA,UACF;AAAA,QACF;AAEA,mBAAU,UAAU,SAAS,WAAW;AACxC,mBAAU,UAAU,OAAO,WAAW;AACtC,mBAAU,UAAU,sBAAsB,WAAW;AA6CrD,6BAAsB,GAAG,KAAK;AAC5B,cAAI;AAAK,iBAAK,MAAM,WAAW,GAAG;AAClC,cAAI,MAAM,KAAK,MAAM,QAAQ,GACzB,WAAW,KAAK,MAAM,UAAU,GAChC,UAAU,KAAK,MAAM,SAAS,GAC9B,YAAc,UAAW,UAAU,OAAO,IAC1C,OAAO,KAAK,MAAM,MAAM,GACxB,UAAU,EAAE,KAAK,GAAG,EAAE,YAAY,GAClC,QAAQ,EAAE,KAAK,CAAC,EAAE,YAAY,GAC9B,cACA,cAAc;AAElB,cAAI,YAAY,YAAY,SAAS,YAAY,OAAO;AACtD,gBAAI,WAAU,KAAK,SAAS,MAAM,IAAI,EAAE,GAAG,KAAK,SAAS,QAAQ;AAAA,UACnE;AAEA,cAAI,CAAC,YAAa,aAAY,UAAU,UAAU,SAAS;AACzD,2BAAe,YAAY;AAAA,UAC7B,WAAW,UAAU,YAAa,aAAY,YAAY,WAAW;AACnE,2BAAe,YAAY;AAAA,UAC7B,WAAW,CAAC,YAAa,aAAY,UAAU,YAAY,WAAW;AACpE,gBAAI,WAAY,YAAY,WAAY,MAAM,MAAM,MAAM;AAC1D,2BAAe,YAAY,cAAc,WAAW;AAAA,UACtD,OAAO;AACL,0BAAc;AAAA,UAChB;AAEA,cAAI,aAAa;AACf,kBAAM,IAAI,gBAAe,cAAc,QAAW,IAAI;AAAA,UACxD;AAEA,cAAI,UAAU;AACZ,gBAAI,aAAa,UACb;AACJ,gBAAI,YAAY,SAAS,YAAY,OAAO;AAC1C,2BAAa;AACb,2BAAa,IAAI;AAAA,YACnB,OAAO;AACL,2BAAa,IAAI;AAAA,YACnB;AACA,iBAAK,OACD,aAAa,GACb,gCAAgC,aAAa,gCAC7C,oCAAoC,aAAa,iBACjD,GACA,UACJ;AAAA,UACF,OAAO;AACL,iBAAK,OACD,MAAM,GACN,uCACA,0CACA,CACJ;AAAA,UACF;AAAA,QACF;AAEA,mBAAU,UAAU,SAAS,WAAW;AACxC,mBAAU,UAAU,MAAM,WAAW;AACrC,mBAAU,UAAU,YAAY,WAAW;AA8C3C,4BAAqB,GAAG,KAAK;AAC3B,cAAI;AAAK,iBAAK,MAAM,WAAW,GAAG;AAClC,cAAI,MAAM,KAAK,MAAM,QAAQ,GACzB,WAAW,KAAK,MAAM,UAAU,GAChC,UAAU,KAAK,MAAM,SAAS,GAC9B,YAAc,UAAW,UAAU,OAAO,IAC1C,OAAO,KAAK,MAAM,MAAM,GACxB,UAAU,EAAE,KAAK,GAAG,EAAE,YAAY,GAClC,QAAQ,EAAE,KAAK,CAAC,EAAE,YAAY,GAC9B,cACA,cAAc;AAElB,cAAI,YAAY,YAAY,SAAS,YAAY,OAAO;AACtD,gBAAI,WAAU,KAAK,SAAS,MAAM,IAAI,EAAE,GAAG,KAAK,SAAS,QAAQ;AAAA,UACnE;AAEA,cAAI,CAAC,YAAa,aAAY,UAAU,UAAU,SAAS;AACzD,2BAAe,YAAY;AAAA,UAC7B,WAAW,UAAU,YAAa,aAAY,YAAY,WAAW;AACnE,2BAAe,YAAY;AAAA,UAC7B,WAAW,CAAC,YAAa,aAAY,UAAU,YAAY,WAAW;AACpE,gBAAI,WAAY,YAAY,WAAY,MAAM,MAAM,MAAM;AAC1D,2BAAe,YAAY,cAAc,WAAW;AAAA,UACtD,OAAO;AACL,0BAAc;AAAA,UAChB;AAEA,cAAI,aAAa;AACf,kBAAM,IAAI,gBAAe,cAAc,QAAW,IAAI;AAAA,UACxD;AAEA,cAAI,UAAU;AACZ,gBAAI,aAAa,UACb;AACJ,gBAAI,YAAY,SAAS,YAAY,OAAO;AAC1C,2BAAa;AACb,2BAAa,IAAI;AAAA,YACnB,OAAO;AACL,2BAAa,IAAI;AAAA,YACnB;AACA,iBAAK,OACD,cAAc,GACd,gCAAgC,aAAa,kCAC7C,gCAAgC,aAAa,iBAC7C,GACA,UACJ;AAAA,UACF,OAAO;AACL,iBAAK,OACD,OAAO,GACP,yCACA,uCACA,CACJ;AAAA,UACF;AAAA,QACF;AAEA,mBAAU,UAAU,QAAQ,UAAU;AACtC,mBAAU,UAAU,OAAO,UAAU;AACrC,mBAAU,UAAU,mBAAmB,UAAU;AA6CjD,mBAAU,UAAU,UAAU,SAAU,OAAO,QAAQ,KAAK;AAC1D,cAAI;AAAK,iBAAK,MAAM,WAAW,GAAG;AAClC,cAAI,MAAM,KAAK,MAAM,QAAQ,GACzB,WAAW,KAAK,MAAM,UAAU,GAChC,UAAU,KAAK,MAAM,SAAS,GAC9B,YAAc,UAAW,UAAU,OAAO,IAC1C,OAAO,KAAK,MAAM,MAAM,GACxB,UAAU,EAAE,KAAK,GAAG,EAAE,YAAY,GAClC,YAAY,EAAE,KAAK,KAAK,EAAE,YAAY,GACtC,aAAa,EAAE,KAAK,MAAM,EAAE,YAAY,GACxC,cACA,cAAc,MACd,QAAS,cAAc,UAAU,eAAe,SAC5C,MAAM,YAAY,IAAI,OAAO,OAAO,YAAY,IAChD,QAAQ,OAAO;AAEvB,cAAI,YAAY,YAAY,SAAS,YAAY,OAAO;AACtD,gBAAI,WAAU,KAAK,SAAS,MAAM,IAAI,EAAE,GAAG,KAAK,SAAS,QAAQ;AAAA,UACnE;AAEA,cAAI,CAAC,YAAa,aAAY,UAAW,eAAc,UAAU,eAAe,UAAU;AACxF,2BAAe,YAAY;AAAA,UAC7B,WAAY,eAAc,YAAY,eAAe,aAAc,aAAY,YAAY,WAAW;AACpG,2BAAe,YAAY;AAAA,UAC7B,WAAW,CAAC,YAAa,aAAY,UAAU,YAAY,WAAW;AACpE,gBAAI,WAAY,YAAY,WAAY,MAAM,MAAM,MAAM;AAC1D,2BAAe,YAAY,cAAc,WAAW;AAAA,UACtD,OAAO;AACL,0BAAc;AAAA,UAChB;AAEA,cAAI,aAAa;AACf,kBAAM,IAAI,gBAAe,cAAc,QAAW,IAAI;AAAA,UACxD;AAEA,cAAI,UAAU;AACZ,gBAAI,aAAa,UACb;AACJ,gBAAI,YAAY,SAAS,YAAY,OAAO;AAC1C,2BAAa;AACb,2BAAa,IAAI;AAAA,YACnB,OAAO;AACL,2BAAa,IAAI;AAAA,YACnB;AACA,iBAAK,OACD,cAAc,SAAS,cAAc,QACrC,gCAAgC,aAAa,aAAa,OAC1D,oCAAoC,aAAa,aAAa,KAClE;AAAA,UACF,OAAO;AACL,iBAAK,OACD,OAAO,SAAS,OAAO,QACvB,mCAAmC,OACnC,uCAAuC,KAC3C;AAAA,UACF;AAAA,QACF,CAAC;AAyCD,kCAA2B,aAAa,KAAK;AAC3C,cAAI;AAAK,iBAAK,MAAM,WAAW,GAAG;AAElC,cAAI,SAAS,KAAK,MAAM,QAAQ;AAChC,cAAI,OAAO,KAAK,MAAM,MAAM;AAC5B,cAAI,UAAU,KAAK,MAAM,SAAS;AAElC,cAAI;AACF,gBAAI,eAAe,kBAAkB;AAAA,UACvC,SAAS,KAAP;AACA,gBAAI,eAAe,WAAW;AAC5B,wBAAU,UAAU,UAAU,OAAO;AACrC,oBAAM,IAAI,gBACR,UAAU,sDACN,EAAE,KAAK,WAAW,IAAI,eAC1B,QACA,IACF;AAAA,YACF;AACA,kBAAM;AAAA,UACR;AAEA,cAAI,OAAO,EAAE,QAAQ,WAAW;AAChC,cAAI,SAAS,MAAM;AACjB,mBAAO;AAAA,UACT;AAEA,eAAK,OACD,cACA,2CAA2C,MAC3C,+CAA+C,IACnD;AAAA,QACF;AAAC;AAED,mBAAU,UAAU,cAAc,gBAAgB;AAClD,mBAAU,UAAU,cAAc,gBAAgB;AAkHlD,gCAAyB,MAAM,KAAK,KAAK;AACvC,cAAI;AAAK,iBAAK,MAAM,WAAW,GAAG;AAElC,cAAI,WAAW,KAAK,MAAM,QAAQ,GAC9B,QAAQ,KAAK,MAAM,KAAK,GACxB,UAAU,KAAK,MAAM,SAAS,GAC9B,MAAM,KAAK,MAAM,QAAQ,GACzB,OAAO,KAAK,MAAM,MAAM,GACxB,WAAW,OAAO;AAEtB,oBAAU,UAAU,UAAU,OAAO;AAErC,cAAI,UAAU;AACZ,gBAAI,aAAa,UAAU;AACzB,oBAAM,IAAI,gBACR,UAAU,sEACV,QACA,IACF;AAAA,YACF;AAAA,UACF,OAAO;AACL,gBAAI,aAAa,YAAY,aAAa,YAAY,aAAa,UAAU;AAC3E,oBAAM,IAAI,gBACR,UAAU,gEACV,QACA,IACF;AAAA,YACF;AAAA,UACF;AAEA,cAAI,YAAY,OAAO;AACrB,kBAAM,IAAI,gBACR,UAAU,oDACV,QACA,IACF;AAAA,UACF;AAEA,cAAI,QAAQ,QAAQ,QAAQ,QAAW;AACrC,kBAAM,IAAI,gBACR,UAAU,uCACV,QACA,IACF;AAAA,UACF;AAEA,cAAI,SAAS,KAAK,MAAM,MAAM,GAC1B,SAAS,KAAK,MAAM,QAAQ,GAC5B,WAAW,WAAW,EAAE,YAAY,KAAK,IAAI,IAAI,MACjD,QAAQ,WAAW,SAAS,QAAQ,IAAI;AAE5C,cAAI,aAAa;AACjB,cAAI;AAAQ,0BAAc;AAC1B,cAAI;AAAO,0BAAc;AACzB,cAAI;AAAU,0BAAc;AAC5B,wBAAc;AAEd,cAAI;AACJ,cAAI;AAAO,0BAAc,OAAO,UAAU,eAAe,KAAK,KAAK,IAAI;AAAA,mBAC9D;AAAU,0BAAc,SAAS;AAAA;AACrC,0BAAc,EAAE,YAAY,KAAK,IAAI;AAO1C,cAAI,CAAC,UAAU,UAAU,WAAW,GAAG;AACrC,iBAAK,OACD,aACA,8BAA8B,aAAa,EAAE,QAAQ,IAAI,GACzD,kCAAkC,aAAa,EAAE,QAAQ,IAAI,CAAC;AAAA,UACpE;AAEA,cAAI,UAAU,SAAS,GAAG;AACxB,iBAAK,OACD,eAAgB,UAAS,EAAE,IAAI,KAAK,KAAK,IAAI,QAAQ,QACrD,8BAA8B,aAAa,EAAE,QAAQ,IAAI,IAAI,8BAC7D,kCAAkC,aAAa,EAAE,QAAQ,IAAI,IAAI,cACjE,KACA,KACJ;AAAA,UACF;AAEA,eAAK,MAAM,UAAU,KAAK;AAAA,QAC5B;AAEA,mBAAU,UAAU,YAAY,cAAc;AAE9C,mCAA4B,MAAM,OAAO,KAAK;AAC5C,eAAK,MAAM,OAAO,IAAI;AACtB,yBAAe,MAAM,MAAM,SAAS;AAAA,QACtC;AAEA,mBAAU,UAAU,eAAe,iBAAiB;AACpD,mBAAU,UAAU,mBAAmB,iBAAiB;AAyHxD,6CAAsC,MAAM,YAAY,KAAK;AAC3D,cAAI,OAAO,eAAe,UAAU;AAClC,kBAAM;AACN,yBAAa;AAAA,UACf;AACA,cAAI;AAAK,iBAAK,MAAM,WAAW,GAAG;AAClC,cAAI,MAAM,KAAK,MAAM,QAAQ;AAC7B,cAAI,mBAAmB,OAAO,yBAAyB,OAAO,GAAG,GAAG,IAAI;AACxE,cAAI,oBAAoB,YAAY;AAClC,iBAAK,OACD,EAAE,IAAI,YAAY,gBAAgB,GAClC,8CAA8C,EAAE,QAAQ,IAAI,IAAI,0BAA0B,EAAE,QAAQ,UAAU,IAAI,WAAW,EAAE,QAAQ,gBAAgB,GACvJ,8CAA8C,EAAE,QAAQ,IAAI,IAAI,8BAA8B,EAAE,QAAQ,UAAU,GAClH,YACA,kBACA,IACJ;AAAA,UACF,OAAO;AACL,iBAAK,OACD,kBACA,6DAA6D,EAAE,QAAQ,IAAI,GAC3E,iEAAiE,EAAE,QAAQ,IAAI,CACnF;AAAA,UACF;AACA,eAAK,MAAM,UAAU,gBAAgB;AAAA,QACvC;AAEA,mBAAU,UAAU,yBAAyB,2BAA2B;AACxE,mBAAU,UAAU,6BAA6B,2BAA2B;AA4D5E,qCAA8B;AAC5B,eAAK,MAAM,YAAY,IAAI;AAAA,QAC7B;AAEA,8BAAuB,GAAG,KAAK;AAC7B,cAAI;AAAK,iBAAK,MAAM,WAAW,GAAG;AAClC,cAAI,MAAM,KAAK,MAAM,QAAQ,GACzB,UAAU,EAAE,KAAK,GAAG,EAAE,YAAY,GAClC,UAAU,KAAK,MAAM,SAAS,GAC9B,OAAO,KAAK,MAAM,MAAM,GACxB,aAAa,UACb;AAEJ,kBAAQ;AAAA,iBACD;AAAA,iBACA;AACH,2BAAa;AACb,2BAAa,IAAI;AACjB;AAAA;AAEA,kBAAI,WAAU,KAAK,SAAS,MAAM,IAAI,EAAE,GAAG,KAAK,SAAS,QAAQ;AACjE,2BAAa,IAAI;AAAA;AAGrB,eAAK,OACD,cAAc,GACd,gCAAgC,aAAa,6BAC7C,oCAAoC,aAAa,cACjD,GACA,UACJ;AAAA,QACF;AAEA,mBAAU,mBAAmB,UAAU,cAAc,iBAAiB;AACtE,mBAAU,mBAAmB,YAAY,cAAc,iBAAiB;AA6BxE,6BAAqB,IAAI,KAAK;AAC5B,cAAI;AAAK,iBAAK,MAAM,WAAW,GAAG;AAClC,cAAI,MAAM,KAAK,MAAM,QAAQ;AAC7B,eAAK,OACD,GAAG,KAAK,GAAG,GACX,+BAA+B,IAC/B,mCAAmC,EACvC;AAAA,QACF;AAEA,mBAAU,UAAU,SAAS,WAAW;AACxC,mBAAU,UAAU,WAAW,WAAW;AA2B1C,mBAAU,UAAU,UAAU,SAAU,KAAK,KAAK;AAChD,cAAI;AAAK,iBAAK,MAAM,WAAW,GAAG;AAClC,cAAI,MAAM,KAAK,MAAM,QAAQ,GACzB,UAAU,KAAK,MAAM,SAAS,GAC9B,OAAO,KAAK,MAAM,MAAM;AAC5B,cAAI,WAAU,KAAK,SAAS,MAAM,IAAI,EAAE,GAAG,EAAE,QAAQ;AAErD,eAAK,OACD,CAAC,IAAI,QAAQ,GAAG,GAChB,iCAAiC,EAAE,QAAQ,GAAG,GAC9C,qCAAqC,EAAE,QAAQ,GAAG,CACtD;AAAA,QACF,CAAC;AA0GD,4BAAqB,MAAM;AACzB,cAAI,MAAM,KAAK,MAAM,QAAQ,GACzB,UAAU,EAAE,KAAK,GAAG,GACpB,WAAW,EAAE,KAAK,IAAI,GACtB,OAAO,KAAK,MAAM,MAAM,GACxB,SAAS,KAAK,MAAM,MAAM,GAC1B,KACA,UAAU,IACV,QACA,KAAK,MACL,UAAU,KAAK,MAAM,SAAS;AAElC,oBAAU,UAAU,UAAU,OAAO;AACrC,cAAI,eAAe,UAAU;AAE7B,cAAI,YAAY,SAAS,YAAY,OAAO;AAC1C,sBAAU,SAAS,YAAY;AAC/B,qBAAS,CAAC;AAGV,gBAAI,QAAQ,SAAU,KAAK,KAAK;AAAE,qBAAO,KAAK,GAAG;AAAA,YAAE,CAAC;AAEpD,gBAAI,aAAa,SAAS;AACxB,qBAAO,MAAM,UAAU,MAAM,KAAK,SAAS;AAAA,YAC7C;AAAA,UACF,OAAO;AACL,qBAAS,EAAE,2BAA2B,GAAG;AAEzC,oBAAQ;AAAA,mBACD;AACH,oBAAI,UAAU,SAAS,GAAG;AACxB,wBAAM,IAAI,gBAAe,cAAc,QAAW,IAAI;AAAA,gBACxD;AACA;AAAA,mBACG;AACH,oBAAI,UAAU,SAAS,GAAG;AACxB,wBAAM,IAAI,gBAAe,cAAc,QAAW,IAAI;AAAA,gBACxD;AACA,uBAAO,OAAO,KAAK,IAAI;AACvB;AAAA;AAEA,uBAAO,MAAM,UAAU,MAAM,KAAK,SAAS;AAAA;AAI/C,mBAAO,KAAK,IAAI,SAAU,KAAK;AAC7B,qBAAO,OAAO,QAAQ,WAAW,MAAM,OAAO,GAAG;AAAA,YACnD,CAAC;AAAA,UACH;AAEA,cAAI,CAAC,KAAK,QAAQ;AAChB,kBAAM,IAAI,gBAAe,UAAU,iBAAiB,QAAW,IAAI;AAAA,UACrE;AAEA,cAAI,MAAM,KAAK,QACX,MAAM,KAAK,MAAM,KAAK,GACtB,MAAM,KAAK,MAAM,KAAK,GACtB,WAAW;AAEf,cAAI,CAAC,OAAO,CAAC,KAAK;AAChB,kBAAM;AAAA,UACR;AAGA,cAAI,KAAK;AACP,iBAAK,SAAS,KAAK,SAAS,aAAa;AACvC,qBAAO,OAAO,KAAK,SAAS,WAAW;AACrC,oBAAI,QAAQ;AACV,yBAAO,EAAE,IAAI,aAAa,SAAS;AAAA,gBACrC,OAAO;AACL,yBAAO,gBAAgB;AAAA,gBACzB;AAAA,cACF,CAAC;AAAA,YACH,CAAC;AAAA,UACH;AAGA,cAAI,KAAK;AACP,iBAAK,SAAS,MAAM,SAAS,aAAa;AACxC,qBAAO,OAAO,KAAK,SAAS,WAAW;AACrC,oBAAI,QAAQ;AACV,yBAAO,EAAE,IAAI,aAAa,SAAS;AAAA,gBACrC,OAAO;AACL,yBAAO,gBAAgB;AAAA,gBACzB;AAAA,cACF,CAAC;AAAA,YACH,CAAC;AAED,gBAAI,CAAC,KAAK,MAAM,UAAU,GAAG;AAC3B,mBAAK,MAAM,KAAK,UAAU,OAAO;AAAA,YACnC;AAAA,UACF;AAGA,cAAI,MAAM,GAAG;AACX,mBAAO,KAAK,IAAI,SAAS,KAAK;AAC5B,qBAAO,EAAE,QAAQ,GAAG;AAAA,YACtB,CAAC;AACD,gBAAI,OAAO,KAAK,IAAI;AACpB,gBAAI,KAAK;AACP,oBAAM,KAAK,KAAK,IAAI,IAAI,WAAW;AAAA,YACrC;AACA,gBAAI,KAAK;AACP,oBAAM,KAAK,KAAK,IAAI,IAAI,UAAU;AAAA,YACpC;AAAA,UACF,OAAO;AACL,kBAAM,EAAE,QAAQ,KAAK,EAAE;AAAA,UACzB;AAGA,gBAAO,OAAM,IAAI,UAAU,UAAU;AAGrC,gBAAO,MAAK,MAAM,UAAU,IAAI,aAAa,WAAW;AAGxD,eAAK,OACD,IACA,yBAAyB,UAAU,KACnC,6BAA6B,UAAU,KACvC,SAAS,MAAM,CAAC,EAAE,KAAK,EAAE,gBAAgB,GACzC,OAAO,KAAK,EAAE,gBAAgB,GAC9B,IACJ;AAAA,QACF;AAEA,mBAAU,UAAU,QAAQ,UAAU;AACtC,mBAAU,UAAU,OAAO,UAAU;AAuKrC,8BAAuB,WAAW,eAAe,KAAK;AACpD,cAAI;AAAK,iBAAK,MAAM,WAAW,GAAG;AAClC,cAAI,MAAM,KAAK,MAAM,QAAQ,GACzB,OAAO,KAAK,MAAM,MAAM,GACxB,UAAU,KAAK,MAAM,SAAS,GAC9B,SAAS,KAAK,MAAM,QAAQ,KAAK;AACrC,cAAI,WAAU,KAAK,SAAS,MAAM,IAAI,EAAE,GAAG,EAAE,UAAU;AAEvD,cAAI,qBAAqB,UAAU,OAAO,cAAc,UAAU;AAChE,4BAAgB;AAChB,wBAAY;AAAA,UACd;AAEA,cAAI;AACJ,cAAI;AACF,gBAAI;AAAA,UACN,SAAS,KAAP;AACA,wBAAY;AAAA,UACd;AAIA,cAAI,sBAAsB,cAAc,UAAa,kBAAkB;AAIvE,cAAI,oBAAoB,QAAQ,aAAa,aAAa;AAC1D,cAAI,gBAAgB;AACpB,cAAI,oBAAoB;AAGxB,cAAI,uBAAuB,CAAC,uBAAuB,CAAC,QAAQ;AAE1D,gBAAI,kBAAkB;AACtB,gBAAI,qBAAqB,OAAO;AAC9B,gCAAkB;AAAA,YACpB,WAAW,WAAW;AACpB,gCAAkB,EAAE,WAAW,mBAAmB,SAAS;AAAA,YAC7D;AAEA,iBAAK,OACD,WACA,+BAA+B,iBAC/B,gEACA,aAAa,UAAU,SAAS,GAC/B,qBAAqB,QACpB,UAAU,SAAS,IAAK,OAAO,cAAc,WAAW,YAAY,aAC5C,EAAE,WAAW,mBAAmB,SAAS,CACvE;AAAA,UACF;AAEA,cAAI,aAAa,WAAW;AAE1B,gBAAI,qBAAqB,OAAO;AAC9B,kBAAI,uBAAuB,EAAE,WAAW,mBAAmB,WAAW,SAAS;AAE/E,kBAAI,yBAAyB,QAAQ;AAGnC,oBAAI,qBAAqB,QAAQ;AAC/B,kCAAgB;AAAA,gBAClB,OAAO;AACL,uBAAK,OACD,QACA,0DACA,yCAA0C,cAAa,CAAC,SAAS,2BAA2B,KAC5F,UAAU,SAAS,GACnB,UAAU,SAAS,CACvB;AAAA,gBACF;AAAA,cACF;AAAA,YACF;AAEA,gBAAI,0BAA0B,EAAE,WAAW,sBAAsB,WAAW,SAAS;AACrF,gBAAI,4BAA4B,QAAQ;AACtC,kBAAI,qBAAqB,QAAQ;AAC7B,gCAAgB;AAAA,cACpB,OAAO;AACL,qBAAK,OACD,QACA,0DACA,yCAA0C,aAAY,2BAA2B,KAChF,qBAAqB,QAAQ,UAAU,SAAS,IAAI,aAAa,EAAE,WAAW,mBAAmB,SAAS,GAC1G,qBAAqB,QAAQ,UAAU,SAAS,IAAI,aAAa,EAAE,WAAW,mBAAmB,SAAS,CAC/G;AAAA,cACF;AAAA,YACF;AAAA,UACF;AAEA,cAAI,aAAa,kBAAkB,UAAa,kBAAkB,MAAM;AAEtE,gBAAI,cAAc;AAClB,gBAAI,yBAAyB,QAAQ;AACnC,4BAAc;AAAA,YAChB;AAEA,gBAAI,sBAAsB,EAAE,WAAW,kBAAkB,WAAW,aAAa;AACjF,gBAAI,wBAAwB,QAAQ;AAClC,kBAAI,qBAAqB,QAAQ;AAC7B,oCAAoB;AAAA,cACxB,OAAO;AACL,qBAAK,OACH,QACE,qCAAqC,cAAc,0BACnD,yCAAyC,cAAc,WACtD,eACA,EAAE,WAAW,WAAW,SAAS,CACtC;AAAA,cACF;AAAA,YACF;AAAA,UACF;AAGA,cAAI,iBAAiB,mBAAmB;AACtC,iBAAK,OACH,QACE,0DACA,yCAA0C,aAAY,2BAA2B,KAChF,qBAAqB,QAAQ,UAAU,SAAS,IAAI,aAAa,EAAE,WAAW,mBAAmB,SAAS,GAC1G,qBAAqB,QAAQ,UAAU,SAAS,IAAI,aAAa,EAAE,WAAW,mBAAmB,SAAS,CAC/G;AAAA,UACF;AAEA,eAAK,MAAM,UAAU,SAAS;AAAA,QAChC;AAAC;AAED,mBAAU,UAAU,SAAS,YAAY;AACzC,mBAAU,UAAU,UAAU,YAAY;AAC1C,mBAAU,UAAU,SAAS,YAAY;AAmEzC,2BAAoB,QAAQ,KAAK;AAC/B,cAAI;AAAK,iBAAK,MAAM,WAAW,GAAG;AAClC,cAAI,MAAM,KAAK,MAAM,QAAQ,GACzB,SAAS,KAAK,MAAM,QAAQ,GAC5B,UAAW,eAAe,OAAO,OAAO,CAAC,SACvC,IAAI,UAAU,UACd,IAAI;AAEV,eAAK,OACD,eAAe,OAAO,SACtB,oCAAoC,EAAE,QAAQ,MAAM,GACpD,wCAAwC,EAAE,QAAQ,MAAM,CAC5D;AAAA,QACF;AAEA,mBAAU,UAAU,aAAa,SAAS;AAC1C,mBAAU,UAAU,cAAc,SAAS;AAsB3C,mBAAU,YAAY,UAAU,WAAY;AAC1C,eAAK,MAAM,UAAU,IAAI;AAAA,QAC3B,CAAC;AAwCD,yBAAkB,SAAS,KAAK;AAC9B,cAAI;AAAK,iBAAK,MAAM,WAAW,GAAG;AAClC,cAAI,MAAM,KAAK,MAAM,QAAQ;AAC7B,cAAI,SAAS,QAAQ,GAAG;AACxB,eAAK,OACD,QACA,iCAAiC,EAAE,WAAW,OAAO,GACrD,oCAAoC,EAAE,WAAW,OAAO,GACxD,KAAK,MAAM,QAAQ,IAAI,QAAQ,MAC/B,MACJ;AAAA,QACF;AAEA,mBAAU,UAAU,WAAW,OAAO;AACtC,mBAAU,UAAU,aAAa,OAAO;AAwCxC,yBAAiB,UAAU,OAAO,KAAK;AACrC,cAAI;AAAK,iBAAK,MAAM,WAAW,GAAG;AAClC,cAAI,MAAM,KAAK,MAAM,QAAQ,GACzB,UAAU,KAAK,MAAM,SAAS,GAC9B,OAAO,KAAK,MAAM,MAAM;AAE5B,cAAI,WAAU,KAAK,SAAS,MAAM,IAAI,EAAE,GAAG,EAAE,QAAQ;AACrD,cAAI,OAAO,aAAa,YAAY,OAAO,UAAU,UAAU;AAC7D,sBAAU,UAAU,UAAU,OAAO;AACrC,gBAAI,eAAe,UAAU,SAAY,8BAA8B;AACvE,kBAAM,IAAI,gBACN,UAAU,8DAA8D,cACxE,QACA,IACJ;AAAA,UACF;AAEA,eAAK,OACD,KAAK,IAAI,MAAM,QAAQ,KAAK,OAC5B,qCAAqC,WAAW,UAAU,OAC1D,yCAAyC,WAAW,UAAU,KAClE;AAAA,QACF;AAEA,mBAAU,UAAU,WAAW,OAAO;AACtC,mBAAU,UAAU,iBAAiB,OAAO;AAG5C,4BAAoB,QAAQ,UAAU,KAAK,UAAU,SAAS;AAC5D,cAAI,CAAC,UAAU;AACb,gBAAI,OAAO,WAAW,SAAS;AAAQ,qBAAO;AAC9C,uBAAW,SAAS,MAAM;AAAA,UAC5B;AAEA,iBAAO,OAAO,MAAM,SAAS,MAAM,KAAK;AACtC,gBAAI;AAAS,qBAAO,MAAM,IAAI,MAAM,SAAS,IAAI,IAAI,SAAS,SAAS;AAEvE,gBAAI,CAAC,KAAK;AACR,kBAAI,WAAW,SAAS,QAAQ,IAAI;AACpC,kBAAI,aAAa;AAAI,uBAAO;AAG5B,kBAAI,CAAC;AAAU,yBAAS,OAAO,UAAU,CAAC;AAC1C,qBAAO;AAAA,YACT;AAEA,mBAAO,SAAS,KAAK,SAAS,OAAO,WAAU;AAC7C,kBAAI,CAAC,IAAI,MAAM,KAAK;AAAG,uBAAO;AAG9B,kBAAI,CAAC;AAAU,yBAAS,OAAO,WAAU,CAAC;AAC1C,qBAAO;AAAA,YACT,CAAC;AAAA,UACH,CAAC;AAAA,QACH;AAuEA,mBAAU,UAAU,WAAW,SAAU,QAAQ,KAAK;AACpD,cAAI;AAAK,iBAAK,MAAM,WAAW,GAAG;AAClC,cAAI,MAAM,KAAK,MAAM,QAAQ,GACzB,UAAU,KAAK,MAAM,SAAS,GAC9B,OAAO,KAAK,MAAM,MAAM;AAE5B,cAAI,WAAU,KAAK,SAAS,MAAM,IAAI,EAAE,GAAG,GAAG,GAAG,OAAO;AACxD,cAAI,WAAU,QAAQ,SAAS,MAAM,IAAI,EAAE,GAAG,GAAG,GAAG,OAAO;AAE3D,cAAI,WAAW,KAAK,MAAM,UAAU;AACpC,cAAI,UAAU,KAAK,MAAM,SAAS;AAElC,cAAI,SAAS,SAAS;AAEtB,cAAI,UAAU;AACZ,sBAAU,UAAU,wBAAwB;AAC5C,sBAAU,4BAA4B,UAAU;AAChD,4BAAgB,gCAAgC,UAAU;AAAA,UAC5D,OAAO;AACL,sBAAU,UAAU,oBAAoB;AACxC,sBAAU,uCAAuC,UAAU;AAC3D,4BAAgB,2CAA2C,UAAU;AAAA,UACvE;AAEA,cAAI,MAAM,KAAK,MAAM,MAAM,IAAI,EAAE,MAAM;AAEvC,eAAK,OACD,WAAW,QAAQ,KAAK,KAAK,UAAU,OAAO,GAC9C,SACA,eACA,QACA,KACA,IACJ;AAAA,QACF,CAAC;AAwCD,uBAAgB,MAAM,KAAK;AACzB,cAAI;AAAK,iBAAK,MAAM,WAAW,GAAG;AAClC,cAAI,WAAW,KAAK,MAAM,QAAQ,GAC9B,UAAU,KAAK,MAAM,SAAS,GAC9B,OAAO,KAAK,MAAM,MAAM,GACxB,WAAW,KAAK,MAAM,UAAU,GAChC,SAAS,KAAK,MAAM,MAAM;AAC9B,cAAI,WAAU,MAAM,SAAS,MAAM,IAAI,EAAE,GAAG,GAAG,GAAG,OAAO;AAEzD,cAAI,UAAU;AACZ,iBAAK,OACH,KAAK,KAAK,SAAS,aAAa;AAAE,qBAAO,SAAS,QAAQ,WAAW,IAAI;AAAA,YAAG,CAAC,GAC3E,6CACA,iDACA,MACA,QACJ;AAAA,UACF,OAAO;AACL,gBAAI,QAAQ;AACV,mBAAK,OACH,KAAK,KAAK,SAAS,aAAa;AAAE,uBAAO,EAAE,IAAI,UAAU,WAAW;AAAA,cAAE,CAAC,GACrE,kDACA,kDACA,MACA,QACJ;AAAA,YACF,OAAO;AACL,mBAAK,OACH,KAAK,QAAQ,QAAQ,IAAI,IACvB,wCACA,4CACA,MACA,QACJ;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAEA,mBAAU,UAAU,SAAS,KAAK;AAiGlC,+BAAwB,SAAS,MAAM,KAAK;AAC1C,cAAI;AAAK,iBAAK,MAAM,WAAW,GAAG;AAClC,cAAI,KAAK,KAAK,MAAM,QAAQ,GACxB,UAAU,KAAK,MAAM,SAAS,GAC9B,OAAO,KAAK,MAAM,MAAM;AAC5B,cAAI,WAAU,IAAI,SAAS,MAAM,IAAI,EAAE,GAAG,EAAE,UAAU;AAEtD,cAAI;AACJ,cAAI,CAAC,MAAM;AACT,gBAAI,WAAU,SAAS,SAAS,MAAM,IAAI,EAAE,GAAG,EAAE,UAAU;AAC3D,sBAAU,QAAQ;AAAA,UACpB,OAAO;AACL,gBAAI,WAAU,SAAS,SAAS,MAAM,IAAI,EAAE,GAAG,KAAK,SAAS,IAAI;AACjE,sBAAU,QAAQ;AAAA,UACpB;AAEA,aAAG;AAEH,cAAI,QAAQ,SAAS,UAAa,SAAS,OAAO,QAAQ,IAAI,QAAQ;AACtE,cAAI,SAAS,SAAS,UAAa,SAAS,OAAO,UAAU,MAAM;AAGnE,eAAK,MAAM,eAAe,MAAM;AAChC,eAAK,MAAM,qBAAqB,OAAO;AACvC,eAAK,MAAM,mBAAmB,KAAK;AACnC,eAAK,MAAM,iBAAiB,QAAQ;AACpC,eAAK,MAAM,aAAa,UAAU,OAAO;AAEzC,eAAK,OACH,YAAY,OACV,cAAc,SAAS,cACvB,cAAc,SAAS,gBAC3B;AAAA,QACF;AAEA,mBAAU,UAAU,UAAU,aAAa;AAC3C,mBAAU,UAAU,WAAW,aAAa;AAiF5C,iCAA0B,SAAS,MAAM,KAAK;AAC5C,cAAI;AAAK,iBAAK,MAAM,WAAW,GAAG;AAClC,cAAI,KAAK,KAAK,MAAM,QAAQ,GACxB,UAAU,KAAK,MAAM,SAAS,GAC9B,OAAO,KAAK,MAAM,MAAM;AAC5B,cAAI,WAAU,IAAI,SAAS,MAAM,IAAI,EAAE,GAAG,EAAE,UAAU;AAEtD,cAAI;AACJ,cAAI,CAAC,MAAM;AACT,gBAAI,WAAU,SAAS,SAAS,MAAM,IAAI,EAAE,GAAG,EAAE,UAAU;AAC3D,sBAAU,QAAQ;AAAA,UACpB,OAAO;AACL,gBAAI,WAAU,SAAS,SAAS,MAAM,IAAI,EAAE,GAAG,KAAK,SAAS,IAAI;AACjE,sBAAU,QAAQ;AAAA,UACpB;AAGA,cAAI,WAAU,SAAS,SAAS,MAAM,IAAI,EAAE,GAAG,EAAE,QAAQ;AAEzD,aAAG;AAEH,cAAI,QAAQ,SAAS,UAAa,SAAS,OAAO,QAAQ,IAAI,QAAQ;AACtE,cAAI,SAAS,SAAS,UAAa,SAAS,OAAO,UAAU,MAAM;AAEnE,eAAK,MAAM,eAAe,MAAM;AAChC,eAAK,MAAM,qBAAqB,OAAO;AACvC,eAAK,MAAM,mBAAmB,KAAK;AACnC,eAAK,MAAM,iBAAiB,UAAU;AACtC,eAAK,MAAM,aAAa,QAAQ,OAAO;AAEvC,eAAK,OACH,QAAQ,UAAU,GAChB,cAAc,SAAS,gBACvB,cAAc,SAAS,kBAC3B;AAAA,QACF;AAEA,mBAAU,UAAU,YAAY,eAAe;AAC/C,mBAAU,UAAU,aAAa,eAAe;AAiFhD,iCAA0B,SAAS,MAAM,KAAK;AAC5C,cAAI;AAAK,iBAAK,MAAM,WAAW,GAAG;AAClC,cAAI,KAAK,KAAK,MAAM,QAAQ,GACxB,UAAU,KAAK,MAAM,SAAS,GAC9B,OAAO,KAAK,MAAM,MAAM;AAC5B,cAAI,WAAU,IAAI,SAAS,MAAM,IAAI,EAAE,GAAG,EAAE,UAAU;AAEtD,cAAI;AACJ,cAAI,CAAC,MAAM;AACT,gBAAI,WAAU,SAAS,SAAS,MAAM,IAAI,EAAE,GAAG,EAAE,UAAU;AAC3D,sBAAU,QAAQ;AAAA,UACpB,OAAO;AACL,gBAAI,WAAU,SAAS,SAAS,MAAM,IAAI,EAAE,GAAG,KAAK,SAAS,IAAI;AACjE,sBAAU,QAAQ;AAAA,UACpB;AAGA,cAAI,WAAU,SAAS,SAAS,MAAM,IAAI,EAAE,GAAG,EAAE,QAAQ;AAEzD,aAAG;AAEH,cAAI,QAAQ,SAAS,UAAa,SAAS,OAAO,QAAQ,IAAI,QAAQ;AACtE,cAAI,SAAS,SAAS,UAAa,SAAS,OAAO,UAAU,MAAM;AAEnE,eAAK,MAAM,eAAe,MAAM;AAChC,eAAK,MAAM,qBAAqB,OAAO;AACvC,eAAK,MAAM,mBAAmB,KAAK;AACnC,eAAK,MAAM,iBAAiB,UAAU;AACtC,eAAK,MAAM,aAAa,UAAU,KAAK;AAEvC,eAAK,OACH,QAAQ,UAAU,GAChB,cAAc,SAAS,gBACvB,cAAc,SAAS,kBAC3B;AAAA,QACF;AAEA,mBAAU,UAAU,YAAY,eAAe;AAC/C,mBAAU,UAAU,aAAa,eAAe;AAoEhD,6BAAqB,OAAO,KAAK;AAC/B,cAAI;AAAK,iBAAK,MAAM,WAAW,GAAG;AAElC,cAAI,SAAS,KAAK,MAAM,aAAa;AACrC,cAAI,UAAU,KAAK,MAAM,mBAAmB;AAC5C,cAAI,QAAQ,KAAK,MAAM,iBAAiB;AACxC,cAAI,WAAW,KAAK,MAAM,eAAe;AACzC,cAAI,YAAY,KAAK,MAAM,WAAW;AAEtC,cAAI;AACJ,cAAI,aAAa,UAAU;AACzB,yBAAa,KAAK,IAAI,QAAQ,OAAO,MAAM,KAAK,IAAI,KAAK;AAAA,UAC3D,OAAO;AACL,yBAAa,cAAc,KAAK,IAAI,KAAK;AAAA,UAC3C;AAEA,eAAK,OACH,YACE,cAAc,SAAS,SAAS,WAAW,SAAS,OACpD,cAAc,SAAS,aAAa,WAAW,SAAS,KAC5D;AAAA,QACF;AAEA,mBAAU,UAAU,MAAM,WAAW;AA8BrC,mBAAU,YAAY,cAAc,WAAW;AAC7C,cAAI,MAAM,KAAK,MAAM,QAAQ;AAO7B,cAAI,eAAe,QAAQ,OAAO,GAAG,KAAK,OAAO,aAAa,GAAG;AAEjE,eAAK,OACH,cACE,qCACA,uCACJ;AAAA,QACF,CAAC;AA8BD,mBAAU,YAAY,UAAU,WAAW;AACzC,cAAI,MAAM,KAAK,MAAM,QAAQ;AAO7B,cAAI,WAAW,QAAQ,OAAO,GAAG,IAAI,OAAO,SAAS,GAAG,IAAI;AAE5D,eAAK,OACH,UACE,iCACA,mCACJ;AAAA,QACF,CAAC;AA2BD,mBAAU,YAAY,UAAU,WAAW;AACzC,cAAI,MAAM,KAAK,MAAM,QAAQ;AAO7B,cAAI,WAAW,QAAQ,OAAO,GAAG,IAAI,OAAO,SAAS,GAAG,IAAI;AAE5D,eAAK,OACH,UACE,iCACA,mCACJ;AAAA,QACF,CAAC;AAmDD,mBAAU,YAAY,UAAU,SAAS,KAAK;AAC5C,cAAI,MAAM,KAAK,MAAM,QAAQ;AAE7B,eAAK,OACD,OAAO,QAAQ,YAAY,SAAS,GAAG,GACvC,0CACA,4CACJ;AAAA,QACF,CAAC;AAAA,MACH;AAAA;AAAA;;;AC5wHA;AAAA;AAMA,aAAO,UAAU,SAAU,OAAM,OAAM;AACrC,cAAK,SAAS,SAAU,KAAK,SAAS;AACpC,iBAAO,IAAI,MAAK,UAAU,KAAK,OAAO;AAAA,QACxC;AAwBA,cAAK,OAAO,OAAO,SAAU,QAAQ,UAAU,SAAS,UAAU;AAChE,cAAI,UAAU,SAAS,GAAG;AACtB,sBAAU;AACV,qBAAS;AAAA,UACb;AAEA,oBAAU,WAAW;AACrB,gBAAM,IAAI,MAAK,eAAe,SAAS;AAAA,YACnC;AAAA,YACA;AAAA,YACA;AAAA,UACJ,GAAG,MAAK,OAAO,IAAI;AAAA,QACrB;AAAA,MACF;AAAA;AAAA;;;AC9CA;AAAA;AAMA,aAAO,UAAU,SAAU,OAAM,OAAM;AACrC,YAAI,aAAY,MAAK;AAErB,8BAAuB;AAErB,kCAAwB;AACtB,gBAAI,gBAAgB,UACb,gBAAgB,UAChB,gBAAgB,WAChB,OAAO,WAAW,cAAc,gBAAgB,UAChD,OAAO,WAAW,cAAc,gBAAgB,QAAQ;AAC7D,qBAAO,IAAI,WAAU,KAAK,QAAQ,GAAG,MAAM,YAAY;AAAA,YACzD;AACA,mBAAO,IAAI,WAAU,MAAM,MAAM,YAAY;AAAA,UAC/C;AACA,gCAAsB,OAAO;AAO3B,mBAAO,eAAe,MAAM,UAAU;AAAA,cACpC;AAAA,cACA,YAAY;AAAA,cACZ,cAAc;AAAA,cACd,UAAU;AAAA,YACZ,CAAC;AAAA,UACH;AAEA,iBAAO,eAAe,OAAO,WAAW,UAAU;AAAA,YAChD,KAAK;AAAA,YACH,KAAK;AAAA,YACL,cAAc;AAAA,UAClB,CAAC;AAED,cAAI,UAAS,CAAC;AAyBd,kBAAO,OAAO,SAAU,QAAQ,UAAU,SAAS,UAAU;AAC3D,gBAAI,UAAU,SAAS,GAAG;AACtB,wBAAU;AACV,uBAAS;AAAA,YACb;AAEA,sBAAU,WAAW;AACrB,kBAAM,IAAI,MAAK,eAAe,SAAS;AAAA,cACnC;AAAA,cACA;AAAA,cACA;AAAA,YACJ,GAAG,QAAO,IAAI;AAAA,UAChB;AAiBA,kBAAO,QAAQ,SAAU,MAAM,MAAM,KAAK;AACxC,gBAAI,WAAU,MAAM,GAAG,EAAE,GAAG,MAAM,IAAI;AAAA,UACxC;AA0BA,kBAAO,QAAQ,SAAU,IAAI,MAAM,MAAM,KAAK;AAC5C,gBAAI,WAAU,IAAI,GAAG,EAAE,GAAG,MAAM,MAAM,IAAI;AAAA,UAC5C;AAgBA,kBAAO,QAAQ,SAAU,KAAK,KAAK;AACjC,gBAAI,WAAU,KAAK,GAAG,EAAE,GAAG;AAAA,UAC7B;AAGA,kBAAO,MAAM,CAAC;AAiBd,kBAAO,IAAI,QAAQ,SAAU,MAAM,MAAM,KAAK;AAC5C,gBAAI,WAAU,MAAM,GAAG,EAAE,GAAG,IAAI,MAAM,IAAI;AAAA,UAC5C;AAsBA,kBAAO,IAAI,QAAQ,SAAU,IAAI,MAAM,MAAM,KAAK;AAChD,gBAAI,WAAU,IAAI,GAAG,EAAE,GAAG,IAAI,MAAM,MAAM,IAAI;AAAA,UAChD;AAgBA,kBAAO,IAAI,QAAQ,SAAU,KAAK,KAAK;AACrC,gBAAI,WAAU,KAAK,GAAG,EAAE,GAAG,IAAI;AAAA,UACjC;AAEA,kBAAO,WAAW,QAAO;AACzB,kBAAO,IAAI,WAAW,QAAO,IAAI;AAEjC,iBAAO;AAAA,QACT;AAAC;AAED,cAAK,SAAS;AACd,cAAK,SAAS;AAAA,MAChB;AAAA;AAAA;;;AC1NA;AAAA;AAMA,aAAO,UAAU,SAAU,OAAM,OAAM;AACrC,AAIA,YAAI,aAAY,MAAK,WACjB,OAAO,MAAK;AAEhB,AAmBA,YAAI,UAAS,MAAK,SAAS,SAAU,SAAS,QAAQ;AACpD,cAAI,OAAO,IAAI,WAAU,MAAM,MAAM,MAAK,QAAQ,IAAI;AACtD,eAAK,OACD,SACA,QACA,kCACJ;AAAA,QACF;AAwBA,gBAAO,OAAO,SAAU,QAAQ,UAAU,SAAS,UAAU;AAC3D,cAAI,UAAU,SAAS,GAAG;AAGtB,sBAAU;AACV,qBAAS;AAAA,UACb;AAEA,oBAAU,WAAW;AACrB,gBAAM,IAAI,MAAK,eAAe,SAAS;AAAA,YACnC;AAAA,YACA;AAAA,YACA;AAAA,UACJ,GAAG,QAAO,IAAI;AAAA,QAChB;AAkBA,gBAAO,OAAO,SAAU,KAAK,KAAK;AAChC,cAAI,WAAU,KAAK,KAAK,QAAO,MAAM,IAAI,EAAE,GAAG;AAAA,QAChD;AAkBA,gBAAO,UAAU,SAAU,KAAK,KAAK;AACnC,cAAI,WAAU,KAAK,KAAK,QAAO,SAAS,IAAI,EAAE,GAAG,IAAI;AAAA,QACvD;AAiBA,gBAAO,QAAQ,SAAU,KAAK,KAAK,KAAK;AACtC,cAAI,OAAO,IAAI,WAAU,KAAK,KAAK,QAAO,OAAO,IAAI;AAErD,eAAK,OACD,OAAO,KAAK,MAAM,QAAQ,GAC1B,oCACA,wCACA,KACA,KACA,IACJ;AAAA,QACF;AAiBA,gBAAO,WAAW,SAAU,KAAK,KAAK,KAAK;AACzC,cAAI,OAAO,IAAI,WAAU,KAAK,KAAK,QAAO,UAAU,IAAI;AAExD,eAAK,OACD,OAAO,KAAK,MAAM,QAAQ,GAC1B,wCACA,oCACA,KACA,KACA,IACJ;AAAA,QACF;AAiBA,gBAAO,cAAc,SAAU,KAAK,KAAK,KAAK;AAC5C,cAAI,WAAU,KAAK,KAAK,QAAO,aAAa,IAAI,EAAE,GAAG,MAAM,GAAG;AAAA,QAChE;AAiBA,gBAAO,iBAAiB,SAAU,KAAK,KAAK,KAAK;AAC/C,cAAI,WAAU,KAAK,KAAK,QAAO,gBAAgB,IAAI,EAAE,GAAG,IAAI,MAAM,GAAG;AAAA,QACvE;AAkBA,gBAAO,YAAY,QAAO,kBAAkB,SAAU,KAAK,KAAK,KAAK;AACnE,cAAI,WAAU,KAAK,KAAK,QAAO,WAAW,IAAI,EAAE,GAAG,IAAI,GAAG;AAAA,QAC5D;AAiBA,gBAAO,eAAe,SAAU,KAAK,KAAK,KAAK;AAC7C,cAAI,WAAU,KAAK,KAAK,QAAO,cAAc,IAAI,EAAE,GAAG,IAAI,IAAI,GAAG;AAAA,QACnE;AAiBA,gBAAO,UAAU,SAAU,KAAK,KAAK,KAAK;AACxC,cAAI,WAAU,KAAK,KAAK,QAAO,SAAS,IAAI,EAAE,GAAG,GAAG,MAAM,GAAG;AAAA,QAC/D;AAkBA,gBAAO,YAAY,SAAU,KAAK,OAAO,KAAK;AAC5C,cAAI,WAAU,KAAK,KAAK,QAAO,WAAW,IAAI,EAAE,GAAG,GAAG,MAAM,KAAK;AAAA,QACnE;AAiBA,gBAAO,UAAU,SAAU,KAAK,KAAK,KAAK;AACxC,cAAI,WAAU,KAAK,KAAK,QAAO,SAAS,IAAI,EAAE,GAAG,GAAG,MAAM,GAAG;AAAA,QAC/D;AAkBA,gBAAO,WAAW,SAAU,KAAK,OAAO,KAAK;AAC3C,cAAI,WAAU,KAAK,KAAK,QAAO,UAAU,IAAI,EAAE,GAAG,GAAG,KAAK,KAAK;AAAA,QACjE;AAiBA,gBAAO,SAAS,SAAU,KAAK,KAAK;AAClC,cAAI,WAAU,KAAK,KAAK,QAAO,QAAQ,IAAI,EAAE,GAAG;AAAA,QAClD;AAiBA,gBAAO,YAAY,SAAU,KAAK,KAAK;AACrC,cAAI,WAAU,KAAK,KAAK,QAAO,WAAW,IAAI,EAAE,GAAG,IAAI,MAAM,IAAI;AAAA,QACnE;AAiBA,gBAAO,UAAU,SAAU,KAAK,KAAK;AACnC,cAAI,WAAU,KAAK,KAAK,QAAO,SAAS,IAAI,EAAE,GAAG;AAAA,QACnD;AAiBA,gBAAO,aAAa,SAAU,KAAK,KAAK;AACtC,cAAI,WAAU,KAAK,KAAK,QAAO,YAAY,IAAI,EAAE,GAAG,IAAI,MAAM,KAAK;AAAA,QACrE;AAgBA,gBAAO,SAAS,SAAU,KAAK,KAAK;AAClC,cAAI,WAAU,KAAK,KAAK,QAAO,QAAQ,IAAI,EAAE,GAAG,MAAM,IAAI;AAAA,QAC5D;AAiBA,gBAAO,YAAY,SAAU,KAAK,KAAK;AACrC,cAAI,WAAU,KAAK,KAAK,QAAO,WAAW,IAAI,EAAE,GAAG,IAAI,MAAM,IAAI;AAAA,QACnE;AAgBA,gBAAO,QAAQ,SAAU,KAAK,KAAK;AACjC,cAAI,WAAU,KAAK,KAAK,QAAO,OAAO,IAAI,EAAE,GAAG,GAAG;AAAA,QACpD;AAeA,gBAAO,WAAW,SAAU,KAAK,KAAK;AACpC,cAAI,WAAU,KAAK,KAAK,QAAO,UAAU,IAAI,EAAE,IAAI,GAAG,GAAG;AAAA,QAC3D;AAkBA,gBAAO,SAAS,SAAU,KAAK,KAAK;AAClC,cAAI,WAAU,KAAK,KAAK,QAAO,QAAQ,IAAI,EAAE,GAAG;AAAA,QAClD;AAoBA,gBAAO,YAAY,SAAU,KAAK,KAAK;AACrC,cAAI,WAAU,KAAK,KAAK,QAAO,WAAW,IAAI,EAAE,GAAG,IAAI;AAAA,QACzD;AAiBA,gBAAO,cAAc,SAAU,KAAK,KAAK;AACvC,cAAI,WAAU,KAAK,KAAK,QAAO,aAAa,IAAI,EAAE,GAAG,MAAM,MAAS;AAAA,QACtE;AAiBA,gBAAO,YAAY,SAAU,KAAK,KAAK;AACrC,cAAI,WAAU,KAAK,KAAK,QAAO,WAAW,IAAI,EAAE,GAAG,IAAI,MAAM,MAAS;AAAA,QACxE;AAiBA,gBAAO,aAAa,SAAU,KAAK,KAAK;AACtC,cAAI,WAAU,KAAK,KAAK,QAAO,YAAY,IAAI,EAAE,GAAG,GAAG,EAAE,UAAU;AAAA,QACrE;AAiBA,gBAAO,gBAAgB,SAAU,KAAK,KAAK;AACzC,cAAI,WAAU,KAAK,KAAK,QAAO,eAAe,IAAI,EAAE,GAAG,IAAI,GAAG,EAAE,UAAU;AAAA,QAC5E;AAkBA,gBAAO,WAAW,SAAU,KAAK,KAAK;AACpC,cAAI,WAAU,KAAK,KAAK,QAAO,UAAU,IAAI,EAAE,GAAG,GAAG,EAAE,QAAQ;AAAA,QACjE;AAkBA,gBAAO,cAAc,SAAU,KAAK,KAAK;AACvC,cAAI,WAAU,KAAK,KAAK,QAAO,aAAa,IAAI,EAAE,GAAG,IAAI,GAAG,EAAE,QAAQ;AAAA,QACxE;AAiBA,gBAAO,UAAU,SAAU,KAAK,KAAK;AACnC,cAAI,WAAU,KAAK,KAAK,QAAO,SAAS,IAAI,EAAE,GAAG,GAAG,GAAG,OAAO;AAAA,QAChE;AAiBA,gBAAO,aAAa,SAAU,KAAK,KAAK;AACtC,cAAI,WAAU,KAAK,KAAK,QAAO,YAAY,IAAI,EAAE,GAAG,IAAI,GAAG,GAAG,OAAO;AAAA,QACvE;AAiBA,gBAAO,WAAW,SAAU,KAAK,KAAK;AACpC,cAAI,WAAU,KAAK,KAAK,QAAO,UAAU,IAAI,EAAE,GAAG,GAAG,EAAE,QAAQ;AAAA,QACjE;AAiBA,gBAAO,cAAc,SAAU,KAAK,KAAK;AACvC,cAAI,WAAU,KAAK,KAAK,QAAO,aAAa,IAAI,EAAE,GAAG,IAAI,GAAG,EAAE,QAAQ;AAAA,QACxE;AAiBA,gBAAO,WAAW,SAAU,KAAK,KAAK;AACpC,cAAI,WAAU,KAAK,KAAK,QAAO,UAAU,IAAI,EAAE,GAAG,GAAG,EAAE,QAAQ;AAAA,QACjE;AAiBA,gBAAO,cAAc,SAAU,KAAK,KAAK;AACvC,cAAI,WAAU,KAAK,KAAK,QAAO,aAAa,IAAI,EAAE,GAAG,IAAI,GAAG,EAAE,QAAQ;AAAA,QACxE;AAmBA,gBAAO,WAAW,SAAU,KAAK,KAAK;AACpC,cAAI,WAAU,KAAK,KAAK,QAAO,UAAU,IAAI,EAAE,GAAG,GAAG;AAAA,QACvD;AAoBA,gBAAO,YAAY,SAAU,KAAK,KAAK;AACrC,cAAI,WAAU,KAAK,KAAK,QAAO,WAAW,IAAI,EAAE,GAAG,GAAG,EAAE,SAAS;AAAA,QACnE;AAoBA,gBAAO,eAAe,SAAU,KAAK,KAAK;AACxC,cAAI,WAAU,KAAK,KAAK,QAAO,cAAc,IAAI,EAAE,GAAG,IAAI,GAAG,EAAE,SAAS;AAAA,QAC1E;AAuBA,gBAAO,SAAS,SAAU,KAAK,MAAM,KAAK;AACxC,cAAI,WAAU,KAAK,KAAK,QAAO,QAAQ,IAAI,EAAE,GAAG,GAAG,EAAE,IAAI;AAAA,QAC3D;AAkBA,gBAAO,YAAY,SAAU,KAAK,MAAM,KAAK;AAC3C,cAAI,WAAU,KAAK,KAAK,QAAO,WAAW,IAAI,EAAE,GAAG,IAAI,GAAG,EAAE,IAAI;AAAA,QAClE;AAoBA,gBAAO,aAAa,SAAU,KAAK,MAAM,KAAK;AAC5C,cAAI,WAAU,KAAK,KAAK,QAAO,YAAY,IAAI,EAAE,GAAG,GAAG,WAAW,IAAI;AAAA,QACxE;AAoBA,gBAAO,gBAAgB,SAAU,KAAK,MAAM,KAAK;AAC/C,cAAI,WAAU,KAAK,KAAK,QAAO,eAAe,IAAI,EAC/C,GAAG,IAAI,GAAG,WAAW,IAAI;AAAA,QAC9B;AAiCA,gBAAO,UAAU,SAAU,KAAK,KAAK,KAAK;AACxC,cAAI,WAAU,KAAK,KAAK,QAAO,SAAS,IAAI,EAAE,QAAQ,GAAG;AAAA,QAC3D;AAkCA,gBAAO,aAAa,SAAU,KAAK,KAAK,KAAK;AAC3C,cAAI,WAAU,KAAK,KAAK,QAAO,YAAY,IAAI,EAAE,IAAI,QAAQ,GAAG;AAAA,QAClE;AAuBA,gBAAO,cAAc,SAAU,KAAK,KAAK,KAAK;AAC5C,cAAI,WAAU,KAAK,KAAK,QAAO,aAAa,IAAI,EAAE,KAAK,QAAQ,GAAG;AAAA,QACpE;AAuBA,gBAAO,iBAAiB,SAAU,KAAK,KAAK,KAAK;AAC/C,cAAI,WAAU,KAAK,KAAK,QAAO,gBAAgB,IAAI,EAAE,IAAI,KAAK,QAAQ,GAAG;AAAA,QAC3E;AAuBA,gBAAO,gBAAgB,SAAU,KAAK,KAAK,KAAK;AAC9C,cAAI,WAAU,KAAK,KAAK,QAAO,eAAe,IAAI,EAAE,OAAO,QAAQ,GAAG;AAAA,QACxE;AAuBA,gBAAO,mBAAmB,SAAU,KAAK,KAAK,KAAK;AACjD,cAAI,WAAU,KAAK,KAAK,QAAO,kBAAkB,IAAI,EAClD,IAAI,OAAO,QAAQ,GAAG;AAAA,QAC3B;AAuBA,gBAAO,oBAAoB,SAAS,KAAK,KAAK,KAAK;AACjD,cAAI,WAAU,KAAK,KAAK,QAAO,mBAAmB,IAAI,EACnD,KAAK,OAAO,QAAQ,GAAG;AAAA,QAC5B;AAuBA,gBAAO,uBAAuB,SAAS,KAAK,KAAK,KAAK;AACpD,cAAI,WAAU,KAAK,KAAK,QAAO,sBAAsB,IAAI,EACtD,IAAI,KAAK,OAAO,QAAQ,GAAG;AAAA,QAChC;AAmBA,gBAAO,aAAa,SAAS,KAAK,KAAK,KAAK;AAC1C,cAAI,WAAU,KAAK,KAAK,QAAO,YAAY,IAAI,EAAE,IAAI,QAAQ,GAAG;AAAA,QAClE;AAqBA,gBAAO,gBAAgB,SAAS,KAAK,KAAK,KAAK;AAC7C,cAAI,WAAU,KAAK,KAAK,QAAO,eAAe,IAAI,EAAE,IAAI,IAAI,QAAQ,GAAG;AAAA,QACzE;AAmBA,gBAAO,iBAAiB,SAAS,KAAK,KAAK,KAAK;AAC9C,cAAI,WAAU,KAAK,KAAK,QAAO,gBAAgB,IAAI,EAChD,KAAK,IAAI,QAAQ,GAAG;AAAA,QACzB;AAmBA,gBAAO,oBAAoB,SAAS,KAAK,KAAK,KAAK;AACjD,cAAI,WAAU,KAAK,KAAK,QAAO,mBAAmB,IAAI,EACnD,IAAI,KAAK,IAAI,QAAQ,GAAG;AAAA,QAC7B;AAiBA,gBAAO,QAAQ,SAAU,KAAK,IAAI,KAAK;AACrC,cAAI,WAAU,KAAK,KAAK,QAAO,OAAO,IAAI,EAAE,GAAG,MAAM,EAAE;AAAA,QACzD;AAiBA,gBAAO,WAAW,SAAU,KAAK,IAAI,KAAK;AACxC,cAAI,WAAU,KAAK,KAAK,QAAO,UAAU,IAAI,EAAE,GAAG,IAAI,MAAM,EAAE;AAAA,QAChE;AAmBA,gBAAO,WAAW,SAAU,KAAK,MAAM,KAAK;AAC1C,cAAI,WAAU,KAAK,KAAK,QAAO,UAAU,IAAI,EAAE,GAAG,KAAK,SAAS,IAAI;AAAA,QACtE;AAkBA,gBAAO,cAAc,SAAU,KAAK,MAAM,KAAK;AAC7C,cAAI,WAAU,KAAK,KAAK,QAAO,aAAa,IAAI,EAC7C,GAAG,IAAI,KAAK,SAAS,IAAI;AAAA,QAC9B;AAoBA,gBAAO,cAAc,SAAU,KAAK,MAAM,KAAK,KAAK;AAClD,cAAI,WAAU,KAAK,KAAK,QAAO,aAAa,IAAI,EAC7C,GAAG,KAAK,SAAS,MAAM,GAAG;AAAA,QAC/B;AAqBA,gBAAO,iBAAiB,SAAU,KAAK,MAAM,KAAK,KAAK;AACrD,cAAI,WAAU,KAAK,KAAK,QAAO,gBAAgB,IAAI,EAChD,GAAG,IAAI,KAAK,SAAS,MAAM,GAAG;AAAA,QACnC;AAmBA,gBAAO,kBAAkB,SAAU,KAAK,MAAM,KAAK,KAAK;AACtD,cAAI,WAAU,KAAK,KAAK,QAAO,iBAAiB,IAAI,EACjD,GAAG,KAAK,KAAK,SAAS,MAAM,GAAG;AAAA,QACpC;AAqBA,gBAAO,qBAAqB,SAAU,KAAK,MAAM,KAAK,KAAK;AACzD,cAAI,WAAU,KAAK,KAAK,QAAO,oBAAoB,IAAI,EACpD,GAAG,IAAI,KAAK,KAAK,SAAS,MAAM,GAAG;AAAA,QACxC;AAiBA,gBAAO,cAAc,SAAU,KAAK,MAAM,KAAK;AAC7C,cAAI,WAAU,KAAK,KAAK,QAAO,aAAa,IAAI,EAC7C,GAAG,KAAK,IAAI,SAAS,IAAI;AAAA,QAC9B;AAkBA,gBAAO,iBAAiB,SAAU,KAAK,MAAM,KAAK;AAChD,cAAI,WAAU,KAAK,KAAK,QAAO,gBAAgB,IAAI,EAChD,GAAG,IAAI,KAAK,IAAI,SAAS,IAAI;AAAA,QAClC;AAmBA,gBAAO,iBAAiB,SAAU,KAAK,MAAM,OAAO,KAAK;AACvD,cAAI,WAAU,KAAK,KAAK,QAAO,gBAAgB,IAAI,EAChD,GAAG,KAAK,IAAI,SAAS,MAAM,KAAK;AAAA,QACrC;AAoBA,gBAAO,oBAAoB,SAAU,KAAK,MAAM,OAAO,KAAK;AAC1D,cAAI,WAAU,KAAK,KAAK,QAAO,mBAAmB,IAAI,EACnD,GAAG,IAAI,KAAK,IAAI,SAAS,MAAM,KAAK;AAAA,QACzC;AAmBA,gBAAO,qBAAqB,SAAU,KAAK,MAAM,OAAO,KAAK;AAC3D,cAAI,WAAU,KAAK,KAAK,QAAO,oBAAoB,IAAI,EACpD,GAAG,KAAK,KAAK,IAAI,SAAS,MAAM,KAAK;AAAA,QAC1C;AAsBA,gBAAO,wBAAwB,SAAU,KAAK,MAAM,OAAO,KAAK;AAC9D,cAAI,WAAU,KAAK,KAAK,QAAO,uBAAuB,IAAI,EACvD,GAAG,IAAI,KAAK,KAAK,IAAI,SAAS,MAAM,KAAK;AAAA,QAC9C;AAmBA,gBAAO,iBAAiB,SAAU,KAAK,MAAM,KAAK;AAChD,cAAI,WAAU,KAAK,KAAK,QAAO,gBAAgB,IAAI,EAChD,GAAG,KAAK,OAAO,SAAS,IAAI;AAAA,QACjC;AAmBA,gBAAO,oBAAoB,SAAU,KAAK,MAAM,KAAK;AACnD,cAAI,WAAU,KAAK,KAAK,QAAO,mBAAmB,IAAI,EACnD,GAAG,IAAI,KAAK,OAAO,SAAS,IAAI;AAAA,QACrC;AAoBA,gBAAO,oBAAoB,SAAU,KAAK,MAAM,KAAK,KAAK;AACxD,cAAI,WAAU,KAAK,KAAK,QAAO,mBAAmB,IAAI,EACnD,GAAG,KAAK,OAAO,SAAS,MAAM,GAAG;AAAA,QACtC;AAqBA,gBAAO,uBAAuB,SAAU,KAAK,MAAM,KAAK,KAAK;AAC3D,cAAI,WAAU,KAAK,KAAK,QAAO,sBAAsB,IAAI,EACtD,GAAG,IAAI,KAAK,OAAO,SAAS,MAAM,GAAG;AAAA,QAC1C;AAoBA,gBAAO,wBAAwB,SAAU,KAAK,MAAM,KAAK,KAAK;AAC5D,cAAI,WAAU,KAAK,KAAK,QAAO,uBAAuB,IAAI,EACvD,GAAG,KAAK,KAAK,OAAO,SAAS,MAAM,GAAG;AAAA,QAC3C;AAsBA,gBAAO,2BAA2B,SAAU,KAAK,MAAM,KAAK,KAAK;AAC/D,cAAI,WAAU,KAAK,KAAK,QAAO,0BAA0B,IAAI,EAC1D,GAAG,IAAI,KAAK,KAAK,OAAO,SAAS,MAAM,GAAG;AAAA,QAC/C;AAoBA,gBAAO,WAAW,SAAU,KAAK,KAAK,KAAK;AACzC,cAAI,WAAU,KAAK,KAAK,QAAO,UAAU,IAAI,EAAE,GAAG,KAAK,SAAS,GAAG;AAAA,QACrE;AAsBA,gBAAO,aAAa,SAAU,KAAK,MAAM,KAAK;AAC5C,cAAI,WAAU,KAAK,KAAK,QAAO,YAAY,IAAI,EAAE,GAAG,KAAK,IAAI,KAAK,IAAI;AAAA,QACxE;AAsBA,gBAAO,aAAa,SAAU,KAAK,MAAM,KAAK;AAC5C,cAAI,WAAU,KAAK,KAAK,QAAO,YAAY,IAAI,EAAE,GAAG,KAAK,IAAI,KAAK,IAAI;AAAA,QACxE;AA0BA,gBAAO,kBAAkB,SAAU,KAAK,MAAM,KAAK;AACjD,cAAI,WAAU,KAAK,KAAK,QAAO,iBAAiB,IAAI,EACjD,GAAG,QAAQ,IAAI,KAAK,IAAI;AAAA,QAC7B;AAsBA,gBAAO,qBAAqB,SAAU,KAAK,MAAM,KAAK;AACpD,cAAI,WAAU,KAAK,KAAK,QAAO,oBAAoB,IAAI,EACpD,GAAG,IAAI,KAAK,IAAI,KAAK,IAAI;AAAA,QAC9B;AAsBA,gBAAO,qBAAqB,SAAU,KAAK,MAAM,KAAK;AACpD,cAAI,WAAU,KAAK,KAAK,QAAO,oBAAoB,IAAI,EACpD,GAAG,IAAI,KAAK,IAAI,KAAK,IAAI;AAAA,QAC9B;AA0BA,gBAAO,iBAAiB,SAAU,KAAK,MAAM,KAAK;AAChD,cAAI,WAAU,KAAK,KAAK,QAAO,gBAAgB,IAAI,EAChD,GAAG,KAAK,IAAI,KAAK,KAAK,IAAI;AAAA,QAC/B;AAwBA,gBAAO,iBAAiB,SAAU,KAAK,MAAM,KAAK;AAChD,cAAI,WAAU,KAAK,KAAK,QAAO,gBAAgB,IAAI,EAChD,GAAG,KAAK,IAAI,KAAK,KAAK,IAAI;AAAA,QAC/B;AAwBA,gBAAO,sBAAsB,SAAU,KAAK,MAAM,KAAK;AACrD,cAAI,WAAU,KAAK,KAAK,QAAO,qBAAqB,IAAI,EACrD,GAAG,QAAQ,IAAI,KAAK,KAAK,IAAI;AAAA,QAClC;AAwBA,gBAAO,yBAAyB,SAAU,KAAK,MAAM,KAAK;AACxD,cAAI,WAAU,KAAK,KAAK,QAAO,wBAAwB,IAAI,EACxD,GAAG,IAAI,KAAK,IAAI,KAAK,KAAK,IAAI;AAAA,QACnC;AAwBA,gBAAO,yBAAyB,SAAU,KAAK,MAAM,KAAK;AACxD,cAAI,WAAU,KAAK,KAAK,QAAO,wBAAwB,IAAI,EACxD,GAAG,IAAI,KAAK,IAAI,KAAK,KAAK,IAAI;AAAA,QACnC;AAiCA,gBAAO,SAAS,SAAU,IAAI,WAAW,eAAe,KAAK;AAC3D,cAAI,aAAa,OAAO,aAAa,qBAAqB,QAAQ;AAChE,4BAAgB;AAChB,wBAAY;AAAA,UACd;AAEA,cAAI,YAAY,IAAI,WAAU,IAAI,KAAK,QAAO,QAAQ,IAAI,EACvD,GAAG,MAAM,WAAW,aAAa;AACpC,iBAAO,KAAK,WAAW,QAAQ;AAAA,QACjC;AA+BA,gBAAO,eAAe,SAAU,IAAI,WAAW,eAAe,KAAK;AACjE,cAAI,aAAa,OAAO,aAAa,qBAAqB,QAAQ;AAChE,4BAAgB;AAChB,wBAAY;AAAA,UACd;AAEA,cAAI,WAAU,IAAI,KAAK,QAAO,cAAc,IAAI,EAC7C,GAAG,IAAI,MAAM,WAAW,aAAa;AAAA,QAC1C;AAmBA,gBAAO,WAAW,SAAU,KAAK,UAAU,MAAM,KAAK;AACpD,cAAI;AACJ,kBAAO;AAAA,iBACA;AACH,mBAAK,OAAO;AACZ;AAAA,iBACG;AACH,mBAAK,QAAQ;AACb;AAAA,iBACG;AACH,mBAAK,MAAM;AACX;AAAA,iBACG;AACH,mBAAK,OAAO;AACZ;AAAA,iBACG;AACH,mBAAK,MAAM;AACX;AAAA,iBACG;AACH,mBAAK,OAAO;AACZ;AAAA,iBACG;AACH,mBAAK,OAAO;AACZ;AAAA,iBACG;AACH,mBAAK,QAAQ;AACb;AAAA;AAEA,oBAAM,MAAM,MAAM,OAAO;AACzB,oBAAM,IAAI,MAAK,eACb,MAAM,uBAAuB,WAAW,KACxC,QACA,QAAO,QACT;AAAA;AAEJ,cAAI,OAAO,IAAI,WAAU,IAAI,KAAK,QAAO,UAAU,IAAI;AACvD,eAAK,OACD,SAAS,KAAK,MAAM,QAAQ,GAC5B,cAAc,MAAK,QAAQ,GAAG,IAAI,YAAY,WAAW,MAAM,MAAK,QAAQ,IAAI,GAChF,cAAc,MAAK,QAAQ,GAAG,IAAI,gBAAgB,WAAW,MAAM,MAAK,QAAQ,IAAI,CAAE;AAAA,QAC5F;AAkBA,gBAAO,UAAU,SAAU,KAAK,KAAK,OAAO,KAAK;AAC/C,cAAI,WAAU,KAAK,KAAK,QAAO,SAAS,IAAI,EAAE,GAAG,GAAG,QAAQ,KAAK,KAAK;AAAA,QACxE;AAkBA,gBAAO,gBAAgB,SAAU,KAAK,KAAK,OAAO,KAAK;AACrD,cAAI,WAAU,KAAK,KAAK,QAAO,eAAe,IAAI,EAC/C,GAAG,GAAG,cAAc,KAAK,KAAK;AAAA,QACnC;AAkBA,gBAAO,cAAc,SAAU,MAAM,MAAM,KAAK;AAC9C,cAAI,WAAU,MAAM,KAAK,QAAO,aAAa,IAAI,EAC9C,GAAG,KAAK,KAAK,QAAQ,IAAI;AAAA,QAC9B;AAkBA,gBAAO,iBAAiB,SAAU,MAAM,MAAM,KAAK;AACjD,cAAI,WAAU,MAAM,KAAK,QAAO,gBAAgB,IAAI,EACjD,GAAG,IAAI,KAAK,KAAK,QAAQ,IAAI;AAAA,QAClC;AAkBA,gBAAO,kBAAkB,SAAU,MAAM,MAAM,KAAK;AAClD,cAAI,WAAU,MAAM,KAAK,QAAO,iBAAiB,IAAI,EAClD,GAAG,KAAK,KAAK,KAAK,QAAQ,IAAI;AAAA,QACnC;AAkBA,gBAAO,qBAAqB,SAAU,MAAM,MAAM,KAAK;AACrD,cAAI,WAAU,MAAM,KAAK,QAAO,oBAAoB,IAAI,EACrD,GAAG,IAAI,KAAK,KAAK,KAAK,QAAQ,IAAI;AAAA,QACvC;AAkBA,gBAAO,qBAAqB,SAAU,MAAM,MAAM,KAAK;AACrD,cAAI,WAAU,MAAM,KAAK,QAAO,oBAAoB,IAAI,EACrD,GAAG,KAAK,KAAK,QAAQ,QAAQ,IAAI;AAAA,QACtC;AAkBA,gBAAO,wBAAwB,SAAU,MAAM,MAAM,KAAK;AACxD,cAAI,WAAU,MAAM,KAAK,QAAO,uBAAuB,IAAI,EACxD,GAAG,IAAI,KAAK,KAAK,QAAQ,QAAQ,IAAI;AAAA,QAC1C;AAkBA,gBAAO,yBAAyB,SAAU,MAAM,MAAM,KAAK;AACzD,cAAI,WAAU,MAAM,KAAK,QAAO,wBAAwB,IAAI,EACzD,GAAG,KAAK,KAAK,KAAK,QAAQ,QAAQ,IAAI;AAAA,QAC3C;AAmBA,gBAAO,4BAA4B,SAAU,MAAM,MAAM,KAAK;AAC5D,cAAI,WAAU,MAAM,KAAK,QAAO,2BAA2B,IAAI,EAC5D,GAAG,IAAI,KAAK,KAAK,KAAK,QAAQ,QAAQ,IAAI;AAAA,QAC/C;AAkBA,gBAAO,iBAAiB,SAAU,UAAU,QAAQ,KAAK;AACvD,cAAI,WAAU,UAAU,KAAK,QAAO,gBAAgB,IAAI,EACrD,GAAG,QAAQ,QAAQ,MAAM;AAAA,QAC9B;AAkBA,gBAAO,oBAAoB,SAAU,UAAU,QAAQ,KAAK;AAC1D,cAAI,WAAU,UAAU,KAAK,QAAO,mBAAmB,IAAI,EACxD,GAAG,IAAI,QAAQ,QAAQ,MAAM;AAAA,QAClC;AAkBA,gBAAO,qBAAqB,SAAU,UAAU,QAAQ,KAAK;AAC3D,cAAI,WAAU,UAAU,KAAK,QAAO,oBAAoB,IAAI,EACzD,GAAG,QAAQ,KAAK,QAAQ,MAAM;AAAA,QACnC;AAkBA,gBAAO,wBAAwB,SAAU,UAAU,QAAQ,KAAK;AAC9D,cAAI,WAAU,UAAU,KAAK,QAAO,uBAAuB,IAAI,EAC5D,GAAG,IAAI,QAAQ,KAAK,QAAQ,MAAM;AAAA,QACvC;AAmBA,gBAAO,wBAAwB,SAAU,UAAU,QAAQ,KAAK;AAC9D,cAAI,WAAU,UAAU,KAAK,QAAO,uBAAuB,IAAI,EAC5D,GAAG,QAAQ,QAAQ,QAAQ,MAAM;AAAA,QACtC;AAoBA,gBAAO,2BAA2B,SAAU,UAAU,QAAQ,KAAK;AACjE,cAAI,WAAU,UAAU,KAAK,QAAO,0BAA0B,IAAI,EAC/D,GAAG,IAAI,QAAQ,QAAQ,QAAQ,MAAM;AAAA,QAC1C;AAmBA,gBAAO,4BAA4B,SAAU,UAAU,QAAQ,KAAK;AAClE,cAAI,WAAU,UAAU,KAAK,QAAO,2BAA2B,IAAI,EAChE,GAAG,QAAQ,KAAK,QAAQ,QAAQ,MAAM;AAAA,QAC3C;AAqBA,gBAAO,+BAA+B,SAAU,UAAU,QAAQ,KAAK;AACrE,cAAI,WAAU,UAAU,KAAK,QAAO,8BAA8B,IAAI,EACnE,GAAG,IAAI,QAAQ,KAAK,QAAQ,QAAQ,MAAM;AAAA,QAC/C;AAiBA,gBAAO,QAAQ,SAAU,QAAQ,MAAM,KAAK;AAC1C,cAAI,WAAU,QAAQ,KAAK,QAAO,OAAO,IAAI,EAAE,GAAG,GAAG,MAAM,IAAI;AAAA,QACjE;AAoBA,gBAAO,UAAU,SAAU,IAAI,KAAK,MAAM,KAAK;AAC7C,cAAI,UAAU,WAAW,KAAK,OAAO,QAAQ,YAAY;AACvD,kBAAM;AACN,mBAAO;AAAA,UACT;AAEA,cAAI,WAAU,IAAI,KAAK,QAAO,SAAS,IAAI,EAAE,GAAG,OAAO,KAAK,IAAI;AAAA,QAClE;AAqBA,gBAAO,YAAY,SAAU,IAAI,KAAK,MAAM,OAAO,KAAK;AACtD,cAAI,UAAU,WAAW,KAAK,OAAO,QAAQ,YAAY;AACvD,gBAAI,SAAS;AACb,oBAAQ;AACR,kBAAM;AAAA,UACR,WAAW,UAAU,WAAW,GAAG;AACjC,oBAAQ;AACR,mBAAO;AAAA,UACT;AAEA,cAAI,WAAU,IAAI,KAAK,QAAO,WAAW,IAAI,EAC1C,GAAG,OAAO,KAAK,IAAI,EAAE,GAAG,KAAK;AAAA,QAClC;AAoBA,gBAAO,gBAAgB,SAAU,IAAI,KAAK,MAAM,KAAK;AACnD,cAAI,UAAU,WAAW,KAAK,OAAO,QAAQ,YAAY;AACvD,kBAAM;AACN,mBAAO;AAAA,UACT;AAEA,iBAAO,IAAI,WAAU,IAAI,KAAK,QAAO,eAAe,IAAI,EACrD,GAAG,IAAI,OAAO,KAAK,IAAI;AAAA,QAC5B;AAqBA,gBAAO,kBAAkB,SAAU,IAAI,KAAK,MAAM,OAAO,KAAK;AAC5D,cAAI,UAAU,WAAW,KAAK,OAAO,QAAQ,YAAY;AACvD,gBAAI,SAAS;AACb,oBAAQ;AACR,kBAAM;AAAA,UACR,WAAW,UAAU,WAAW,GAAG;AACjC,oBAAQ;AACR,mBAAO;AAAA,UACT;AAEA,cAAI,WAAU,IAAI,KAAK,QAAO,iBAAiB,IAAI,EAChD,GAAG,OAAO,KAAK,IAAI,EAAE,IAAI,IAAI,GAAG,KAAK;AAAA,QAC1C;AAoBA,gBAAO,YAAY,SAAU,IAAI,KAAK,MAAM,KAAK;AAC/C,cAAI,UAAU,WAAW,KAAK,OAAO,QAAQ,YAAY;AACvD,kBAAM;AACN,mBAAO;AAAA,UACT;AAEA,iBAAO,IAAI,WAAU,IAAI,KAAK,QAAO,WAAW,IAAI,EACjD,GAAG,SAAS,KAAK,IAAI;AAAA,QAC1B;AAqBA,gBAAO,cAAc,SAAU,IAAI,KAAK,MAAM,OAAO,KAAK;AACxD,cAAI,UAAU,WAAW,KAAK,OAAO,QAAQ,YAAY;AACvD,gBAAI,SAAS;AACb,oBAAQ;AACR,kBAAM;AAAA,UACR,WAAW,UAAU,WAAW,GAAG;AACjC,oBAAQ;AACR,mBAAO;AAAA,UACT;AAEA,cAAI,WAAU,IAAI,KAAK,QAAO,aAAa,IAAI,EAC5C,GAAG,SAAS,KAAK,IAAI,EAAE,GAAG,KAAK;AAAA,QACpC;AAoBA,gBAAO,kBAAkB,SAAU,IAAI,KAAK,MAAM,KAAK;AACrD,cAAI,UAAU,WAAW,KAAK,OAAO,QAAQ,YAAY;AACvD,kBAAM;AACN,mBAAO;AAAA,UACT;AAEA,iBAAO,IAAI,WAAU,IAAI,KAAK,QAAO,iBAAiB,IAAI,EACvD,GAAG,IAAI,SAAS,KAAK,IAAI;AAAA,QAC9B;AAqBA,gBAAO,oBAAoB,SAAU,IAAI,KAAK,MAAM,OAAO,KAAK;AAC9D,cAAI,UAAU,WAAW,KAAK,OAAO,QAAQ,YAAY;AACvD,gBAAI,SAAS;AACb,oBAAQ;AACR,kBAAM;AAAA,UACR,WAAW,UAAU,WAAW,GAAG;AACjC,oBAAQ;AACR,mBAAO;AAAA,UACT;AAEA,cAAI,WAAU,IAAI,KAAK,QAAO,mBAAmB,IAAI,EAClD,GAAG,SAAS,KAAK,IAAI,EAAE,IAAI,IAAI,GAAG,KAAK;AAAA,QAC5C;AAoBA,gBAAO,YAAY,SAAU,IAAI,KAAK,MAAM,KAAK;AAC/C,cAAI,UAAU,WAAW,KAAK,OAAO,QAAQ,YAAY;AACvD,kBAAM;AACN,mBAAO;AAAA,UACT;AAEA,iBAAO,IAAI,WAAU,IAAI,KAAK,QAAO,WAAW,IAAI,EACjD,GAAG,SAAS,KAAK,IAAI;AAAA,QAC1B;AAqBA,gBAAO,cAAc,SAAU,IAAI,KAAK,MAAM,OAAO,KAAK;AACxD,cAAI,UAAU,WAAW,KAAK,OAAO,QAAQ,YAAY;AACvD,gBAAI,SAAS;AACb,oBAAQ;AACR,kBAAM;AAAA,UACR,WAAW,UAAU,WAAW,GAAG;AACjC,oBAAQ;AACR,mBAAO;AAAA,UACT;AAEA,cAAI,WAAU,IAAI,KAAK,QAAO,aAAa,IAAI,EAC5C,GAAG,SAAS,KAAK,IAAI,EAAE,GAAG,KAAK;AAAA,QACpC;AAoBA,gBAAO,kBAAkB,SAAU,IAAI,KAAK,MAAM,KAAK;AACrD,cAAI,UAAU,WAAW,KAAK,OAAO,QAAQ,YAAY;AACvD,kBAAM;AACN,mBAAO;AAAA,UACT;AAEA,iBAAO,IAAI,WAAU,IAAI,KAAK,QAAO,iBAAiB,IAAI,EACvD,GAAG,IAAI,SAAS,KAAK,IAAI;AAAA,QAC9B;AAqBA,gBAAO,oBAAoB,SAAU,IAAI,KAAK,MAAM,OAAO,KAAK;AAC9D,cAAI,UAAU,WAAW,KAAK,OAAO,QAAQ,YAAY;AACvD,gBAAI,SAAS;AACb,oBAAQ;AACR,kBAAM;AAAA,UACR,WAAW,UAAU,WAAW,GAAG;AACjC,oBAAQ;AACR,mBAAO;AAAA,UACT;AAEA,iBAAO,IAAI,WAAU,IAAI,KAAK,QAAO,mBAAmB,IAAI,EACzD,GAAG,IAAI,SAAS,KAAK,IAAI,EAAE,GAAG,KAAK;AAAA,QACxC;AAqBA,gBAAO,oBAAoB,SAAU,IAAI,KAAK,MAAM,OAAO,KAAK;AAC9D,cAAI,UAAU,WAAW,KAAK,OAAO,QAAQ,YAAY;AACvD,gBAAI,SAAS;AACb,oBAAQ;AACR,kBAAM;AAAA,UACR,WAAW,UAAU,WAAW,GAAG;AACjC,oBAAQ;AACR,mBAAO;AAAA,UACT;AAEA,cAAI,WAAU,IAAI,KAAK,QAAO,mBAAmB,IAAI,EAClD,GAAG,SAAS,KAAK,IAAI,EAAE,IAAI,IAAI,GAAG,KAAK;AAAA,QAC5C;AAEA,AAgBA,gBAAO,UAAU,SAAU,KAAK;AAC9B,cAAI,KAAK;AACP,kBAAM;AAAA,UACR;AAAA,QACF;AAiBA,gBAAO,eAAe,SAAU,KAAK,KAAK;AACxC,cAAI,WAAU,KAAK,KAAK,QAAO,cAAc,IAAI,EAAE,GAAG,GAAG;AAAA,QAC3D;AAuBA,gBAAO,kBAAkB,SAAU,KAAK,KAAK;AAC3C,cAAI,WAAU,KAAK,KAAK,QAAO,iBAAiB,IAAI,EAAE,GAAG,IAAI,GAAG;AAAA,QAClE;AAsBA,gBAAO,WAAW,SAAU,KAAK,KAAK;AACpC,cAAI,WAAU,KAAK,KAAK,QAAO,UAAU,IAAI,EAAE,GAAG,GAAG;AAAA,QACvD;AAiBA,gBAAO,cAAc,SAAU,KAAK,KAAK;AACvC,cAAI,WAAU,KAAK,KAAK,QAAO,aAAa,IAAI,EAAE,GAAG,IAAI,GAAG;AAAA,QAC9D;AAmBA,gBAAO,WAAW,SAAU,KAAK,KAAK;AACpC,cAAI,WAAU,KAAK,KAAK,QAAO,UAAU,IAAI,EAAE,GAAG,GAAG;AAAA,QACvD;AAiBA,gBAAO,cAAc,SAAU,KAAK,KAAK;AACvC,cAAI,WAAU,KAAK,KAAK,QAAO,aAAa,IAAI,EAAE,GAAG,IAAI,GAAG;AAAA,QAC9D;AAwBA,gBAAO,UAAU,SAAS,KAAK,KAAK;AAClC,cAAI,WAAU,KAAK,KAAK,QAAO,SAAS,IAAI,EAAE,GAAG,GAAG;AAAA,QACtD;AAwBA,gBAAO,aAAa,SAAS,KAAK,KAAK;AACrC,cAAI,WAAU,KAAK,KAAK,QAAO,YAAY,IAAI,EAAE,GAAG,IAAI,GAAG;AAAA,QAC7D;AAEA,AAIA,QAAC,gBAAe,MAAM,IAAG;AACvB,kBAAO,MAAM,QAAO;AACpB,iBAAO;AAAA,QACT,GACC,QAAQ,IAAI,EACZ,WAAW,OAAO,EAClB,UAAU,OAAO,EACjB,UAAU,OAAO,EACjB,gBAAgB,YAAY,EAC5B,mBAAmB,eAAe,EAClC,YAAY,QAAQ,EACpB,eAAe,WAAW,EAC1B,YAAY,QAAQ,EACpB,eAAe,WAAW,EAC1B,WAAW,OAAO,EAClB,cAAc,UAAU;AAAA,MAC3B;AAAA;AAAA;;;ACxiGA;AAAA;AAMA,UAAI,OAAO,CAAC;AAEZ,AAIA,cAAQ,UAAU;AAElB,AAIA,cAAQ,iBAAiB;AAEzB,AAIA,UAAI,QAAO;AAYX,cAAQ,MAAM,SAAU,IAAI;AAC1B,YAAI,CAAC,CAAC,KAAK,QAAQ,EAAE,GAAG;AACtB,aAAG,SAAS,KAAI;AAChB,eAAK,KAAK,EAAE;AAAA,QACd;AAEA,eAAO;AAAA,MACT;AAEA,AAIA,cAAQ,OAAO;AAEf,AAIA,UAAI,UAAS;AACb,cAAQ,SAAS;AAEjB,AAIA,UAAI,YAAY;AAChB,cAAQ,IAAI,SAAS;AAErB,AAIA,UAAI,QAAO;AACX,cAAQ,IAAI,KAAI;AAEhB,AAIA,UAAI,UAAS;AACb,cAAQ,IAAI,OAAM;AAElB,AAIA,UAAI,UAAS;AACb,cAAQ,IAAI,OAAM;AAElB,AAIA,UAAI,UAAS;AACb,cAAQ,IAAI,OAAM;AAAA;AAAA;;;AC3FlB;AAAA;AAAA,aAAO,UAAU;AAAA;AAAA;;;ACAV,eAAa,GAAW,GAAmB;AAC9C,WAAO,IAAI;AAAA,EACf;;;ACFA,qBAAiB;AAEV,MAAM,SAAS,qBAAK;AACpB,MAAM,UAAU,qBAAK;AACrB,MAAM,YAAY,qBAAK;AACvB,MAAM,iBAAiB,qBAAK;AAC5B,MAAM,OAAO,qBAAK;AAClB,MAAM,SAAS,qBAAK;AACpB,MAAM,MAAM,qBAAK;AACjB,MAAM,SAAS,qBAAK;AACpB,MAAM,SAAS,qBAAK;AACpB,MAAM,OAAO,qBAAK;;;ACRV,qBAAmB;AAC9B,WAAO,IAAI,GAAG,CAAC,CAAC,EAAE,GAAG,GAAG,MAAM,CAAC;AAAA,EACnC;;;ACHA,UAAQ;",
  "names": []
}
